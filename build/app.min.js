!function(i){"use strict";var c=["ui.bootstrap","leaflet-directive","ngAnimate","templateCache","civic-graph.util","civic-graph.api","civic-graph.network"],a=["civic-graph.util"],r=["civic-graph.util","civic-graph.api"];i.module("civic-graph.util",[]),i.module("civic-graph.api",a),i.module("civic-graph.network",r),i.module("civic-graph",c)}(angular);
!function(t){"use strict";function a(){return{templateUrl:"js/analytic/analytics.html",restrict:"E",scope:{},controller:"analyticsCtrl"}}var c=[a];t.module("civic-graph").directive("analytics",c)}(angular);
!function(e){"use strict";function t(e,t){function i(e){var i=t.getPropertyFromObj(e);this.id=i("id"),this.name=i("name"),this.enabled=i("enable",!0)}function n(e){return new i(e)}function r(){return e.get("/categories")}return{getCategoryModel:n,getAll:r}}t.$inject=["cgApiCaller","cgUtilService"],e.module("civic-graph.api").factory("categoryService",t)}(angular);
!function(t){"use strict";function n(){return o}function i(t,i){function o(t){var n=i.getPropertyFromObj(t);this.id=n("id"),this.name=n("name"),this.details=n("details"),this.entity=n("entity"),this.entity_id=n("entity_id")}function c(t){return new o(t)}function r(){return t.get(e)}return{getAll:r,getConnectionTypes:n,getConnectionModel:c}}var e="/connections",o={Funding:!0,Data:!0,Employment:!0,Collaboration:!0};i.$inject=["cgApiCaller","cgUtilService"],t.module("civic-graph.api").factory("connectionService",i)}(angular);
!function(i){"use strict";function n(i){function n(n){var t=i.getPropertyFromObj(n);this.id=t("id"),this.year=t("year"),this.amount=t("amount",0)}function t(i){return new n(i)}return{getFinanceModel:t}}n.$inject=["cgUtilService"],i.module("civic-graph.api").factory("financeService",n)}(angular);
!function(n){"use strict";function t(n){function t(t){var i=n.getPropertyFromObj(t);this.id=i("id"),this.year=i("year"),this.amount=i("amount"),this.entity=i("entity","")}function i(n){return new t(n)}return{getFundingConnectionModel:i}}t.$inject=["cgUtilService"],n.module("civic-graph.api").factory("fundingConnectionService",t)}(angular);
!function(e){"use strict";function t(e,t){var n=this;n.isLoading=!0,n.getCurrentView=t.getCurrentView,n.isMobile=t.mobileCheck(),e.$on("cg.data-loaded",function(){n.isLoading=!1})}function n(){return{restrict:"E",templateUrl:"js/centralColumn/centralColumn.template.html",controller:t,controllerAs:"central",scope:{}}}t.$inject=["$scope","cgMainService"],e.module("civic-graph").directive("centralColumn",n)}(angular,d3);
!function(e){"use strict";e.module("civic-graph").directive("input",function(){return{restict:"E",require:"?ngModel",link:function(e,r,t,i){"type"in t&&"range"===t.type.toLowerCase()&&i.$parsers.push(parseFloat)}}})}(angular);
!function(e){"use strict";function n(e,n,t,o,i,c,r){var l=this;l.entityTypes=c.getEntityTypes(),l.connectionTypes=r.getConnectionTypes(),l.currentView=o.getCurrentView(),l.sizeBy=i.sizeBy(),l.minConnection=i.minConnection(),l.sizeByList=[{name:"Employees",value:"employees"},{name:"Twitter Followers",value:"followers"}],l.changeMinConnection=function(){i.minConnection(l.minConnection)},l.changeView=function(){o.setCurrentView(l.currentView)},l.showAbout=function(){n.open({animation:!1,templateUrl:"control/about.html",controller:"modalCtrl"})},l.toggleLink=function(n){e.$broadcast("toggleLink",{name:n,enabled:l.connectionTypes[n]})},l.changeSizeBy=function(){i.sizeBy(l.sizeBy)}}function t(){return{templateUrl:"js/control/control.template.html",restrict:"E",scope:{toggleNetwork:"="},controller:n,controllerAs:"control",bindToController:!0}}n.$inject=["$rootScope","$uibModal","_","cgMainService","cgNetworkService","entityService","connectionService"],e.module("civic-graph").directive("control",t)}(angular);
!function(e){"use strict";function t(){return{key_people:3,grants_given:3,grants_received:3,investments_made:3,investments_received:3,collaborations:3,employments:3,relations:3,data_given:3,data_received:3,revenues:3,expenses:3}}function n(e,n){function i(t){e.$emit("cg.start-edit",t)}function o(t){e.itemsShown[t]=n.getCurrentEntity()[t].length}function s(t){e.itemsShown[t]=e.itemsShownDefault[t]}function r(n){e.currentEntity=n,e.itemsShown=t()}e.isMobile=n.mobileCheck(),e.itemsShownDefault=t(),e.itemsShown=t(),e.emitStartEditEvent=i,e.showMore=o,e.showLess=s,e.$on("cg.current-entity.update",function(e,t){r(t)})}n.$inject=["$scope","cgMainService"],e.module("civic-graph").controller("detailsCtrl",n)}(angular);
!function(e){"use strict";function t(t,i,n,o,s,r,c,d,a){function u(e){return i.jsonp("https://dev.virtualearth.net/REST/v1/Locations",{params:{query:e,key:"Ai58581yC-Sr7mcFbYTtUkS3ixE7f6ZuJnbFJCVI4hAtW1XoDEeZyidQz2gLCCyD",jsonp:"JSON_CALLBACK",include:"ciso2"}}).then(function(e){if(a.isDefined(e.data.resourceSets)&&e.data.resourceSets.length>0)return e.data.resourceSets[0].resources})}function l(e){if(0===t.editEntity.categories.length)t.editEntity.categories.push(e);else{var i=!1;for(var n in t.editEntity.categories)if(t.editEntity.categories.hasOwnProperty(n)){var o=t.editEntity.categories[n];if(o.id===e.id){i=!0,o.enabled=e.enabled;break}}i||t.editEntity.categories.push(e)}}function y(e,t){u(e.formattedAddress).then(function(i){if(a.isDefined(i[0])){var n=i[0],o=n.address,s=n.point;f(t),e.address_line=a.isDefined(o.addressLine)?o.addressLine:"",e.locality=a.isDefined(o.locality)?o.locality:"",e.district=a.isDefined(o.adminDistrict)?o.adminDistrict:"",e.country=a.isDefined(o.countryRegion)?o.countryRegion:null,e.country_code=a.isDefined(o.countryRegionIso2)?o.countryRegionIso2:"",e.coordinates=a.isDefined(s.coordinates)?s.coordinates:null,e.postal_code=a.isDefined(o.postalCode)?o.postalCode:null}})}function f(e){e&&t.editEntity.locations.push(d.getLocationModel())}function g(){o.some(t.editEntity.key_people,{name:"",id:null})||t.editEntity.key_people.push({name:"",id:null})}function p(e,t){t.entity_id=e.id}function E(e){o.some(e,{entity:""})||e.push({entity:"",amount:null,year:null,id:null})}function h(e,t){t.entity_id=e.id}function v(e){o.some(e,{entity:"",id:null})||e.push({entity:"",id:null,details:null})}function m(e){o.every(e,function(e){return e.amount>0&&e.year>1750})&&e.push({amount:null,year:null,id:null})}function S(){function e(e){t.isSaving=!1,t.$emit("editEntitySuccess",e),D()}function i(){t.isError=!0,n(function(){t.isError=!1},2e3)}t.isSaving=!0,r.saveEntity(t.editEntity.generateDBModel()).then(e,i)}function D(){t.isOpen=!1}function C(i,n){e.equals(i,n)||(t.editEntity=r.getEntityModel(i),t.categories=e.copy(_),L(),t.isEditing=a.isDefined(t.editEntity.id))}function L(){var e,i,n,o;for(i in t.categories)if(t.categories.hasOwnProperty(i)){e=t.categories[i];for(n in t.editEntity.categories)t.editEntity.categories.hasOwnProperty(n)&&(o=t.editEntity.categories[n],e.id===o.id&&(e.enabled=o.enabled))}}var _;t.isEditing=!1,t.entities=s.getEntityList(),t.editEntity=r.getEntityModel(s.getCurrentEntity()),t.entityTypes=r.getEntityTypes(),t.influenceTypes=r.getInfluenceTypes(),t.categories=[],t.addressSearch=u,t.toggleCategory=l,t.setLocation=y,t.addLocation=f,t.addKeyPerson=g,t.setFundingConnection=p,t.addFundingConnection=E,t.setConnection=h,t.addConnection=v,t.addFinance=m,t.save=S,t.cancelEdit=D,t.$watch("entity",C),c.getAll().then(function(i){_=i.categories,t.categories=e.copy(_)})}function i(){return{restrict:"E",templateUrl:"js/edit-entity/editEntity.template.html",controller:t,scope:{isOpen:"="}}}t.$inject=["$scope","$http","$timeout","_","cgMainService","entityService","categoryService","locationService","cgUtilService"],e.module("civic-graph").directive("editEntity",i)}(angular);
!function(i,t){"use strict";function s(i){function s(){var i=t(this);i.css("height","55vh")}function c(){var i=t(this);window.innerHeight/3>parseInt(i.css("height"))?i.css("height","55vh"):i.css("height","30vh")}var e;i.mobile&&(e=t("#details-panel"),e.css("height","30vh"),e.scrollTop(0),e.scroll(s),e.click(c))}function c(){return{restrict:"A",link:s}}i.module("civic-graph").directive("addMobileEvents",[c])}(angular,$);
!function(o){"use strict";function c(o,c){o.closeWindow=function(){c.close()}}o.module("civic-graph").controller("modalCtrl",["$scope","$modalInstance",c])}(angular);
!function(o){"use strict";o.module("civic-graph").constant("_",window._).config(["$locationProvider","$compileProvider",function(o,n){o.html5Mode(!0),n.debugInfoEnabled(!0)}]).filter("thousandSuffix",function(){return function(o,n){var t,i=["k","M","G","T","P","E"];return window.isNaN(o)?null:o<1e3?o:(t=Math.floor(Math.log(o)/Math.log(1e3)),(o/Math.pow(1e3,t)).toFixed(n)+i[t-1])}})}(angular);
!function(t){"use strict";function e(t,e,n,s,i,c,o){function r(t){return e(function(e){setTimeout(e,t)})}function a(e){switch(e){case"search":i.setIsEdit(!1),t.settingsEnabled=!1;break;case"settings":i.setIsEdit(!1),t.showsearchMB=!1;break;case"edit":t.settingsEnabled=!1,t.showsearchMB=!1;break;default:i.setIsEdit(!1),t.settingsEnabled=!1,t.showsearchMB=!1}}function u(){a("search"),t.showsearchMB=!t.showsearchMB,t.status.license=!1}function d(){a("settings"),t.settingsEnabled=!t.settingsEnabled}function l(t){i.setCurrentEntity(t),S.isMobile&&a("edit"),i.setIsEdit(!0)}function h(){t.status.isNetworkShown=!t.status.isNetworkShown,t.status.isNetworkShown&&t.$broadcast("triggerNetworkDraw")}function g(t){i.setCurrentEntity(t),S.isEdit()&&b()}function E(t){g(n.find(i.getEntityList(),{id:t}))}function w(t){(s.isObject(t)?g:E)(t)}function f(e){t.entities=e}function b(){i.setIsEdit(!1)}function y(e){f(e.nodes),t.$broadcast("triggerNetworkDraw")}function k(t){S.currentEntity=t}var S=this;S.currentEntity=null,S.isMobile=i.mobileCheck(),S.isEdit=i.getIsEdit,t.searchItems=null,t.clickedEntity={entity:null},t.showsearchMB=!1,t.status={isNetworkShown:!0,license:!0,networkLoading:!0},t.settingsEnabled=!S.isMobile,t.showSearch=u,t.toggleSettings=d,t.startEdit=l,t.switchView=h,t.setEntity=g,t.setEntityID=E,t.selectItem=w,t.$on("cg.current-entity.update",function(t,e){k(e)}),t.$on("editEntitySuccess",y),t.$on("cg.start-edit",l),r(1e3).then(function(){return e.all([c.getAll(),o.getAll()])}).then(function(e){i.setEntityList(e[0].nodes),t.searchItems=e[0].nodes,i.setConnectionObj(e[0].connections),t.$broadcast("cg.data-loaded")})}e.$inject=["$scope","$q","_","cgUtilService","cgMainService","entityService","connectionService"],t.module("civic-graph").controller("homeCtrl",e)}(angular);
!function(i){"use strict";function t(i,t,e,n){function o(){return console.log("Current Entity in Service was called"),w}function a(t){e.isEqual(w,t)||(w=t,i.$broadcast("cg.current-entity.update",w))}function r(){var i=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series([46])0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,e=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br([ev])w|bumb|bw-([nu])|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do([cp])o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly([-_])|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-([mpt])|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c([- _agpst])|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac([ -\/])|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja([tv])a|jbro|jemu|jigs|kddi|keji|kgt([ \/])|klon|kpt |kwc-|kyo([ck])|le(no|xi)|lg( g|\/([klu])|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t([- ov])|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30([02])|n50([025])|n7(0([01])|10)|ne(([cm])-|on|tf|wf|wg|wt)|nok([6i])|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan([adt])|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c([-01])|47|mc|nd|ri)|sgh-|shar|sie([-m])|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel([im])|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c([- ])|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i,n=t.navigator.userAgent||t.navigator.vendor||t.opera;return i.test(n)||e.test(n.substr(0,4))}function c(){return f}function s(i){Array.isArray(i)&&(f=i)}function m(){return y}function l(i){n.isObject(i)&&(y=i)}function p(){return h}function u(i){n.isString(i)&&k.includes(i)&&(h=i)}function d(){return v}function g(i){v=!!i}var b=this,w=null,v=!1,k=["network","map"],h="network",f=[],y={};b.getCurrentEntity=o,b.setCurrentEntity=a,b.mobileCheck=r,b.getEntityList=c,b.setEntityList=s,b.getConnectionObj=m,b.setConnectionObj=l,b.getCurrentView=p,b.setCurrentView=u,b.getIsEdit=d,b.setIsEdit=g}t.$inject=["$rootScope","$window","_","cgUtilService"],i.module("civic-graph").service("cgMainService",t)}(angular);
!function(t){"use strict";function e(t,e){return function(n){return n[t]===e}}function n(t,n,i){function r(t){i.setCurrentEntity(t)}function c(){t.categorizedEntities=Object.keys(u).reduce(function(t,n){var r={};return r[n]=i.getEntityList().filter(e("type",n)),Object.assign({},t,r)},{})}var u=n.getEntityTypes();t.categorizedEntities={},t.updateCurrentEntity=r,t.$watch(i.getEntityList,c)}n.$inject=["$scope","entityService","cgMainService"],t.module("civic-graph").controller("overviewCtrl",n)}(angular);
!function(r){"use strict";function n(r){return!("undefined"==typeof r||null===r)}function t(r){return n(r)&&!Array.isArray(r)&&"object"==typeof r}function i(r){return n(r)&&"string"==typeof r}function e(r){var i=t(r)?r:{};return function(r,t){var e=n(t)?t:null;return n(i[r])?i[r]:e}}function u(r,n){var i=Array.isArray(r)?r.filter(t).map(n):[];return i.concat([n()])}function o(){return{isDefined:n,isObject:t,isString:i,getPropertyFromObj:e,loopAndInit:u}}r.module("civic-graph.util").factory("cgUtilService",o)}(angular);
!function(c){"use strict";function n(c){}c.module("civic-graph").controller("analyticsCtrl",["$scope",n])}(angular);
!function(e){"use strict";function i(e){function i(i){function t(){var t=e.isDefined(i)?i:{},o=e.isDefined(t.address_line)?t.address_line+" ":"",c=e.isDefined(t.locality)?t.locality+", ":"",n=e.isDefined(t.country_code)?t.country_code+" ":"",r=e.isDefined(t.postal_code)?t.postal_code:"";return(o+c+n+r).trim()}var o=this,c=e.getPropertyFromObj(i);o.id=c("id"),o.address_line=c("address_line"),o.locality=c("locality"),o.district=c("district"),o.postal_code=c("postal_code"),o.country=c("country"),o.country_code=c("country_code"),o.coordinates=c("coordinates"),o.formattedAddress=t()}function t(e){return new i(e)}return{getLocationModel:t}}i.$inject=["cgUtilService"],e.module("civic-graph.api").factory("locationService",i)}(angular);
!function(e){"use strict";function n(){return["Local","National","Global"]}function o(e,o,i,p,r,a,c){function l(e){function n(){var e=new l(t);return e.locations.pop(),e.locations.pop(),e.grants_received.pop(),e.grants_received.pop(),e.grants_given.pop(),e.grants_given.pop(),e.investments_received.pop(),e.investments_received.pop(),e.investments_made.pop(),e.investments_made.pop(),e.data_given.pop(),e.data_given.pop(),e.data_received.pop(),e.data_received.pop(),e.collaborations.pop(),e.collaborations.pop(),e.key_people.pop(),e.key_people.pop(),e.employments.pop(),e.employments.pop(),e.revenues.pop(),e.revenues.pop(),e.expenses.pop(),e.expenses.pop(),e.categories.pop(),e.categories.pop(),e.description="",e}var t=this,d=c.isDefined(e)?e:{},s=c.getPropertyFromObj(e);t.id=s("id"),t.name=s("name"),t.influence=s("influence"),t.type=s("type"),t.nickname=s("nickname"),t.url=s("url"),t.twitter_handle=s("twitter_handle"),t.employees=s("employees"),t.locations=c.loopAndInit(d.locations,r.getLocationModel),t.grants_received=c.loopAndInit(d.grants_received,o.getFundingConnectionModel),t.investments_received=c.loopAndInit(d.investments_received,o.getFundingConnectionModel),t.grants_given=c.loopAndInit(d.grants_given,o.getFundingConnectionModel),t.investments_made=c.loopAndInit(d.investments_made,o.getFundingConnectionModel),t.data_given=c.loopAndInit(d.data_given,i.getConnectionModel),t.data_received=c.loopAndInit(d.data_received,i.getConnectionModel),t.collaborations=c.loopAndInit(d.collaborations,i.getConnectionModel),t.key_people=c.loopAndInit(d.key_people,i.getConnectionModel),t.employments=c.loopAndInit(d.employments,i.getConnectionModel),t.revenues=c.loopAndInit(d.revenues,p.getFinanceModel),t.expenses=c.loopAndInit(d.expenses,p.getFinanceModel),t.categories=c.loopAndInit(d.categories,a.getCategoryModel),t.generateDBModel=n}function d(e){return new l(e)}function s(){return e.get("/entities")}function g(n){return e.post("/save",{entity:n})}return{getEntityModel:d,getInfluenceTypes:n,getAll:s,saveEntity:g,getEntityTypes:function(){return t}}}var t={Government:!0,"For-Profit":!0,"Non-Profit":!0,Individual:!0};o.$inject=["cgApiCaller","fundingConnectionService","connectionService","financeService","locationService","categoryService","cgUtilService"],e.module("civic-graph.api").factory("entityService",o)}(angular);
!function(t){"use strict";function e(t){t.defaults.headers.common["X-Requested-With"]="XMLHttpRequest"}e.$inject=["$httpProvider"],t.module("civic-graph.api").config(e)}(angular);
!function(t){"use strict";function r(t,r){function a(t){return console.error("Recieved an error from API with this message: %O",t.data),r.reject(t)}function i(t){return t.data}function c(r,c){return t.get(e+r,{params:c,headers:n}).then(i,a)}function o(r,c){return t.post(e+r,c,{headers:n}).then(i,a)}return{get:c,post:o}}var e="https://api.civicgraph.io/api",n={};r.$inject=["$http","$q"],t.module("civic-graph.api").factory("cgApiCaller",r)}(angular);
!function(t,e,o){"use strict";function r(t,r,n,i){function a(){t.options={center:{lat:20,lng:-40,zoom:3},defaults:{tileLayer:"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZGF2aWRscm50IiwiYSI6IjA0M2RkNzMzZWJmNzEzNGYzMTdhYTExYzAyZmU4ZTE1In0.TNYlFta2VItrkn4L0Z9BJQ",tileLayerOptions:{detectRetina:!0,reuseTiles:!1},zoomControl:!1,attributionControl:!1}},n.getMap().then(s)}function c(t){var o=t.data,r=e.layout.pie().sort(null).value(function(t){return t.value}),n=e.svg.arc().outerRadius(t.r).innerRadius(t.r-10),i=t.r+t.strokeWidth,a=2*i,c=a,s=document.createElementNS(e.ns.prefix.svg,"svg"),l=e.select(s).data(o).attr("class","piechart").attr("width",a).attr("height",c),d=l.selectAll(".arc").data(r(o)).enter().append("g").attr("class","arc").attr("transform","translate("+i+","+i+")");return d.append("path").attr("d",n).attr("class",function(t){return t.data.type+"-arc"}),d.append("svg:text").text(function(e,o){if(0===o)return t.count}).attr("x",-4*t.count.toString().length).attr("dy",5).attr("class","arcText"),window.XMLSerializer?(new window.XMLSerializer).serializeToString(s):s.xml?s.xml:""}function s(t){function e(t){var e=t.getAllChildMarkers(),n=e.length,i=r.pluck(e,"options"),a=r.map(r.countBy(i,"type"),function(t,e){return{type:e,value:t}}),s=28,l=1,d=2*(s+l),u=c({data:a,r:s,strokeWidth:l,count:n});return new o.DivIcon({html:u,className:"marker-cluster",iconSize:new o.point(d,d)})}function n(t){function e(e){if(r.every(e.coordinates)){"40.78200"===e.coordinates[0].toFixed(5)&&"-73.83170"===e.coordinates[1].toFixed(5)&&(e.coordinates[0]=40.77065,e.coordinates[1]=-73.97406);var n=o.marker(e.coordinates,{icon:l[t.type],title:t.name,entity_id:t.id,message:t.name,type:t.type});d.addLayer(n)}}r.forEach(t.locations,e)}function a(t){console.error(t.message+"  %O",t)}var s=i.getEntityList();t.invalidateSize(),new o.Control.Zoom({position:"topright"}).addTo(t),new o.Control.Locate({position:"topright",showPopup:!1,icon:"fa fa-location-arrow"}).addTo(t);var l={"Non-Profit":o.icon({iconUrl:"img/marker-nonprof.svg",iconSize:[60,60]}),"For-Profit":o.icon({iconUrl:"img/marker-prof.svg",iconSize:[60,60]}),Individual:o.icon({iconUrl:"img/marker-ind.svg",iconSize:[60,60]}),Government:o.icon({iconUrl:"img/marker-gov.svg",iconSize:[60,60]})},d=o.markerClusterGroup({spiderfyOnMaxZoom:!0,showCoverageOnHover:!1,iconCreateFunction:e,maxClusterRadius:30,spiderfyDistanceMultiplier:1.3});r.forEach(s,n),t.addLayer(d),t.on("locationerror",a)}a(),t.$on("cg.data-loaded",a)}function n(){return{restrict:"E",templateUrl:"js/component/map/map.template.html",controller:r}}r.$inject=["$scope","_","leafletData","cgMainService"],t.module("civic-graph").directive("cgMap",n)}(angular,d3,L);
!function(n,t){"use strict";function e(n){return a(n.select("svg"))&&n.select("svg").remove(),n.append("svg").attr("height","100vh").attr("width","100%")}function i(n){return function(e){function i(t){var e=t.value[n];return isFinite(e)&&a(e)?e:0}var r=10,u=50,c=t.max(e,i);return function(e){return t.scale.sqrt().domain([0,c]).range([r,u])(e.value[n])}}}function r(n){function t(n){return n/4}function e(n){return n-t(n)}return{Individual:{x:t(n.width),y:t(n.height)},"For-Profit":{x:t(n.width),y:e(n.height)},"Non-Profit":{x:e(n.width),y:t(n.height)},Government:{x:e(n.width),y:e(n.height)}}}function u(n){return function(t){var e=i(n)(t);return function(t){return a(t.value[n])?-2*e(t):-20}}}function c(n){return function(){return n()}}function o(o,f,s,d,l){function g(g,h){function v(){function t(){return n.element(o)[0].innerWidth}function e(){return n.element(o)[0].innerHeight}return[e(),t()]}function p(){g.$apply()}function y(n,t){n!==t&&(E&&E(),x(l.getGraphData()))}function x(n){function i(t){n.nodeList.map(function(n){return n.value}).filter(function(n){return f.isEqual(t,n)}).forEach(o)}function u(n,e){return t.layout.force().size([e.width,e.height]).nodes(n.nodeList).links(n.linkList).linkStrength(0).linkDistance(50).gravity(.01).charge(D).start()}function c(n){function e(n){return a(n)?k(n):r}function i(n){function e(){s.isDefined(t.event)&&(t.event.preventDefault(),t.event.stopPropagation()),n.selected=!0,l(n)}g.$apply(e)}var r=10,u=y.selectAll(".node").data(n).enter().append("g").attr("class",function(n){return"node "+n.value.type+"-node"}).on("click",i).call(C.drag);return u.append("circle").attr("r",e),u.append("text").text(function(n){return a(n.value.nickname)?n.value.nickname:n.value.name}).attr("dx",function(){return-.065*this.getComputedTextLength()/2+"em"}).attr("dy",function(){return.08*this.parentNode.getBBox().height/2+.5+"em"}),u}function o(t){function e(n){return function(t){return n.source===t.index||n.target===t.index}}function i(t){return function(i){return t.index===i.index||s.isDefined(n.linkList.find(e(t)))}}B.classed("focused",i(t)).classed("unfocused",f.negate(i(t))),G.classed("focused",e(t)).classed("unfocused",f.negate(e))}function l(n){if(s.isDefined(d.getCurrentEntity())){if(f.isEqual(d.getCurrentEntity(),n.value))return;v(n)}d.setCurrentEntity(n.value),o(n)}function h(){s.isDefined(d.getCurrentEntity())&&(v(),d.setCurrentEntity(null))}function v(t){B.classed("focused",!1).classed("unfocused",!1),G.classed("focused",!1).classed("unfocused",!1),s.isDefined(t)?t.fixed=!1:n.nodeList.forEach(function(n){n.fixed=!1}),s.isDefined(d.getCurrentEntity())&&C.resume()}function p(n){return y.selectAll(".link").data(n).enter().append("line").attr("class",function(n){return"link "+n.type+"-link "})}var y=e(L);if(y.on("click",function(){g.$apply(h)}),0===n.nodeList.length)return void console.debug("Node list is empty, not drawing a graph");var x=y.node().getBoundingClientRect(),k=m(n.nodeList),D=w(n.nodeList),$=r(x),C=u(n,x),B=c(n.nodeList),G=p(n.linkList);C.on("tick",function(t){function e(){var e=.1*t.alpha;G.attr("x1",function(n){return n.source.x}).attr("y1",function(n){return n.source.y}).attr("x2",function(n){return n.target.x}).attr("y2",function(n){return n.target.y}),n.nodeList.forEach(function(n){n.y+=($[n.value.type].y-n.y)*e,n.x+=($[n.value.type].x-n.x)*e}),B.attr("transform",function(n){return"translate("+n.x+","+n.y+")"})}g.$apply(e)}),E=g.$on("cg.current-entity.update",function(n,t){i(t)})}function k(n){a(n)&&(m=i(n),w=u(n))}var m,w,E,L=t.select(h[0]);o.onresize=f.debounce(p),g.$watch(c(l.sizeBy),k),g.$watchGroup([c(l.minConnection),c(l.sizeBy)],y),g.$watchCollection(f.debounce(v),y),g.$watch(l.getGraphData,y,!0)}return a=s.isDefined,{restrict:"E",link:g}}var a;o.$inject=["$window","_","cgUtilService","cgMainService","cgNetworkService"],n.module("civic-graph.network").directive("cgNetworkGraph",o)}(angular,d3);
!function(n){"use strict";function t(n){return function(t){return n[t.type]}}function e(n){return function(t){return t.value.collaborations.length>=n}}function r(n){return{id:n.id,value:n}}function i(n){return function(t){return t.id===n}}function c(n,c,u,o){function f(t){return n.isString(t)&&(y=t),y}function a(n){return isFinite(n)&&n>=0&&(d=n),d}function s(n){return Array.isArray(n)?n.filter(t(u.getEntityTypes())).map(r).filter(e(d)):[]}function g(e,r){function c(t){var c=r[t];return c.map(function(n){var r=e.findIndex(i(n.source)),c=e.findIndex(i(n.target));return{source:r,target:c,type:t}}).filter(n.isDefined)}function u(t){function e(e){return n.isDefined(t[e])&&t[e]!==-1}return e("source")&&e("target")}function f(n,t){return n.concat(t)}return Object.keys(r).map(c).reduce(f,[]).filter(u).filter(t(o.getConnectionTypes()))}function l(){var n=c.getConnectionObj(),t=s(c.getEntityList());return{nodeList:t,linkList:g(t,n)}}var v=this,d=0,y="employees";v.getGraphData=l,v.sizeBy=f,v.minConnection=a}c.$inject=["cgUtilService","cgMainService","entityService","connectionService"],n.module("civic-graph.network").service("cgNetworkService",c)}(angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNpdmljLWdyYXBoLm1vZHVsZS5qcyIsImFuYWx5dGljL2FuYWx5dGljc0RpcmVjdGl2ZS5qcyIsImFwaS9jYXRlZ29yeS5zZXJ2aWNlLmpzIiwiYXBpL2Nvbm5lY3Rpb24uc2VydmljZS5qcyIsImFwaS9maW5hbmNlLnNlcnZpY2UuanMiLCJhcGkvZnVuZGluZ0Nvbm5lY3Rpb24uc2VydmljZS5qcyIsImNlbnRyYWxDb2x1bW4vaW5kZXguanMiLCJjZW50cmFsQ29sdW1uL3NsaWRlckJhci5qcyIsImNvbnRyb2wvY29udHJvbC5qcyIsImRldGFpbC9kZXRhaWxzQ3RybC5qcyIsImVkaXQtZW50aXR5L2VkaXRFbnRpdHkuanMiLCJleHRyYS9hZGRNb2JpbGVFdmVudHMuanMiLCJleHRyYS9tb2RhbEN0cmwuanMiLCJtYWluL2FwcC5qcyIsIm1haW4vaG9tZUN0cmwuanMiLCJtYWluL3NlcnZpY2UuanMiLCJvdmVydmlldy9vdmVydmlld0N0cmwuanMiLCJ1dGlsL3NlcnZpY2UuanMiLCJhbmFseXRpYy9jb250cm9sbGVyL2FuYWx5dGljc0N0cmwuanMiLCJhcGkvZW50aXR5L2xvY2F0aW9uLnNlcnZpY2UuanMiLCJhcGkvZW50aXR5L3NlcnZpY2UuanMiLCJhcGkvYXBpQ2FsbGVyL2NvbmZpZy5qcyIsImFwaS9hcGlDYWxsZXIvc2VydmljZS5qcyIsImNvbXBvbmVudC9tYXAvbWFwLmpzIiwiY29tcG9uZW50L25ldHdvcmsvZ3JhcGguanMiLCJjb21wb25lbnQvbmV0d29yay9uZXR3b3JrLnNlcnZpY2UuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1haW5EZXBlbmRlbmN5TGlzdCIsImFwaURlcGVuZGVuY3lMaXN0IiwibmV0d29ya0RlcGVuZGVuY3lMaXN0IiwibW9kdWxlIiwiYW5hbHl0aWNzRGlyZWN0aXZlIiwidGVtcGxhdGVVcmwiLCJyZXN0cmljdCIsInNjb3BlIiwiY29udHJvbGxlciIsImFuYWx5dGljc0RlcGVuZGVuY2llcyIsImRpcmVjdGl2ZSIsIlNlcnZpY2UiLCJhcGlDYWxsZXIiLCJ1dGlscyIsIkNhdGVnb3J5Iiwib2JqIiwiZ2V0UHJvcGVydHkiLCJnZXRQcm9wZXJ0eUZyb21PYmoiLCJ0aGlzIiwiaWQiLCJuYW1lIiwiZW5hYmxlZCIsImdldENhdGVnb3J5TW9kZWwiLCJnZXRBbGwiLCJnZXQiLCIkaW5qZWN0IiwiZmFjdG9yeSIsImdldENvbm5lY3Rpb25UeXBlcyIsImNvbm5lY3Rpb25UeXBlT2JqIiwiQ29ubmVjdGlvbiIsImRldGFpbHMiLCJlbnRpdHkiLCJlbnRpdHlfaWQiLCJnZXRDb25uZWN0aW9uTW9kZWwiLCJ1cmwiLCJGdW5kaW5nIiwiRGF0YSIsIkVtcGxveW1lbnQiLCJDb2xsYWJvcmF0aW9uIiwiRmluYW5jZSIsInllYXIiLCJhbW91bnQiLCJnZXRGaW5hbmNlTW9kZWwiLCJGdW5kaW5nQ29ubmVjdGlvbiIsImdldEZ1bmRpbmdDb25uZWN0aW9uTW9kZWwiLCJDb250cm9sbGVyIiwiY2dTZXJ2aWNlIiwidm0iLCJpc0xvYWRpbmciLCJnZXRDdXJyZW50VmlldyIsImlzTW9iaWxlIiwibW9iaWxlQ2hlY2siLCIkb24iLCJEaXJlY3RpdmUiLCJjb250cm9sbGVyQXMiLCJkMyIsInJlc3RpY3QiLCJyZXF1aXJlIiwibGluayIsImVsZW1lbnQiLCJhdHRycyIsIm5nTW9kZWwiLCJ0eXBlIiwidG9Mb3dlckNhc2UiLCIkcGFyc2VycyIsInB1c2giLCJwYXJzZUZsb2F0IiwiJHJvb3RTY29wZSIsIiRtb2RhbCIsIl8iLCJuZXR3b3JrU2VydmljZSIsImVudGl0eVNlcnZpY2UiLCJjb25uZWN0aW9uU2VydmljZSIsImVudGl0eVR5cGVzIiwiZ2V0RW50aXR5VHlwZXMiLCJjb25uZWN0aW9uVHlwZXMiLCJjdXJyZW50VmlldyIsInNpemVCeSIsIm1pbkNvbm5lY3Rpb24iLCJzaXplQnlMaXN0IiwidmFsdWUiLCJjaGFuZ2VNaW5Db25uZWN0aW9uIiwiY2hhbmdlVmlldyIsInNldEN1cnJlbnRWaWV3Iiwic2hvd0Fib3V0Iiwib3BlbiIsImFuaW1hdGlvbiIsInRvZ2dsZUxpbmsiLCIkYnJvYWRjYXN0IiwiY2hhbmdlU2l6ZUJ5IiwidG9nZ2xlTmV0d29yayIsImJpbmRUb0NvbnRyb2xsZXIiLCJnZXRJdGVtc1Nob3duRGVmYXVsdCIsImtleV9wZW9wbGUiLCJncmFudHNfZ2l2ZW4iLCJncmFudHNfcmVjZWl2ZWQiLCJpbnZlc3RtZW50c19tYWRlIiwiaW52ZXN0bWVudHNfcmVjZWl2ZWQiLCJjb2xsYWJvcmF0aW9ucyIsImVtcGxveW1lbnRzIiwicmVsYXRpb25zIiwiZGF0YV9naXZlbiIsImRhdGFfcmVjZWl2ZWQiLCJyZXZlbnVlcyIsImV4cGVuc2VzIiwiJHNjb3BlIiwiZW1pdFN0YXJ0RWRpdEV2ZW50IiwiJGVtaXQiLCJzaG93TW9yZSIsIml0ZW1zU2hvd24iLCJnZXRDdXJyZW50RW50aXR5IiwibGVuZ3RoIiwic2hvd0xlc3MiLCJpdGVtc1Nob3duRGVmYXVsdCIsIm9uQ3VycmVudEVudGl0eVVwZGF0ZSIsImN1cnJlbnRFbnRpdHkiLCJldmVudCIsImFyZ3MiLCIkaHR0cCIsIiR0aW1lb3V0IiwiY2F0ZWdvcnlTZXJ2aWNlIiwibG9jYXRpb25TZXJ2aWNlIiwiYWRkcmVzc1NlYXJjaCIsInNlYXJjaCIsImpzb25wIiwicGFyYW1zIiwicXVlcnkiLCJrZXkiLCJpbmNsdWRlIiwidGhlbiIsInJlc3BvbnNlIiwiaXNEZWZpbmVkIiwiZGF0YSIsInJlc291cmNlU2V0cyIsInJlc291cmNlcyIsInRvZ2dsZUNhdGVnb3J5IiwiY2F0ZWdvcnkiLCJlZGl0RW50aXR5IiwiY2F0ZWdvcmllcyIsImZvdW5kIiwiY2F0ZWdvcnlJbmRleCIsImhhc093blByb3BlcnR5IiwiZW50aXR5Q2F0ZWdvcnkiLCJzZXRMb2NhdGlvbiIsImxvY2F0aW9uIiwiaXNMYXN0IiwiZm9ybWF0dGVkQWRkcmVzcyIsImFwaUNhbGxSZXN1bHQiLCJyZXN1bHQiLCJhZGRyZXNzIiwicG9pbnQiLCJhZGRMb2NhdGlvbiIsImFkZHJlc3NfbGluZSIsImFkZHJlc3NMaW5lIiwibG9jYWxpdHkiLCJkaXN0cmljdCIsImFkbWluRGlzdHJpY3QiLCJjb3VudHJ5IiwiY291bnRyeVJlZ2lvbiIsImNvdW50cnlfY29kZSIsImNvdW50cnlSZWdpb25Jc28yIiwiY29vcmRpbmF0ZXMiLCJwb3N0YWxfY29kZSIsInBvc3RhbENvZGUiLCJsb2NhdGlvbnMiLCJnZXRMb2NhdGlvbk1vZGVsIiwiYWRkS2V5UGVyc29uIiwic29tZSIsInNldEZ1bmRpbmdDb25uZWN0aW9uIiwiZnVuZGluZyIsImFkZEZ1bmRpbmdDb25uZWN0aW9uIiwic2V0Q29ubmVjdGlvbiIsImNvbm5lY3Rpb24iLCJhZGRDb25uZWN0aW9uIiwiY29ubmVjdGlvbnMiLCJhZGRGaW5hbmNlIiwicmVjb3JkcyIsImV2ZXJ5IiwiciIsInNhdmUiLCJzdWNjZXNzIiwiaXNTYXZpbmciLCJjYW5jZWxFZGl0IiwiZXJyb3IiLCJpc0Vycm9yIiwic2F2ZUVudGl0eSIsImdlbmVyYXRlREJNb2RlbCIsImlzT3BlbiIsIndhdGNoRW50aXR5IiwibmV3VmFsIiwib2xkVmFsIiwiZXF1YWxzIiwiZ2V0RW50aXR5TW9kZWwiLCJjb3B5IiwiY2F0ZWdvcnlCYWNrdXAiLCJpbml0Q2F0ZWdvcnlBcnJheSIsImlzRWRpdGluZyIsImVudGl0eUNhdGVnb3J5SW5kZXgiLCJlbnRpdGllcyIsImdldEVudGl0eUxpc3QiLCJpbmZsdWVuY2VUeXBlcyIsImdldEluZmx1ZW5jZVR5cGVzIiwiJHdhdGNoIiwiJCIsImxpbmtGdW5jdGlvbiIsInNjcm9sbCIsInNlbGYiLCJjc3MiLCJjbGljayIsIndpbmRvdyIsImlubmVySGVpZ2h0IiwicGFyc2VJbnQiLCJkZXRhaWxzUGFuZWwiLCJtb2JpbGUiLCJzY3JvbGxUb3AiLCJhZGRNb2JpbGVFdmVudHMiLCJtb2RhbEN0cmwiLCIkbW9kYWxJbnN0YW5jZSIsImNsb3NlV2luZG93IiwiY2xvc2UiLCJjb25zdGFudCIsImNvbmZpZyIsIiRsb2NhdGlvblByb3ZpZGVyIiwiJGNvbXBpbGVQcm92aWRlciIsImh0bWw1TW9kZSIsImRlYnVnSW5mb0VuYWJsZWQiLCJmaWx0ZXIiLCJpbnB1dCIsImRlY2ltYWxzIiwiZXhwIiwic3VmZml4ZXMiLCJpc05hTiIsIk1hdGgiLCJmbG9vciIsImxvZyIsInBvdyIsInRvRml4ZWQiLCIkcSIsIndhaXQiLCJtcyIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiaHlkZVBhcnRpYWxzIiwiZXhjZXB0Iiwic2V0SXNFZGl0Iiwic2V0dGluZ3NFbmFibGVkIiwic2hvd3NlYXJjaE1CIiwic2hvd1NlYXJjaCIsInN0YXR1cyIsImxpY2Vuc2UiLCJ0b2dnbGVTZXR0aW5ncyIsInN0YXJ0RWRpdCIsInNldEN1cnJlbnRFbnRpdHkiLCJzd2l0Y2hWaWV3IiwiaXNOZXR3b3JrU2hvd24iLCJzZXRFbnRpdHkiLCJpc0VkaXQiLCJzdG9wRWRpdCIsInNldEVudGl0eUlEIiwiZmluZCIsInNlbGVjdEl0ZW0iLCJpdGVtIiwiaXNPYmplY3QiLCJzZXRFbnRpdGllcyIsIm9uRWRpdEVudGl0eVN1Y2Nlc3MiLCJub2RlcyIsImdldElzRWRpdCIsInNlYXJjaEl0ZW1zIiwiY2xpY2tlZEVudGl0eSIsIm5ldHdvcmtMb2FkaW5nIiwiYWxsIiwicmVzcG9uc2VMaXN0Iiwic2V0RW50aXR5TGlzdCIsInNldENvbm5lY3Rpb25PYmoiLCIkd2luZG93IiwiY29uc29sZSIsIl9jdXJyZW50RW50aXR5IiwibyIsImlzRXF1YWwiLCJyZWdleCIsInJlZ2V4MiIsImFnZW50Q2hlY2siLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ2ZW5kb3IiLCJvcGVyYSIsInRlc3QiLCJzdWJzdHIiLCJlbnRpdHlMaXN0IiwiYSIsIkFycmF5IiwiaXNBcnJheSIsImdldENvbm5lY3Rpb25PYmoiLCJjb25uZWN0aW9uT2JqIiwicyIsImlzU3RyaW5nIiwiYXZhaWxhYmxlVmlld3MiLCJpbmNsdWRlcyIsImUiLCJzZXJ2aWNlIiwiZmlsdGVyQnlQcm9wZXJ0eSIsInVwZGF0ZUN1cnJlbnRFbnRpdHkiLCJ3YXRjaEVudGl0eUxpc3QiLCJjYXRlZ29yaXplZEVudGl0aWVzIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsImFzc2lnbiIsImRlZk9iaiIsInByb3BlcnR5IiwiZGVmYXVsdFZhbHVlIiwibG9vcEFuZEluaXQiLCJtb2RlbEFycmF5IiwiaW5pdE1vZGVsRnVuY3Rpb24iLCJuZXdBcnJheSIsIm1hcCIsImNvbmNhdCIsImFuYWx5dGljc0N0cmwiLCJMb2NhdGlvbiIsImJ1aWxkRm9ybWF0dGVkQWRkcmVzcyIsImNvdW50cnlDb2RlIiwidHJpbSIsImZ1bkNvbm5TZXJ2aWNlIiwiY29ublNlcnZpY2UiLCJmaW5hbmNlU2VydmljZSIsIkVudGl0eSIsImRiTW9kZWwiLCJwb3AiLCJkZXNjcmlwdGlvbiIsImluZmx1ZW5jZSIsIm5pY2tuYW1lIiwidHdpdHRlcl9oYW5kbGUiLCJlbXBsb3llZXMiLCJwb3N0IiwiZW50aXR5VHlwZU9iaiIsIkdvdmVybm1lbnQiLCJGb3ItUHJvZml0IiwiTm9uLVByb2ZpdCIsIkluZGl2aWR1YWwiLCJDb25maWciLCIkaHR0cFByb3ZpZGVyIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwibG9nQXBpRXJyb3IiLCJlcnIiLCJyZWplY3QiLCJ1bndyYXBBbmd1bGFySHR0cCIsImFwaVVybCIsImRlZmF1bHRIZWFkZXIiLCJMIiwibGVhZmxldERhdGEiLCJhY3RpdmF0ZSIsIm9wdGlvbnMiLCJjZW50ZXIiLCJsYXQiLCJsbmciLCJ6b29tIiwidGlsZUxheWVyIiwidGlsZUxheWVyT3B0aW9ucyIsImRldGVjdFJldGluYSIsInJldXNlVGlsZXMiLCJ6b29tQ29udHJvbCIsImF0dHJpYnV0aW9uQ29udHJvbCIsImdldE1hcCIsImhhbmRsZUxlYWZsZXREYXRhIiwiY3JlYXRlUGllQ2hhcnQiLCJwaWUiLCJsYXlvdXQiLCJzb3J0IiwiZCIsImFyYyIsInN2ZyIsIm91dGVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJzdHJva2VXaWR0aCIsInciLCJoIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJucyIsInByZWZpeCIsInZpcyIsInNlbGVjdCIsImF0dHIiLCJhcmNzIiwic2VsZWN0QWxsIiwiZW50ZXIiLCJhcHBlbmQiLCJ0ZXh0IiwiaSIsImNvdW50IiwidG9TdHJpbmciLCJYTUxTZXJpYWxpemVyIiwic2VyaWFsaXplVG9TdHJpbmciLCJ4bWwiLCJjbHVzdGVySWNvbiIsImNsdXN0ZXIiLCJjaGlsZHJlbiIsImdldEFsbENoaWxkTWFya2VycyIsInRvdGFsIiwiY2x1c3Rlck1hcmtlcnMiLCJwbHVjayIsImNvdW50cyIsImNvdW50QnkiLCJpY29uRGltIiwiaHRtbCIsIkRpdkljb24iLCJjbGFzc05hbWUiLCJpY29uU2l6ZSIsIm91dGVyTG9vcCIsImlubmVyTG9vcCIsImxvYyIsIm0iLCJtYXJrZXIiLCJpY29uIiwibWFya2VySWNvbiIsInRpdGxlIiwibWVzc2FnZSIsIm1hcmtlcnMiLCJhZGRMYXllciIsImZvckVhY2giLCJvbkxvY2F0aW9uRXJyb3IiLCJsZWFmbGV0RXJyb3IiLCJmaWx0ZXJlZEVudGl0aWVzIiwiaW52YWxpZGF0ZVNpemUiLCJDb250cm9sIiwiWm9vbSIsInBvc2l0aW9uIiwiYWRkVG8iLCJMb2NhdGUiLCJzaG93UG9wdXAiLCJpY29uVXJsIiwibWFya2VyQ2x1c3Rlckdyb3VwIiwic3BpZGVyZnlPbk1heFpvb20iLCJzaG93Q292ZXJhZ2VPbkhvdmVyIiwiaWNvbkNyZWF0ZUZ1bmN0aW9uIiwibWF4Q2x1c3RlclJhZGl1cyIsInNwaWRlcmZ5RGlzdGFuY2VNdWx0aXBsaWVyIiwib24iLCJidWlsZFN2Z0VsZW1lbnQiLCJyb290IiwicmVtb3ZlIiwiYnVpbGRTY2FsZUZ1bmN0aW9uIiwibm9kZUxpc3QiLCJnZXRHcmFwaE9ialBhcmFtIiwidiIsImlzRmluaXRlIiwibG93ZXJCb3VuZFJhZGl1cyIsInVwcGVyQm91bmRSYWRpdXMiLCJtYXhOb2RlUGFyYW0iLCJtYXgiLCJzY2FsZSIsInNxcnQiLCJkb21haW4iLCJyYW5nZSIsImJ1aWxkRm9jaSIsImJvdW5kcyIsInR3ZW50eUZpdmVQZXJjZW50Iiwic2V2ZW50eUZpdmVQZXJjZW50IiwieCIsIndpZHRoIiwieSIsImhlaWdodCIsImJ1aWxkQ2hhcmdlRnVuY3Rpb24iLCJzaXplQnlTY2FsZSIsIndyYXBGbiIsImZuIiwiTGlua0ZuIiwiZ2V0V2luZG93Qm94IiwiZ2V0V2luZG93V2lkdGgiLCJpbm5lcldpZHRoIiwiZ2V0V2luZG93SGVpZ2h0Iiwib25XaW5kb3dSZXNpemUiLCIkYXBwbHkiLCJydW4iLCJuIiwiY3VycmVudEVudGl0eUxpc3RlbmVyIiwicmVuZGVyIiwiZ2V0R3JhcGhEYXRhIiwiZ3JhcGhEYXRhIiwiZm9jdXNDdXJyZW50RW50aXR5IiwiZm9jdXNOZWlnaGJvcnMiLCJidWlsZEZvcmNlTGF5b3V0IiwiZm9yY2UiLCJzaXplIiwibGlua3MiLCJsaW5rTGlzdCIsImxpbmtTdHJlbmd0aCIsImxpbmtEaXN0YW5jZSIsImdyYXZpdHkiLCJjaGFyZ2UiLCJjYWxjdWxhdGVDaGFyZ2UiLCJzdGFydCIsImRyYXdOb2RlIiwiZ2V0Q2lyY2xlUmFkaXVzIiwiZGVmYXVsdFNpemUiLCJjbGlja0V2ZW50IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJzZWxlY3RlZCIsImZvY3VzIiwibm9kZSIsImNhbGwiLCJmb3JjZUxheW91dCIsImRyYWciLCJnZXRDb21wdXRlZFRleHRMZW5ndGgiLCJwYXJlbnROb2RlIiwiZ2V0QkJveCIsImNvbXBhcmVBZ2FpbnN0Q29ubmVjdGlvbk9iaiIsImMiLCJzb3VyY2UiLCJpbmRleCIsInRhcmdldCIsIm5laWdoYm9yaW5nIiwiYiIsImNsYXNzZWQiLCJuZWdhdGUiLCJ1bkZvY3VzIiwiYmFja2dyb3VuZENsaWNrIiwiZml4ZWQiLCJyZXN1bWUiLCJkcmF3Q29ubmVjdGlvbiIsImNvbm5lY3Rpb25MaXN0IiwibCIsImRlYnVnIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiX2J1aWxkU2NhbGVGdW5jdGlvbiIsIl9idWlsZENoYXJnZUZ1bmN0aW9uIiwiZm9jaSIsInRpY2siLCJrIiwiYWxwaGEiLCJ3YXRjaFNpemVCeSIsIm5ld1NpemVCeSIsIm9ucmVzaXplIiwiZGVib3VuY2UiLCIkd2F0Y2hHcm91cCIsIiR3YXRjaENvbGxlY3Rpb24iLCJmaWx0ZXJCeUJvb2xlYW5NYXAiLCJmaWx0ZXJCeU1pbkNvbm5lY3Rpb24iLCJjb252ZXJ0RW50aXR5VG9HcmFwaE5vZGUiLCJmaW5kQnlJZCIsImZpbmRUaGlzIiwiX3NpemVCeSIsIl9taW5Db25uZWN0aW9uIiwiZ2V0R3JhcGhOb2RlTGlzdCIsImdldEdyYXBoTGlua0xpc3QiLCJidWlsZENvbm5lY3Rpb25PYmplY3QiLCJzb3VyY2VOb2RlIiwiZmluZEluZGV4IiwidGFyZ2V0Tm9kZSIsImZpbHRlckNvbm5lY3Rpb25XaXRoTWlzc2luZ0VudGl0eSIsImNoZWNrUHJvcGVydHkiLCJwcm9wIiwicmVkdWNlQXJyYXlPZkFycmF5IiwiYXJyIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFVQSxHQUVOLFlBRUEsSUFBSUMsSUFDQSxlQUNBLG9CQUNBLFlBQ0EsZ0JBQ0EsbUJBQ0Esa0JBQ0EsdUJBR0FDLEdBQXFCLG9CQUVyQkMsR0FDQSxtQkFDQSxrQkFHSkgsR0FBUUksT0FBTyx1QkFDZkosRUFBUUksT0FBTyxrQkFBbUJGLEdBQ2xDRixFQUFRSSxPQUFPLHNCQUF1QkQsR0FDdENILEVBQVFJLE9BQU8sY0FBZUgsSUFFL0JEO0NDckJILFNBQVdBLEdBRVAsWUFJQSxTQUFTSyxLQUNMLE9BQ0lDLFlBQWEsNkJBQ2JDLFNBQWEsSUFDYkMsU0FDQUMsV0FBZSxpQkFQdkIsR0FBSUMsSUFBeUJMLEVBVzdCTCxHQUFRSSxPQUFPLGVBQ1ZPLFVBQVUsWUFBYUQsSUFFN0JWO0NDbkJILFNBQVdBLEdBRVAsWUFFQSxTQUFTWSxHQUFRQyxFQUFXQyxHQUV4QixRQUFTQyxHQUFTQyxHQUNkLEdBQUlDLEdBQWNILEVBQU1JLG1CQUFtQkYsRUFFM0NHLE1BQUtDLEdBQUtILEVBQVksTUFDdEJFLEtB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QVV2SixJQW5FMUUsR0FBSXZGLEdBQU81TCxLQUVQK2dCLEVBQWlCLEVBQ2pCRCxFQUFVLFdBbUVkbFYsR0FBS2lSLGFBQWVBLEVBRXBCalIsRUFBS2pJLE9BQVNBLEVBQ2RpSSxFQUFLaEksY0FBZ0JBLEVBR3pCbkUsRUFBUWMsU0FDSixnQkFDQSxnQkFDQSxnQkFDQSxxQkFHSjFCLEVBQ0tJLE9BQU8sdUJBQ1B3UyxRQUFRLG1CQUFvQmhTLElBRWxDWiIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKGFuZ3VsYXIpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBtYWluRGVwZW5kZW5jeUxpc3QgPSBbXG4gICAgICAgIFwidWkuYm9vdHN0cmFwXCIsXG4gICAgICAgIFwibGVhZmxldC1kaXJlY3RpdmVcIixcbiAgICAgICAgXCJuZ0FuaW1hdGVcIixcbiAgICAgICAgXCJ0ZW1wbGF0ZUNhY2hlXCIsXG4gICAgICAgIFwiY2l2aWMtZ3JhcGgudXRpbFwiLFxuICAgICAgICBcImNpdmljLWdyYXBoLmFwaVwiLFxuICAgICAgICBcImNpdmljLWdyYXBoLm5ldHdvcmtcIlxuICAgIF07XG5cbiAgICB2YXIgYXBpRGVwZW5kZW5jeUxpc3QgPSBbXCJjaXZpYy1ncmFwaC51dGlsXCJdO1xuXG4gICAgdmFyIG5ldHdvcmtEZXBlbmRlbmN5TGlzdCA9IFtcbiAgICAgICAgXCJjaXZpYy1ncmFwaC51dGlsXCIsXG4gICAgICAgIFwiY2l2aWMtZ3JhcGguYXBpXCJcbiAgICBdO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoXCJjaXZpYy1ncmFwaC51dGlsXCIsIFtdKTtcbiAgICBhbmd1bGFyLm1vZHVsZShcImNpdmljLWdyYXBoLmFwaVwiLCBhcGlEZXBlbmRlbmN5TGlzdCk7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJjaXZpYy1ncmFwaC5uZXR3b3JrXCIsIG5ldHdvcmtEZXBlbmRlbmN5TGlzdCk7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJjaXZpYy1ncmFwaFwiLCBtYWluRGVwZW5kZW5jeUxpc3QpO1xuXG59KShhbmd1bGFyKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSBicmlhbmF2ZWNjaGlvbmUgb24gNy8xLzE2LlxuICovXG5cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgYW5hbHl0aWNzRGVwZW5kZW5jaWVzID0gW2FuYWx5dGljc0RpcmVjdGl2ZV07XG5cbiAgICBmdW5jdGlvbiBhbmFseXRpY3NEaXJlY3RpdmUoKXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnanMvYW5hbHl0aWMvYW5hbHl0aWNzLmh0bWwnLFxuICAgICAgICAgICAgcmVzdHJpY3QgICA6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlICAgICAgOiB7fSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgICA6ICdhbmFseXRpY3NDdHJsJ1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFuZ3VsYXIubW9kdWxlKCdjaXZpYy1ncmFwaCcpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2FuYWx5dGljcycsIGFuYWx5dGljc0RlcGVuZGVuY2llcyk7XG5cbn0pKGFuZ3VsYXIpO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGJyaWFuYXZlY2NoaW9uZSBvbiA2LzI4LzE2LlxuICovXG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBmdW5jdGlvbiBTZXJ2aWNlKGFwaUNhbGxlciwgdXRpbHMpIHtcblxuICAgICAgICBmdW5jdGlvbiBDYXRlZ29yeShvYmopIHtcbiAgICAgICAgICAgIHZhciBnZXRQcm9wZXJ0eSA9IHV0aWxzLmdldFByb3BlcnR5RnJvbU9iaihvYmopO1xuXG4gICAgICAgICAgICB0aGlzLmlkID0gZ2V0UHJvcGVydHkoXCJpZFwiKTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IGdldFByb3BlcnR5KFwibmFtZVwiKTtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlZCA9IGdldFByb3BlcnR5KFwiZW5hYmxlXCIsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2F0ZWdvcnlNb2RlbChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2F0ZWdvcnkob2JqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEFsbCgpIHtcbiAgICAgICAgICAgIHJldHVybiBhcGlDYWxsZXIuZ2V0KFwiL2NhdGVnb3JpZXNcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJnZXRDYXRlZ29yeU1vZGVsXCI6IGdldENhdGVnb3J5TW9kZWwsXG4gICAgICAgICAgICBcImdldEFsbFwiOiBnZXRBbGxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBTZXJ2aWNlLiRpbmplY3QgPSBbXCJjZ0FwaUNhbGxlclwiLCBcImNnVXRpbFNlcnZpY2VcIl07XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJjaXZpYy1ncmFwaC5hcGlcIilcbiAgICAgICAgLmZhY3RvcnkoXCJjYXRlZ29yeVNlcnZpY2VcIiwgU2VydmljZSk7XG5cbn0pKGFuZ3VsYXIpO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGJyaWFuYXZlY2NoaW9uZSBvbiA2LzI3LzE2LlxuICovXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIHVybCA9IFwiL2Nvbm5lY3Rpb25zXCI7XG5cbiAgICB2YXIgY29ubmVjdGlvblR5cGVPYmogPSB7XG4gICAgICAgIFwiRnVuZGluZ1wiOiB0cnVlLFxuICAgICAgICBcIkRhdGFcIjogdHJ1ZSxcbiAgICAgICAgXCJFbXBsb3ltZW50XCI6IHRydWUsXG4gICAgICAgIFwiQ29sbGFib3JhdGlvblwiOiB0cnVlXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldENvbm5lY3Rpb25UeXBlcygpIHtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb25UeXBlT2JqO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFNlcnZpY2UoYXBpQ2FsbGVyLCB1dGlscykge1xuXG4gICAgICAgIGZ1bmN0aW9uIENvbm5lY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICB2YXIgZ2V0UHJvcGVydHkgPSB1dGlscy5nZXRQcm9wZXJ0eUZyb21PYmoob2JqKTtcblxuICAgICAgICAgICAgdGhpcy5pZCA9IGdldFByb3BlcnR5KFwiaWRcIik7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBnZXRQcm9wZXJ0eShcIm5hbWVcIik7XG4gICAgICAgICAgICB0aGlzLmRldGFpbHMgPSBnZXRQcm9wZXJ0eShcImRldGFpbHNcIik7XG4gICAgICAgICAgICB0aGlzLmVudGl0eSA9IGdldFByb3BlcnR5KFwiZW50aXR5XCIpO1xuICAgICAgICAgICAgdGhpcy5lbnRpdHlfaWQgPSBnZXRQcm9wZXJ0eShcImVudGl0eV9pZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldENvbm5lY3Rpb25Nb2RlbChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29ubmVjdGlvbihvYmopO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0QWxsKCkge1xuICAgICAgICAgICAgcmV0dXJuIGFwaUNhbGxlci5nZXQodXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcImdldEFsbFwiOiBnZXRBbGwsXG4gICAgICAgICAgICBcImdldENvbm5lY3Rpb25UeXBlc1wiOiBnZXRDb25uZWN0aW9uVHlwZXMsXG4gICAgICAgICAgICBcImdldENvbm5lY3Rpb25Nb2RlbFwiOiBnZXRDb25uZWN0aW9uTW9kZWxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBTZXJ2aWNlLiRpbmplY3QgPSBbXCJjZ0FwaUNhbGxlclwiLCBcImNnVXRpbFNlcnZpY2VcIl07XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJjaXZpYy1ncmFwaC5hcGlcIilcbiAgICAgICAgLmZhY3RvcnkoXCJjb25uZWN0aW9uU2VydmljZVwiLCBTZXJ2aWNlKTtcblxufSkoYW5ndWxhcik7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgYnJpYW5hdmVjY2hpb25lIG9uIDYvMjcvMTYuXG4gKi9cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBmdW5jdGlvbiBTZXJ2aWNlKHV0aWxzKSB7XG4gICAgICAgIGZ1bmN0aW9uIEZpbmFuY2Uob2JqKSB7XG4gICAgICAgICAgICB2YXIgZ2V0UHJvcGVydHkgPSB1dGlscy5nZXRQcm9wZXJ0eUZyb21PYmoob2JqKTtcblxuICAgICAgICAgICAgdGhpcy5pZCA9IGdldFByb3BlcnR5KFwiaWRcIik7XG4gICAgICAgICAgICB0aGlzLnllYXIgPSBnZXRQcm9wZXJ0eShcInllYXJcIik7XG4gICAgICAgICAgICB0aGlzLmFtb3VudCA9IGdldFByb3BlcnR5KFwiYW1vdW50XCIsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RmluYW5jZU1vZGVsKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGaW5hbmNlKG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJnZXRGaW5hbmNlTW9kZWxcIjogZ2V0RmluYW5jZU1vZGVsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgU2VydmljZS4kaW5qZWN0ID0gW1wiY2dVdGlsU2VydmljZVwiXTtcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZShcImNpdmljLWdyYXBoLmFwaVwiKVxuICAgICAgICAuZmFjdG9yeShcImZpbmFuY2VTZXJ2aWNlXCIsIFNlcnZpY2UpO1xuXG59KShhbmd1bGFyKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSBicmlhbmF2ZWNjaGlvbmUgb24gNi8yNy8xNi5cbiAqL1xuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGZ1bmN0aW9uIFNlcnZpY2UodXRpbHMpIHtcblxuICAgICAgICBmdW5jdGlvbiBGdW5kaW5nQ29ubmVjdGlvbihvYmopIHtcbiAgICAgICAgICAgIHZhciBnZXRQcm9wZXJ0eSA9IHV0aWxzLmdldFByb3BlcnR5RnJvbU9iaihvYmopO1xuXG4gICAgICAgICAgICB0aGlzLmlkID0gZ2V0UHJvcGVydHkoXCJpZFwiKTtcbiAgICAgICAgICAgIHRoaXMueWVhciA9IGdldFByb3BlcnR5KFwieWVhclwiKTtcbiAgICAgICAgICAgIHRoaXMuYW1vdW50ID0gZ2V0UHJvcGVydHkoXCJhbW91bnRcIik7XG4gICAgICAgICAgICB0aGlzLmVudGl0eSA9IGdldFByb3BlcnR5KFwiZW50aXR5XCIsIFwiXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RnVuZGluZ0Nvbm5lY3Rpb25Nb2RlbChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRnVuZGluZ0Nvbm5lY3Rpb24ob2JqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcImdldEZ1bmRpbmdDb25uZWN0aW9uTW9kZWxcIjogZ2V0RnVuZGluZ0Nvbm5lY3Rpb25Nb2RlbFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIFNlcnZpY2UuJGluamVjdCA9IFtcImNnVXRpbFNlcnZpY2VcIl07XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJjaXZpYy1ncmFwaC5hcGlcIilcbiAgICAgICAgLmZhY3RvcnkoXCJmdW5kaW5nQ29ubmVjdGlvblNlcnZpY2VcIiwgU2VydmljZSk7XG5cbn0pKGFuZ3VsYXIpO1xuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGZ1bmN0aW9uIENvbnRyb2xsZXIoc2NvcGUsIGNnU2VydmljZSkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIHZtLmlzTG9hZGluZyA9IHRydWU7XG4gICAgICAgIHZtLmdldEN1cnJlbnRWaWV3ID0gY2dTZXJ2aWNlLmdldEN1cnJlbnRWaWV3O1xuICAgICAgICB2bS5pc01vYmlsZSA9IGNnU2VydmljZS5tb2JpbGVDaGVjaygpO1xuXG4gICAgICAgIHNjb3BlLiRvbihcImNnLmRhdGEtbG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZtLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkc2NvcGVcIiwgXCJjZ01haW5TZXJ2aWNlXCJdO1xuXG4gICAgZnVuY3Rpb24gRGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJyZXN0cmljdFwiOiBcIkVcIixcbiAgICAgICAgICAgIFwidGVtcGxhdGVVcmxcIjogXCJqcy9jZW50cmFsQ29sdW1uL2NlbnRyYWxDb2x1bW4udGVtcGxhdGUuaHRtbFwiLFxuICAgICAgICAgICAgXCJjb250cm9sbGVyXCI6IENvbnRyb2xsZXIsXG4gICAgICAgICAgICBcImNvbnRyb2xsZXJBc1wiOiBcImNlbnRyYWxcIixcbiAgICAgICAgICAgIFwic2NvcGVcIjoge31cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJjaXZpYy1ncmFwaFwiKVxuICAgICAgICAuZGlyZWN0aXZlKFwiY2VudHJhbENvbHVtblwiLCBEaXJlY3RpdmUpO1xuXG59KShhbmd1bGFyLCBkMyk7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgYnJpYW5hdmVjY2hpb25lIG9uIDYvMjYvMTYuXG4gKi9cbihmdW5jdGlvbihhbmd1bGFyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgLmRpcmVjdGl2ZSgnaW5wdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0aWN0OiAnRScsXG4gICAgICAgICAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCAndHlwZScgaW4gYXR0cnMgJiYgYXR0cnMudHlwZS50b0xvd2VyQ2FzZSgpID09PSAncmFuZ2UnICkge1xuICAgICAgICAgICAgICAgICAgICBuZ01vZGVsLiRwYXJzZXJzLnB1c2gocGFyc2VGbG9hdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufSkoYW5ndWxhcik7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGJyaWFuYXZlY2NoaW9uZSBvbiA3LzEwLzE2LlxuICovXG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBmdW5jdGlvbiBDb250cm9sbGVyKCRyb290U2NvcGUsICRtb2RhbCwgXywgY2dTZXJ2aWNlLCBuZXR3b3JrU2VydmljZSwgZW50aXR5U2VydmljZSwgY29ubmVjdGlvblNlcnZpY2UpIHtcbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICB2bS5lbnRpdHlUeXBlcyA9IGVudGl0eVNlcnZpY2UuZ2V0RW50aXR5VHlwZXMoKTtcbiAgICAgICAgdm0uY29ubmVjdGlvblR5cGVzID0gY29ubmVjdGlvblNlcnZpY2UuZ2V0Q29ubmVjdGlvblR5cGVzKCk7XG4gICAgICAgIHZtLmN1cnJlbnRWaWV3ID0gY2dTZXJ2aWNlLmdldEN1cnJlbnRWaWV3KCk7XG5cbiAgICAgICAgdm0uc2l6ZUJ5ID0gbmV0d29ya1NlcnZpY2Uuc2l6ZUJ5KCk7XG4gICAgICAgIHZtLm1pbkNvbm5lY3Rpb24gPSBuZXR3b3JrU2VydmljZS5taW5Db25uZWN0aW9uKCk7XG5cbiAgICAgICAgdm0uc2l6ZUJ5TGlzdCA9IFtcbiAgICAgICAgICAgIHsgXCJuYW1lXCI6IFwiRW1wbG95ZWVzXCIsIFwidmFsdWVcIjogXCJlbXBsb3llZXNcIiB9LFxuICAgICAgICAgICAgeyBcIm5hbWVcIjogXCJUd2l0dGVyIEZvbGxvd2Vyc1wiLCBcInZhbHVlXCI6IFwiZm9sbG93ZXJzXCIgfVxuICAgICAgICBdO1xuXG4gICAgICAgIHZtLmNoYW5nZU1pbkNvbm5lY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBuZXR3b3JrU2VydmljZS5taW5Db25uZWN0aW9uKHZtLm1pbkNvbm5lY3Rpb24pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZtLmNoYW5nZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjZ1NlcnZpY2Uuc2V0Q3VycmVudFZpZXcodm0uY3VycmVudFZpZXcpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZtLnNob3dBYm91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbnRyb2wvYWJvdXQuaHRtbFwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwibW9kYWxDdHJsXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZtLnRvZ2dsZUxpbmsgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KFwidG9nZ2xlTGlua1wiLCB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IHR5cGUsIFwiZW5hYmxlZFwiOiB2bS5jb25uZWN0aW9uVHlwZXNbdHlwZV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZtLmNoYW5nZVNpemVCeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5ldHdvcmtTZXJ2aWNlLnNpemVCeSh2bS5zaXplQnkpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIENvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgICAgICAgXCIkcm9vdFNjb3BlXCIsXG4gICAgICAgIFwiJHVpYk1vZGFsXCIsXG4gICAgICAgIFwiX1wiLFxuICAgICAgICBcImNnTWFpblNlcnZpY2VcIixcbiAgICAgICAgXCJjZ05ldHdvcmtTZXJ2aWNlXCIsXG4gICAgICAgIFwiZW50aXR5U2VydmljZVwiLFxuICAgICAgICBcImNvbm5lY3Rpb25TZXJ2aWNlXCJcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gRGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwianMvY29udHJvbC9jb250cm9sLnRlbXBsYXRlLmh0bWxcIixcbiAgICAgICAgICAgIHJlc3RyaWN0ICAgOiBcIkVcIixcbiAgICAgICAgICAgIHNjb3BlICAgICAgOiB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlTmV0d29yayA6IFwiPVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udHJvbGxlciAgIDogQ29udHJvbGxlcixcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiY29udHJvbFwiLFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlciA6IHRydWVcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJjaXZpYy1ncmFwaFwiKVxuICAgICAgICAuZGlyZWN0aXZlKFwiY29udHJvbFwiLCBEaXJlY3RpdmUpO1xuXG59KShhbmd1bGFyKTtcbiIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gZ2V0SXRlbXNTaG93bkRlZmF1bHQgKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2tleV9wZW9wbGUnOiAzLFxuICAgICAgICAgICAgJ2dyYW50c19naXZlbic6IDMsXG4gICAgICAgICAgICAnZ3JhbnRzX3JlY2VpdmVkJzogMyxcbiAgICAgICAgICAgICdpbnZlc3RtZW50c19tYWRlJzogMyxcbiAgICAgICAgICAgICdpbnZlc3RtZW50c19yZWNlaXZlZCc6IDMsXG4gICAgICAgICAgICAnY29sbGFib3JhdGlvbnMnOiAzLFxuICAgICAgICAgICAgJ2VtcGxveW1lbnRzJzogMyxcbiAgICAgICAgICAgICdyZWxhdGlvbnMnOiAzLFxuICAgICAgICAgICAgJ2RhdGFfZ2l2ZW4nOiAzLFxuICAgICAgICAgICAgJ2RhdGFfcmVjZWl2ZWQnOiAzLFxuICAgICAgICAgICAgJ3JldmVudWVzJzogMyxcbiAgICAgICAgICAgICdleHBlbnNlcyc6IDNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBDb250cm9sbGVyICgkc2NvcGUsIGNnU2VydmljZSkge1xuICAgICAgICAkc2NvcGUuaXNNb2JpbGUgPSBjZ1NlcnZpY2UubW9iaWxlQ2hlY2soKTtcbiAgICAgICAgJHNjb3BlLml0ZW1zU2hvd25EZWZhdWx0ID0gZ2V0SXRlbXNTaG93bkRlZmF1bHQoKTtcbiAgICAgICAgJHNjb3BlLml0ZW1zU2hvd24gPSBnZXRJdGVtc1Nob3duRGVmYXVsdCgpO1xuXG4gICAgICAgICRzY29wZS5lbWl0U3RhcnRFZGl0RXZlbnQgPSBlbWl0U3RhcnRFZGl0RXZlbnQ7XG4gICAgICAgICRzY29wZS5zaG93TW9yZSA9IHNob3dNb3JlO1xuICAgICAgICAkc2NvcGUuc2hvd0xlc3MgPSBzaG93TGVzcztcblxuICAgICAgICAkc2NvcGUuJG9uKCdjZy5jdXJyZW50LWVudGl0eS51cGRhdGUnLCBmdW5jdGlvbiAoZXZlbnQsIGFyZ3MpIHsgb25DdXJyZW50RW50aXR5VXBkYXRlKGFyZ3MpOyB9KTtcblxuICAgICAgICBmdW5jdGlvbiBlbWl0U3RhcnRFZGl0RXZlbnQgKGVudGl0eSkge1xuICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdjZy5zdGFydC1lZGl0JywgZW50aXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNob3dNb3JlICh0eXBlKSB7XG4gICAgICAgICAgICAkc2NvcGUuaXRlbXNTaG93blsgdHlwZSBdID0gY2dTZXJ2aWNlLmdldEN1cnJlbnRFbnRpdHkoKVsgdHlwZSBdLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNob3dMZXNzICh0eXBlKSB7XG4gICAgICAgICAgICAkc2NvcGUuaXRlbXNTaG93blsgdHlwZSBdID0gJHNjb3BlLml0ZW1zU2hvd25EZWZhdWx0WyB0eXBlIF07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvbkN1cnJlbnRFbnRpdHlVcGRhdGUgKGN1cnJlbnRFbnRpdHkpIHtcbiAgICAgICAgICAgICRzY29wZS5jdXJyZW50RW50aXR5ID0gY3VycmVudEVudGl0eTtcbiAgICAgICAgICAgIC8vIFJlc2V0IGl0ZW1zIHNob3duIGluIGRldGFpbHMgbGlzdC5cbiAgICAgICAgICAgICRzY29wZS5pdGVtc1Nob3duID0gZ2V0SXRlbXNTaG93bkRlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIENvbnRyb2xsZXIuJGluamVjdCA9IFsgJyRzY29wZScsICdjZ01haW5TZXJ2aWNlJyBdO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdjaXZpYy1ncmFwaCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdkZXRhaWxzQ3RybCcsIENvbnRyb2xsZXIpO1xufSkoYW5ndWxhcik7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgZnVuY3Rpb24gQ29udHJvbGxlcigkc2NvcGUsICRodHRwLCAkdGltZW91dCwgXywgY2dTZXJ2aWNlLCBlbnRpdHlTZXJ2aWNlLCBjYXRlZ29yeVNlcnZpY2UsIGxvY2F0aW9uU2VydmljZSwgdXRpbHMpIHtcbiAgICAgICAgdmFyIGNhdGVnb3J5QmFja3VwO1xuXG4gICAgICAgICRzY29wZS5pc0VkaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLmVudGl0aWVzID0gY2dTZXJ2aWNlLmdldEVudGl0eUxpc3QoKTtcbiAgICAgICAgJHNjb3BlLmVkaXRFbnRpdHkgPSBlbnRpdHlTZXJ2aWNlLmdldEVudGl0eU1vZGVsKGNnU2VydmljZS5nZXRDdXJyZW50RW50aXR5KCkpO1xuICAgICAgICAkc2NvcGUuZW50aXR5VHlwZXMgPSBlbnRpdHlTZXJ2aWNlLmdldEVudGl0eVR5cGVzKCk7XG4gICAgICAgICRzY29wZS5pbmZsdWVuY2VUeXBlcyA9IGVudGl0eVNlcnZpY2UuZ2V0SW5mbHVlbmNlVHlwZXMoKTtcbiAgICAgICAgJHNjb3BlLmNhdGVnb3JpZXMgPSBbXTtcblxuICAgICAgICAkc2NvcGUuYWRkcmVzc1NlYXJjaCA9IGFkZHJlc3NTZWFyY2g7XG4gICAgICAgICRzY29wZS50b2dnbGVDYXRlZ29yeSA9IHRvZ2dsZUNhdGVnb3J5O1xuICAgICAgICAkc2NvcGUuc2V0TG9jYXRpb24gPSBzZXRMb2NhdGlvbjtcbiAgICAgICAgJHNjb3BlLmFkZExvY2F0aW9uID0gYWRkTG9jYXRpb247XG4gICAgICAgICRzY29wZS5hZGRLZXlQZXJzb24gPSBhZGRLZXlQZXJzb247XG4gICAgICAgICRzY29wZS5zZXRGdW5kaW5nQ29ubmVjdGlvbiA9IHNldEZ1bmRpbmdDb25uZWN0aW9uO1xuICAgICAgICAkc2NvcGUuYWRkRnVuZGluZ0Nvbm5lY3Rpb24gPSBhZGRGdW5kaW5nQ29ubmVjdGlvbjtcbiAgICAgICAgJHNjb3BlLnNldENvbm5lY3Rpb24gPSBzZXRDb25uZWN0aW9uO1xuICAgICAgICAkc2NvcGUuYWRkQ29ubmVjdGlvbiA9IGFkZENvbm5lY3Rpb247XG4gICAgICAgICRzY29wZS5hZGRGaW5hbmNlID0gYWRkRmluYW5jZTtcbiAgICAgICAgJHNjb3BlLnNhdmUgPSBzYXZlO1xuICAgICAgICAkc2NvcGUuY2FuY2VsRWRpdCA9IGNhbmNlbEVkaXQ7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnZW50aXR5Jywgd2F0Y2hFbnRpdHkpO1xuXG4gICAgICAgIC8vIFJldHJpZXZlIENhdGVnb3JpZXMgZnJvbSBEQlxuICAgICAgICBjYXRlZ29yeVNlcnZpY2VcbiAgICAgICAgICAgIC5nZXRBbGwoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeUJhY2t1cCA9IGRhdGEuY2F0ZWdvcmllcztcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGVzIGJhY2t1cCBvZiBkYXRhIHVzaW5nIEFuZ3VsYXIgdG8gcHJldmVudCBhcGkgZGF0YSBmcm9tIGJlaW5nIHRhbXBlcmVkXG4gICAgICAgICAgICAgICAgLy8gZGlyZWN0bHlcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IGFuZ3VsYXIuY29weShjYXRlZ29yeUJhY2t1cCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBhZGRyZXNzU2VhcmNoKHNlYXJjaCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmpzb25wKCdodHRwczovL2Rldi52aXJ0dWFsZWFydGgubmV0L1JFU1QvdjEvTG9jYXRpb25zJywge1xuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeTogc2VhcmNoLFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdBaTU4NTgxeUMtU3I3bWNGYllUdFVrUzNpeEU3ZjZadUpuYkZKQ1ZJNGhBdFcxWG9ERWVaeWlkUXoyZ0xDQ3lEJyxcbiAgICAgICAgICAgICAgICAgICAgJ2pzb25wJzogJ0pTT05fQ0FMTEJBQ0snLFxuICAgICAgICAgICAgICAgICAgICAnaW5jbHVkZSc6ICdjaXNvMidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbHMuaXNEZWZpbmVkKHJlc3BvbnNlLmRhdGEucmVzb3VyY2VTZXRzKSAmJiByZXNwb25zZS5kYXRhLnJlc291cmNlU2V0cy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzb3VyY2VTZXRzWzBdLnJlc291cmNlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdG9nZ2xlQ2F0ZWdvcnkoY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgIGlmICgkc2NvcGUuZWRpdEVudGl0eS5jYXRlZ29yaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5lZGl0RW50aXR5LmNhdGVnb3JpZXMucHVzaChjYXRlZ29yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGNhdGVnb3J5SW5kZXggaW4gJHNjb3BlLmVkaXRFbnRpdHkuY2F0ZWdvcmllcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5lZGl0RW50aXR5LmNhdGVnb3JpZXMuaGFzT3duUHJvcGVydHkoY2F0ZWdvcnlJbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbnRpdHlDYXRlZ29yeSA9ICRzY29wZS5lZGl0RW50aXR5LmNhdGVnb3JpZXNbY2F0ZWdvcnlJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdHlDYXRlZ29yeS5pZCA9PT0gY2F0ZWdvcnkuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eUNhdGVnb3J5LmVuYWJsZWQgPSBjYXRlZ29yeS5lbmFibGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWRpdEVudGl0eS5jYXRlZ29yaWVzLnB1c2goY2F0ZWdvcnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldExvY2F0aW9uKGxvY2F0aW9uLCBpc0xhc3QpIHtcbiAgICAgICAgICAgIGFkZHJlc3NTZWFyY2gobG9jYXRpb24uZm9ybWF0dGVkQWRkcmVzcylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYXBpQ2FsbFJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWxzLmlzRGVmaW5lZChhcGlDYWxsUmVzdWx0WzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhcGlDYWxsUmVzdWx0WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyA9IHJlc3VsdC5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQgPSByZXN1bHQucG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIGFkZExvY2F0aW9uKGlzTGFzdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2VzIEFQSSBjYWxsIHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5hZGRyZXNzX2xpbmUgPSB1dGlscy5pc0RlZmluZWQoYWRkcmVzcy5hZGRyZXNzTGluZSkgPyBhZGRyZXNzLmFkZHJlc3NMaW5lIDogJyc7XG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmxvY2FsaXR5ID0gdXRpbHMuaXNEZWZpbmVkKGFkZHJlc3MubG9jYWxpdHkpID8gYWRkcmVzcy5sb2NhbGl0eSA6ICcnO1xuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5kaXN0cmljdCA9XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5pc0RlZmluZWQoYWRkcmVzcy5hZG1pbkRpc3RyaWN0KSA/IGFkZHJlc3MuYWRtaW5EaXN0cmljdCA6ICcnO1xuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5jb3VudHJ5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmlzRGVmaW5lZChhZGRyZXNzLmNvdW50cnlSZWdpb24pID8gYWRkcmVzcy5jb3VudHJ5UmVnaW9uIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uY291bnRyeV9jb2RlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmlzRGVmaW5lZChhZGRyZXNzLmNvdW50cnlSZWdpb25Jc28yKSA/IGFkZHJlc3MuY291bnRyeVJlZ2lvbklzbzIgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uY29vcmRpbmF0ZXMgPSB1dGlscy5pc0RlZmluZWQocG9pbnQuY29vcmRpbmF0ZXMpID8gcG9pbnQuY29vcmRpbmF0ZXMgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5wb3N0YWxfY29kZSA9IHV0aWxzLmlzRGVmaW5lZChhZGRyZXNzLnBvc3RhbENvZGUpID8gYWRkcmVzcy5wb3N0YWxDb2RlIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZExvY2F0aW9uKGlzTGFzdCkge1xuICAgICAgICAgICAgaWYgKGlzTGFzdCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5lZGl0RW50aXR5LmxvY2F0aW9ucy5wdXNoKGxvY2F0aW9uU2VydmljZS5nZXRMb2NhdGlvbk1vZGVsKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkS2V5UGVyc29uKCkge1xuICAgICAgICAgICAgLy8gQWRkIGJsYW5rIGZpZWxkIHRvIGVkaXQgaWYgdGhlcmUgYXJlIG5vbmUuXG4gICAgICAgICAgICAvLyBXQVRDSCBPVVQhIFRPRE86IElmIHNvbWVvbmUgZGVsZXRlcyBhbiBvbGQgcGVyc29uLCBkZWxldGUgdGhlaXIgaWQgdG9vLlxuICAgICAgICAgICAgLy8gaS5lLiBtYWtlIHN1cmUgb2xkL2NsZWFyZWQgZm9ybSBmaWVsZHMgYXJlbid0IGJlaW5nIGVkaXRlZCBpbnRvIG5ldyBwZW9wbGUuXG4gICAgICAgICAgICBpZiAoIShfLnNvbWUoJHNjb3BlLmVkaXRFbnRpdHkua2V5X3Blb3BsZSwgeyAnbmFtZSc6ICcnLCAnaWQnOiBudWxsIH0pKSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5lZGl0RW50aXR5LmtleV9wZW9wbGUucHVzaCh7ICduYW1lJzogJycsICdpZCc6IG51bGwgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRGdW5kaW5nQ29ubmVjdGlvbihlbnRpdHksIGZ1bmRpbmcpIHtcbiAgICAgICAgICAgIC8vIEFkZCBvdGhlciBlbnRpdHkncyBpZCB0byB0aGlzIGZpbmFuY2UgY29ubmVjdGlvbi5cbiAgICAgICAgICAgIGZ1bmRpbmcuZW50aXR5X2lkID0gZW50aXR5LmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkRnVuZGluZ0Nvbm5lY3Rpb24oZnVuZGluZykge1xuICAgICAgICAgICAgaWYgKCFfLnNvbWUoZnVuZGluZywgeyAnZW50aXR5JzogJycgfSkpIHtcbiAgICAgICAgICAgICAgICAvLyBNYXliZSBzZXQgYW1vdW50IHRvIDAgaW5zdGVhZCBvZiBudWxsP1xuICAgICAgICAgICAgICAgIGZ1bmRpbmcucHVzaCh7ICdlbnRpdHknOiAnJywgJ2Ftb3VudCc6IG51bGwsICd5ZWFyJzogbnVsbCwgJ2lkJzogbnVsbCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldENvbm5lY3Rpb24oZW50aXR5LCBjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uLmVudGl0eV9pZCA9IGVudGl0eS5pZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZENvbm5lY3Rpb24oY29ubmVjdGlvbnMpIHtcbiAgICAgICAgICAgIC8vIEFkZCBhbiBlbXB0eSBjb25uZWN0aW9uIHRvIGVkaXQgaWYgbm9uZSBleGlzdC5cbiAgICAgICAgICAgIGlmICghXy5zb21lKGNvbm5lY3Rpb25zLCB7ICdlbnRpdHknOiAnJywgJ2lkJzogbnVsbCB9KSkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25zLnB1c2goeyAnZW50aXR5JzogJycsICdpZCc6IG51bGwsICdkZXRhaWxzJzogbnVsbCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZEZpbmFuY2UocmVjb3Jkcykge1xuICAgICAgICAgICAgLy8gQWRkIG5ldyBmaW5hbmNlIGZpZWxkIGlmIGFsbCBjdXJyZW50IGZpZWxkcyBhcmUgdmFsaWQuXG4gICAgICAgICAgICBpZiAoXy5ldmVyeShyZWNvcmRzLCBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5hbW91bnQgPiAwICYmIHIueWVhciA+IDE3NTA7XG4gICAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICByZWNvcmRzLnB1c2goeyAnYW1vdW50JzogbnVsbCwgJ3llYXInOiBudWxsLCAnaWQnOiBudWxsIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2F2ZSgpIHtcbiAgICAgICAgICAgICRzY29wZS5pc1NhdmluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNTYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoXCJlZGl0RW50aXR5U3VjY2Vzc1wiLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgY2FuY2VsRWRpdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0sIDIwMDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbnRpdHlTZXJ2aWNlXG4gICAgICAgICAgICAgICAgLnNhdmVFbnRpdHkoJHNjb3BlLmVkaXRFbnRpdHkuZ2VuZXJhdGVEQk1vZGVsKCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oc3VjY2VzcywgZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2FuY2VsRWRpdCgpIHtcbiAgICAgICAgICAgICRzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHdhdGNoRW50aXR5KG5ld1ZhbCwgb2xkVmFsKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5lcXVhbHMobmV3VmFsLCBvbGRWYWwpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc2NvcGUuZWRpdEVudGl0eSA9IGVudGl0eVNlcnZpY2UuZ2V0RW50aXR5TW9kZWwobmV3VmFsKTtcbiAgICAgICAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gYW5ndWxhci5jb3B5KGNhdGVnb3J5QmFja3VwKTtcblxuICAgICAgICAgICAgaW5pdENhdGVnb3J5QXJyYXkoKTtcblxuICAgICAgICAgICAgJHNjb3BlLmlzRWRpdGluZyA9IHV0aWxzLmlzRGVmaW5lZCgkc2NvcGUuZWRpdEVudGl0eS5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5pdGlhbGl6ZXMgY2F0ZWdvcnkgZmllbGRzIHdpdGggZW50aXR5IHZhbHVlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogTG9vcHMgdGhyb3VnaCBjYXRlZ29yeSBpbiBjYXRlZ29yaWVzIGFuZCBsb29wcyB0aHJvdWdoIGNhdGVnb3J5IGluIGVudGl0eS4gSWRlbnRpZmllc1xuICAgICAgICAgKiBjYXRlZ29yaWVzIGVuYWJsZWQgaW4gdGhlIGVudGl0eSBhbmQgc2V0cyBsb2NhbCBkaXNwbGF5IGRhdGEuIFRoaXMgaXMgYmVjYXVzZSB3ZSBjcmVhdGVkXG4gICAgICAgICAqIGEgYmFja3VwIG9mIGVudGl0eSBkYXRhIHNvIHRoYXQgdGhlIGFwaSBkYXRhIGlzIG5vdCB0YW1wZXJlZCB3aXRoIGRpcmVjdGx5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBUT0RPOiByZXBsYWNlIHdpdGggYmV0dGVyIGRhdGEgc3RydWN0dXJlIGZvciBjYXRlZ29yaWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gaW5pdENhdGVnb3J5QXJyYXkoKSB7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlJbmRleCxcbiAgICAgICAgICAgICAgICBlbnRpdHlDYXRlZ29yeUluZGV4LFxuICAgICAgICAgICAgICAgIGVudGl0eUNhdGVnb3J5O1xuXG4gICAgICAgICAgICBmb3IgKGNhdGVnb3J5SW5kZXggaW4gJHNjb3BlLmNhdGVnb3JpZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5jYXRlZ29yaWVzLmhhc093blByb3BlcnR5KGNhdGVnb3J5SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRlZ29yeSA9ICRzY29wZS5jYXRlZ29yaWVzW2NhdGVnb3J5SW5kZXhdO1xuICAgICAgICAgICAgICAgIGZvciAoZW50aXR5Q2F0ZWdvcnlJbmRleCBpbiAkc2NvcGUuZWRpdEVudGl0eS5jYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmVkaXRFbnRpdHkuY2F0ZWdvcmllcy5oYXNPd25Qcm9wZXJ0eShlbnRpdHlDYXRlZ29yeUluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZW50aXR5Q2F0ZWdvcnkgPSAkc2NvcGUuZWRpdEVudGl0eS5jYXRlZ29yaWVzW2VudGl0eUNhdGVnb3J5SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2F0ZWdvcnkuaWQgPT09IGVudGl0eUNhdGVnb3J5LmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS5lbmFibGVkID0gZW50aXR5Q2F0ZWdvcnkuZW5hYmxlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIENvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgICAgICAgXCIkc2NvcGVcIixcbiAgICAgICAgXCIkaHR0cFwiLFxuICAgICAgICBcIiR0aW1lb3V0XCIsXG4gICAgICAgIFwiX1wiLFxuICAgICAgICBcImNnTWFpblNlcnZpY2VcIixcbiAgICAgICAgXCJlbnRpdHlTZXJ2aWNlXCIsXG4gICAgICAgIFwiY2F0ZWdvcnlTZXJ2aWNlXCIsXG4gICAgICAgIFwibG9jYXRpb25TZXJ2aWNlXCIsXG4gICAgICAgIFwiY2dVdGlsU2VydmljZVwiXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIERpcmVjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImpzL2VkaXQtZW50aXR5L2VkaXRFbnRpdHkudGVtcGxhdGUuaHRtbFwiLFxuICAgICAgICAgICAgY29udHJvbGxlcjogQ29udHJvbGxlcixcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgXCJpc09wZW5cIjogXCI9XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJjaXZpYy1ncmFwaFwiKVxuICAgICAgICAuZGlyZWN0aXZlKFwiZWRpdEVudGl0eVwiLCBEaXJlY3RpdmUpO1xuXG59KShhbmd1bGFyKTtcbiIsIihmdW5jdGlvbiAoYW5ndWxhciwgJCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmN0aW9uKHNjb3BlKSB7XG5cbiAgICAgICAgZnVuY3Rpb24gc2Nyb2xsKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSAkKHRoaXMpO1xuICAgICAgICAgICAgc2VsZi5jc3MoJ2hlaWdodCcsICc1NXZoJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbGljaygpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gJCh0aGlzKTtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuaW5uZXJIZWlnaHQgLyAzID4gcGFyc2VJbnQoc2VsZi5jc3MoJ2hlaWdodCcpKSkge1xuICAgICAgICAgICAgICAgIHNlbGYuY3NzKCdoZWlnaHQnLCAnNTV2aCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNzcygnaGVpZ2h0JywgJzMwdmgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZXRhaWxzUGFuZWw7XG4gICAgICAgIGlmIChzY29wZS5tb2JpbGUpIHtcbiAgICAgICAgICAgIGRldGFpbHNQYW5lbCA9ICQoXCIjZGV0YWlscy1wYW5lbFwiKTtcbiAgICAgICAgICAgIGRldGFpbHNQYW5lbC5jc3MoXCJoZWlnaHRcIiwgXCIzMHZoXCIpO1xuICAgICAgICAgICAgZGV0YWlsc1BhbmVsLnNjcm9sbFRvcCgwKTtcbiAgICAgICAgICAgIGRldGFpbHNQYW5lbC5zY3JvbGwoc2Nyb2xsKTtcbiAgICAgICAgICAgIGRldGFpbHNQYW5lbC5jbGljayhjbGljayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRNb2JpbGVFdmVudHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgbGluazogbGlua0Z1bmN0aW9uXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgLmRpcmVjdGl2ZSgnYWRkTW9iaWxlRXZlbnRzJywgW2FkZE1vYmlsZUV2ZW50c10pO1xufSkoYW5ndWxhciwgJCk7XG4iLCIoZnVuY3Rpb24oYW5ndWxhcikge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gbW9kYWxDdHJsKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UpIHtcbiAgICAgICAgJHNjb3BlLmNsb3NlV2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuY29udHJvbGxlcignbW9kYWxDdHJsJywgWyckc2NvcGUnLCAnJG1vZGFsSW5zdGFuY2UnLCBtb2RhbEN0cmxdKTtcblxufSkoYW5ndWxhcik7IiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuY29uc3RhbnQoJ18nLCB3aW5kb3cuXylcbiAgICAgICAgLmNvbmZpZyhbJyRsb2NhdGlvblByb3ZpZGVyJywgJyRjb21waWxlUHJvdmlkZXInLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRsb2NhdGlvblByb3ZpZGVyLCAkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZCh0cnVlKTtcbiAgICAgICAgICAgIH1dKVxuICAgICAgICAuZmlsdGVyKCd0aG91c2FuZFN1ZmZpeCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQsIGRlY2ltYWxzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV4cCxcbiAgICAgICAgICAgICAgICAgICAgc3VmZml4ZXMgPSBbJ2snLCAnTScsICdHJywgJ1QnLCAnUCcsICdFJ107XG5cbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPCAxMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHAgPSBNYXRoLmZsb29yKE1hdGgubG9nKGlucHV0KSAvIE1hdGgubG9nKDEwMDApKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoaW5wdXQgLyBNYXRoLnBvdygxMDAwLCBleHApKS50b0ZpeGVkKGRlY2ltYWxzKSArIHN1ZmZpeGVzW2V4cCAtIDFdO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbn0pKGFuZ3VsYXIpO1xuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBDb250cm9sbGVyICgkc2NvcGUsICRxLCBfLCB1dGlscywgY2dTZXJ2aWNlLCBlbnRpdHlTZXJ2aWNlLCBjb25uZWN0aW9uU2VydmljZSkge1xuICAgICAgICBmdW5jdGlvbiB3YWl0IChtcykge1xuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpOyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgLy8gRm9yIHRoZSBzZWFyY2ggYmFyXG4gICAgICAgIHZtLmN1cnJlbnRFbnRpdHkgPSBudWxsO1xuXG4gICAgICAgIHZtLmlzTW9iaWxlID0gY2dTZXJ2aWNlLm1vYmlsZUNoZWNrKCk7XG5cbiAgICAgICAgdm0uaXNFZGl0ID0gY2dTZXJ2aWNlLmdldElzRWRpdDtcblxuICAgICAgICAkc2NvcGUuc2VhcmNoSXRlbXMgPSBudWxsO1xuICAgICAgICAkc2NvcGUuY2xpY2tlZEVudGl0eSA9IHsgZW50aXR5OiBudWxsIH07XG4gICAgICAgICRzY29wZS5zaG93c2VhcmNoTUIgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHtcbiAgICAgICAgICAgICdpc05ldHdvcmtTaG93bic6IHRydWUsXG4gICAgICAgICAgICAnbGljZW5zZSc6IHRydWUsXG4gICAgICAgICAgICAnbmV0d29ya0xvYWRpbmcnOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5zZXR0aW5nc0VuYWJsZWQgPSAhdm0uaXNNb2JpbGU7XG5cbiAgICAgICAgJHNjb3BlLnNob3dTZWFyY2ggPSBzaG93U2VhcmNoO1xuICAgICAgICAkc2NvcGUudG9nZ2xlU2V0dGluZ3MgPSB0b2dnbGVTZXR0aW5ncztcbiAgICAgICAgJHNjb3BlLnN0YXJ0RWRpdCA9IHN0YXJ0RWRpdDtcbiAgICAgICAgJHNjb3BlLnN3aXRjaFZpZXcgPSBzd2l0Y2hWaWV3O1xuICAgICAgICAkc2NvcGUuc2V0RW50aXR5ID0gc2V0RW50aXR5O1xuICAgICAgICAkc2NvcGUuc2V0RW50aXR5SUQgPSBzZXRFbnRpdHlJRDtcbiAgICAgICAgJHNjb3BlLnNlbGVjdEl0ZW0gPSBzZWxlY3RJdGVtO1xuXG4gICAgICAgICRzY29wZS4kb24oJ2NnLmN1cnJlbnQtZW50aXR5LnVwZGF0ZScsIGZ1bmN0aW9uIChldmVudCwgYXJncykgeyBvbkN1cnJlbnRFbnRpdHlVcGRhdGUoYXJncyk7IH0pO1xuICAgICAgICAkc2NvcGUuJG9uKCdlZGl0RW50aXR5U3VjY2VzcycsIG9uRWRpdEVudGl0eVN1Y2Nlc3MpO1xuICAgICAgICAkc2NvcGUuJG9uKCdjZy5zdGFydC1lZGl0Jywgc3RhcnRFZGl0KTtcblxuICAgICAgICAvLyBMZWF2aW5nIGhlcmUgZm9yIHRlc3RpbmcgcmVhc29ucy4gIFRoZSB3YWl0IG1ldGhvZCBpc24ndCBhY3R1YWxseSBuZWNlc3NhcnksIGJ1dCB1c2VmdWxcbiAgICAgICAgLy8gaWYgeW91IGRvbid0IGhhdmUgYSBsb3Qgb2YgZGF0YSBpbiB0aGUgZGF0YWJhc2UgYW5kIG5lZWQgdG8gc2ltdWxhdGUgYSBsYXJnZSByZXF1ZXN0LlxuICAgICAgICAvLyBUaGUgJHEuYWxsKCkgaXMgbmVjZXNzYXJ5IHRob3VnaCwgc28gaWYgeW91IHJlbW92ZSB3YWl0KCksIGxlYXZlIHRoZSAkcS5hbGwoKVxuICAgICAgICB3YWl0KDEwMDApXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbIGVudGl0eVNlcnZpY2UuZ2V0QWxsKCksIGNvbm5lY3Rpb25TZXJ2aWNlLmdldEFsbCgpIF0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZUxpc3QpIHtcbiAgICAgICAgICAgICAgICBjZ1NlcnZpY2Uuc2V0RW50aXR5TGlzdChyZXNwb25zZUxpc3RbIDAgXS5ub2Rlcyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaEl0ZW1zID0gcmVzcG9uc2VMaXN0WyAwIF0ubm9kZXM7XG5cbiAgICAgICAgICAgICAgICBjZ1NlcnZpY2Uuc2V0Q29ubmVjdGlvbk9iaihyZXNwb25zZUxpc3RbIDAgXS5jb25uZWN0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnY2cuZGF0YS1sb2FkZWQnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGh5ZGVQYXJ0aWFscyAoZXhjZXB0KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV4Y2VwdCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlYXJjaCc6XG4gICAgICAgICAgICAgICAgICAgIGNnU2VydmljZS5zZXRJc0VkaXQoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0dGluZ3NFbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NldHRpbmdzJzpcbiAgICAgICAgICAgICAgICAgICAgY2dTZXJ2aWNlLnNldElzRWRpdChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93c2VhcmNoTUIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZWRpdCc6XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXR0aW5nc0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dzZWFyY2hNQiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjZ1NlcnZpY2Uuc2V0SXNFZGl0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNldHRpbmdzRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd3NlYXJjaE1CID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNob3dTZWFyY2ggKCkge1xuICAgICAgICAgICAgaHlkZVBhcnRpYWxzKCdzZWFyY2gnKTtcbiAgICAgICAgICAgICRzY29wZS5zaG93c2VhcmNoTUIgPSAhJHNjb3BlLnNob3dzZWFyY2hNQjtcbiAgICAgICAgICAgIC8vICRzY29wZS4kYnJvYWRjYXN0KCdoaWRlTGljZW5zZScpO1xuICAgICAgICAgICAgJHNjb3BlLnN0YXR1cy5saWNlbnNlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0b2dnbGVTZXR0aW5ncyAoKSB7XG4gICAgICAgICAgICBoeWRlUGFydGlhbHMoJ3NldHRpbmdzJyk7XG4gICAgICAgICAgICAkc2NvcGUuc2V0dGluZ3NFbmFibGVkID0gISRzY29wZS5zZXR0aW5nc0VuYWJsZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzdGFydEVkaXQgKGVudGl0eSkge1xuICAgICAgICAgICAgY2dTZXJ2aWNlLnNldEN1cnJlbnRFbnRpdHkoZW50aXR5KTtcbiAgICAgICAgICAgIGlmICggdm0uaXNNb2JpbGUgKSB7XG4gICAgICAgICAgICAgICAgaHlkZVBhcnRpYWxzKCdlZGl0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjZ1NlcnZpY2Uuc2V0SXNFZGl0KHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3dpdGNoVmlldyAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuc3RhdHVzLmlzTmV0d29ya1Nob3duID0gISRzY29wZS5zdGF0dXMuaXNOZXR3b3JrU2hvd247XG4gICAgICAgICAgICBpZiAoICRzY29wZS5zdGF0dXMuaXNOZXR3b3JrU2hvd24gKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3RyaWdnZXJOZXR3b3JrRHJhdycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0RW50aXR5IChlbnRpdHkpIHtcbiAgICAgICAgICAgIGNnU2VydmljZS5zZXRDdXJyZW50RW50aXR5KGVudGl0eSk7XG5cbiAgICAgICAgICAgIGlmICggdm0uaXNFZGl0KCkgKSB7XG4gICAgICAgICAgICAgICAgc3RvcEVkaXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldEVudGl0eUlEIChpZCkge1xuICAgICAgICAgICAgc2V0RW50aXR5KF8uZmluZChjZ1NlcnZpY2UuZ2V0RW50aXR5TGlzdCgpLCB7ICdpZCc6IGlkIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNlbGVjdEl0ZW0gKGl0ZW0pIHtcbiAgICAgICAgICAgICh1dGlscy5pc09iamVjdChpdGVtKSA/IHNldEVudGl0eSA6IHNldEVudGl0eUlEKShpdGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldEVudGl0aWVzIChlbnRpdGllcykge1xuICAgICAgICAgICAgJHNjb3BlLmVudGl0aWVzID0gZW50aXRpZXM7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzdG9wRWRpdCAoKSB7IGNnU2VydmljZS5zZXRJc0VkaXQoZmFsc2UpOyB9XG5cbiAgICAgICAgZnVuY3Rpb24gb25FZGl0RW50aXR5U3VjY2VzcyAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHNldEVudGl0aWVzKHJlc3BvbnNlLm5vZGVzKTtcbiAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCd0cmlnZ2VyTmV0d29ya0RyYXcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9uQ3VycmVudEVudGl0eVVwZGF0ZSAoY3VycmVudEVudGl0eSkge1xuICAgICAgICAgICAgdm0uY3VycmVudEVudGl0eSA9IGN1cnJlbnRFbnRpdHk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICAgICAgICckc2NvcGUnLFxuICAgICAgICAnJHEnLFxuICAgICAgICAnXycsXG4gICAgICAgICdjZ1V0aWxTZXJ2aWNlJyxcbiAgICAgICAgJ2NnTWFpblNlcnZpY2UnLFxuICAgICAgICAnZW50aXR5U2VydmljZScsXG4gICAgICAgICdjb25uZWN0aW9uU2VydmljZSdcbiAgICBdO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ2hvbWVDdHJsJywgQ29udHJvbGxlcik7XG5cbn0pKGFuZ3VsYXIpO1xuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gJHJvb3RTY29wZSAtIE5vdCBwcm91ZCBvZiB0aGlzIGRlcGVuZGVuY3ksIGJ1dCB3aWxsIGhvcGVmdWxseSByZW1vdmUgc29tZSBoYXJkLWhpdHRpbmcgd2F0Y2hlcnNcbiAgICAgKiBAcGFyYW0gJHdpbmRvd1xuICAgICAqIEBwYXJhbSBfLCBsb2Rhc2ggbGlicmFyeSwgcmVhbGx5IG5lZWQgdG8gZ2V0IGFyb3VuZCB0byBpbXBsZW1lbnRpbmcgRVM2IGZvciBpbXBvcnRzIG9mIHRoaXMgc3R1ZmZcbiAgICAgKiBAcGFyYW0gdXRpbHNcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXJ2aWNlICgkcm9vdFNjb3BlLCAkd2luZG93LCBfLCB1dGlscykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF9jdXJyZW50RW50aXR5ID0gbnVsbDtcblxuICAgICAgICB2YXIgaXNFZGl0ID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIGF2YWlsYWJsZVZpZXdzID0gWyAnbmV0d29yaycsICdtYXAnIF07XG4gICAgICAgIHZhciBjdXJyZW50VmlldyA9ICduZXR3b3JrJztcblxuICAgICAgICB2YXIgZW50aXR5TGlzdCA9IFtdO1xuICAgICAgICB2YXIgY29ubmVjdGlvbk9iaiA9IHt9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRFbnRpdHkgKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0N1cnJlbnQgRW50aXR5IGluIFNlcnZpY2Ugd2FzIGNhbGxlZCcpO1xuICAgICAgICAgICAgcmV0dXJuIF9jdXJyZW50RW50aXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0Q3VycmVudEVudGl0eSAobykge1xuICAgICAgICAgICAgaWYgKCAhXy5pc0VxdWFsKF9jdXJyZW50RW50aXR5LCBvKSApIHtcbiAgICAgICAgICAgICAgICBfY3VycmVudEVudGl0eSA9IG87XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdjZy5jdXJyZW50LWVudGl0eS51cGRhdGUnLCBfY3VycmVudEVudGl0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtb2JpbGVDaGVjayAoKSB7XG4gICAgICAgICAgICB2YXIgcmVnZXggPSAvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoWzQ2XSkwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pO1xuICAgICAgICAgICAgdmFyIHJlZ2V4MiA9IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihbZXZdKXd8YnVtYnxidy0oW251XSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG0tfGNlbGx8Y2h0bXxjbGRjfGNtZC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGMtc3xkZXZpfGRpY2F8ZG1vYnxkbyhbY3BdKW98ZHMoMTJ8LWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShbLV9dKXxnMSB1fGc1NjB8Z2VuZXxnZi01fGctbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZC0oW21wdF0pfGhlaS18aGkocHR8dGEpfGhwKCBpfGlwKXxocy1jfGh0KGMoWy0gX2FncHN0XSl8dHApfGh1KGF3fHRjKXxpLSgyMHxnb3xtYSl8aTIzMHxpYWMoWyAtL10pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYShbdHZdKWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndChbIC9dKXxrbG9ufGtwdCB8a3djLXxreW8oW2NrXSl8bGUobm98eGkpfGxnKCBnfFxcLyhba2x1XSl8NTB8NTR8LVthLXddKXxsaWJ3fGx5bnh8bTEtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG0tY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoWy0gb3ZdKXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoWzAyXSl8bjUwKFswMjVdKXxuNygwKFswMV0pfDEwKXxuZSgoW2NtXSktfG9ufHRmfHdmfHdnfHd0KXxub2soWzZpXSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oW2FkdF0pfHBkeGd8cGcoMTN8LShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwbi0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHQtZ3xxYS1hfHFjKDA3fDEyfDIxfDMyfDYwfC1bMi03XXxpLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGgtfG9vfHAtKXxzZGtcXC98c2UoYyhbLTAxXSl8NDd8bWN8bmR8cmkpfHNnaC18c2hhcnxzaWUoWy1tXSl8c2stMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoLXx2LXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbC18dGRnLXx0ZWwoW2ltXSl8dGltLXx0LW1vfHRvKHBsfHNoKXx0cyg3MHxtLXxtM3xtNSl8dHgtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118LXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoWy0gXSl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXMtfHlvdXJ8emV0b3x6dGUtL2k7XG4gICAgICAgICAgICB2YXIgYWdlbnRDaGVjayA9ICR3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAkd2luZG93Lm5hdmlnYXRvci52ZW5kb3IgfHwgJHdpbmRvdy5vcGVyYTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QoYWdlbnRDaGVjaykgfHwgcmVnZXgyLnRlc3QoYWdlbnRDaGVjay5zdWJzdHIoMCwgNCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RW50aXR5TGlzdCAoKSB7IHJldHVybiBlbnRpdHlMaXN0OyB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0RW50aXR5TGlzdCAoYSkge1xuICAgICAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5KGEpICkge1xuICAgICAgICAgICAgICAgIGVudGl0eUxpc3QgPSBhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gV0FSTklORywgTVVUQUJMRSEgIEV2ZXJ5b25lIHdpbGwgc2VlIGlmIHlvdSB1cGRhdGUgcHJvcGVydGllcyBvZiB0aGlzXG4gICAgICAgIGZ1bmN0aW9uIGdldENvbm5lY3Rpb25PYmogKCkgeyByZXR1cm4gY29ubmVjdGlvbk9iajsgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldENvbm5lY3Rpb25PYmogKG8pIHtcbiAgICAgICAgICAgIGlmICggdXRpbHMuaXNPYmplY3QobykgKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbk9iaiA9IG87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRDdXJyZW50VmlldyAoKSB7IHJldHVybiBjdXJyZW50VmlldzsgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldEN1cnJlbnRWaWV3IChzKSB7XG4gICAgICAgICAgICBpZiAoIHV0aWxzLmlzU3RyaW5nKHMpICYmIGF2YWlsYWJsZVZpZXdzLmluY2x1ZGVzKHMpICkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRWaWV3ID0gcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldElzRWRpdCAoKSB7IHJldHVybiBpc0VkaXQ7IH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRJc0VkaXQgKGUpIHsgaXNFZGl0ID0gISFlOyB9XG5cbiAgICAgICAgc2VsZi5nZXRDdXJyZW50RW50aXR5ID0gZ2V0Q3VycmVudEVudGl0eTtcbiAgICAgICAgc2VsZi5zZXRDdXJyZW50RW50aXR5ID0gc2V0Q3VycmVudEVudGl0eTtcbiAgICAgICAgc2VsZi5tb2JpbGVDaGVjayA9IG1vYmlsZUNoZWNrO1xuICAgICAgICBzZWxmLmdldEVudGl0eUxpc3QgPSBnZXRFbnRpdHlMaXN0O1xuICAgICAgICBzZWxmLnNldEVudGl0eUxpc3QgPSBzZXRFbnRpdHlMaXN0O1xuICAgICAgICBzZWxmLmdldENvbm5lY3Rpb25PYmogPSBnZXRDb25uZWN0aW9uT2JqO1xuICAgICAgICBzZWxmLnNldENvbm5lY3Rpb25PYmogPSBzZXRDb25uZWN0aW9uT2JqO1xuICAgICAgICBzZWxmLmdldEN1cnJlbnRWaWV3ID0gZ2V0Q3VycmVudFZpZXc7XG4gICAgICAgIHNlbGYuc2V0Q3VycmVudFZpZXcgPSBzZXRDdXJyZW50VmlldztcbiAgICAgICAgc2VsZi5nZXRJc0VkaXQgPSBnZXRJc0VkaXQ7XG4gICAgICAgIHNlbGYuc2V0SXNFZGl0ID0gc2V0SXNFZGl0O1xuICAgIH1cblxuICAgIFNlcnZpY2UuJGluamVjdCA9IFsgJyRyb290U2NvcGUnLCAnJHdpbmRvdycsICdfJywgJ2NnVXRpbFNlcnZpY2UnIF07XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgLnNlcnZpY2UoJ2NnTWFpblNlcnZpY2UnLCBTZXJ2aWNlKTtcblxufSkoYW5ndWxhcik7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGZ1bmN0aW9uIGZpbHRlckJ5UHJvcGVydHkgKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZVsga2V5IF0gPT09IHZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIENvbnRyb2xsZXIgKCRzY29wZSwgZW50aXR5U2VydmljZSwgY2dTZXJ2aWNlKSB7XG4gICAgICAgIHZhciBlbnRpdHlUeXBlcyA9IGVudGl0eVNlcnZpY2UuZ2V0RW50aXR5VHlwZXMoKTtcblxuICAgICAgICAkc2NvcGUuY2F0ZWdvcml6ZWRFbnRpdGllcyA9IHt9O1xuXG4gICAgICAgICRzY29wZS51cGRhdGVDdXJyZW50RW50aXR5ID0gdXBkYXRlQ3VycmVudEVudGl0eTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKGNnU2VydmljZS5nZXRFbnRpdHlMaXN0LCB3YXRjaEVudGl0eUxpc3QpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUN1cnJlbnRFbnRpdHkgKGVudGl0eSkgeyBjZ1NlcnZpY2Uuc2V0Q3VycmVudEVudGl0eShlbnRpdHkpOyB9XG5cbiAgICAgICAgZnVuY3Rpb24gd2F0Y2hFbnRpdHlMaXN0ICgpIHtcbiAgICAgICAgICAgICRzY29wZS5jYXRlZ29yaXplZEVudGl0aWVzID0gT2JqZWN0XG4gICAgICAgICAgICAgICAgLmtleXMoZW50aXR5VHlwZXMpXG4gICAgICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgb2JqWyB0eXBlIF0gPSBjZ1NlcnZpY2UuZ2V0RW50aXR5TGlzdCgpLmZpbHRlcihmaWx0ZXJCeVByb3BlcnR5KCd0eXBlJywgdHlwZSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcmVzdWx0LCBvYmopO1xuICAgICAgICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIENvbnRyb2xsZXIuJGluamVjdCA9IFsgJyRzY29wZScsICdlbnRpdHlTZXJ2aWNlJywgJ2NnTWFpblNlcnZpY2UnIF07XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ292ZXJ2aWV3Q3RybCcsIENvbnRyb2xsZXIpO1xufSkoYW5ndWxhcik7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gQ2dVdGlsU2VydmljZVxuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGlzRGVmaW5lZFxuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGlzT2JqZWN0XG4gICAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gaXNTdHJpbmdcbiAgICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRQcm9wZXJ0eUZyb21PYmpcbiAgICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBsb29wQW5kSW5pdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmZiB0eXBlb2YgbyBpcyB1bmRlZmluZWQgb3IgbyBpcyBudWxsXG4gICAgICogQHBhcmFtIG9cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0RlZmluZWQobykge1xuICAgICAgICByZXR1cm4gISh0eXBlb2YgbyA9PT0gXCJ1bmRlZmluZWRcIiB8fCBvID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWZmIG8gaXMgZGVmaW5lZCBhbmQgdHlwZW9mIG8gaXMgb2JqZWN0IGFuZCBvIGlzIG5vdCBhcnJheVxuICAgICAqIEBwYXJhbSBvXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICAgICAgICByZXR1cm4gaXNEZWZpbmVkKG8pICYmICFBcnJheS5pc0FycmF5KG8pICYmICh0eXBlb2YgbyA9PT0gXCJvYmplY3RcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmZiBvIGlzIGRlZmluZWQgYW5kIHR5cGVvZiBvIGlzIHN0cmluZ1xuICAgICAqIEBwYXJhbSBvXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcobykge1xuICAgICAgICByZXR1cm4gaXNEZWZpbmVkKG8pICYmIHR5cGVvZiBvID09PSBcInN0cmluZ1wiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBtZXRob2QgdGhhdCB0YWtlcyB0aGUgcHJvcGVydHkgdG8gYmUgZm91bmQgYW5kIGEgZGVmYXVsdCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSB0aGUgb2JqZWN0IHRvIHNlYXJjaCBpblxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRQcm9wZXJ0eUZyb21PYmoob2JqKSB7XG4gICAgICAgIHZhciBkZWZPYmogPSBpc09iamVjdChvYmopID8gb2JqIDoge307XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wZXJ0eSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpc0RlZmluZWQoZGVmYXVsdFZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gaXNEZWZpbmVkKGRlZk9ialtwcm9wZXJ0eV0pXG4gICAgICAgICAgICAgICAgPyBkZWZPYmpbcHJvcGVydHldXG4gICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOaWNlIHV0aWwgbWV0aG9kIGZvciBhcHBseWluZyB0aGUgY29uc3RydWN0b3IgbWV0aG9kIGZvciBhIGNsYXNzIHRvIGFuIGFycmF5IG9mIG9iamVjdHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IG1vZGVsQXJyYXlcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbml0TW9kZWxGdW5jdGlvblxuICAgICAqIEByZXR1cm5zIHtBcnJheS48Kj59XG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9vcEFuZEluaXQobW9kZWxBcnJheSwgaW5pdE1vZGVsRnVuY3Rpb24pIHtcbiAgICAgICAgdmFyIG5ld0FycmF5ID0gQXJyYXkuaXNBcnJheShtb2RlbEFycmF5KVxuICAgICAgICAgICAgPyBtb2RlbEFycmF5LmZpbHRlcihpc09iamVjdCkubWFwKGluaXRNb2RlbEZ1bmN0aW9uKVxuICAgICAgICAgICAgOiBbXTtcblxuICAgICAgICByZXR1cm4gbmV3QXJyYXkuY29uY2F0KFtpbml0TW9kZWxGdW5jdGlvbigpXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0NnVXRpbFNlcnZpY2V9XG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2VydmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwiaXNEZWZpbmVkXCI6IGlzRGVmaW5lZCxcbiAgICAgICAgICAgIFwiaXNPYmplY3RcIjogaXNPYmplY3QsXG4gICAgICAgICAgICBcImlzU3RyaW5nXCI6IGlzU3RyaW5nLFxuXG4gICAgICAgICAgICBcImdldFByb3BlcnR5RnJvbU9ialwiOiBnZXRQcm9wZXJ0eUZyb21PYmosXG4gICAgICAgICAgICBcImxvb3BBbmRJbml0XCI6IGxvb3BBbmRJbml0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKFwiY2l2aWMtZ3JhcGgudXRpbFwiKVxuICAgICAgICAuZmFjdG9yeShcImNnVXRpbFNlcnZpY2VcIiwgU2VydmljZSk7XG5cbn0pKGFuZ3VsYXIpO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGJyaWFuYXZlY2NoaW9uZSBvbiA3LzEvMTYuXG4gKi9cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBhbmFseXRpY3NDdHJsKCRzY29wZSkge1xuXG4gICAgfVxuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ2FuYWx5dGljc0N0cmwnLCBbJyRzY29wZScsIGFuYWx5dGljc0N0cmxdKTtcbn0pKGFuZ3VsYXIpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBicmlhbmF2ZWNjaGlvbmUgb24gNi8yNy8xNi5cbiAqL1xuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGZ1bmN0aW9uIFNlcnZpY2UodXRpbHMpIHtcbiAgICAgICAgZnVuY3Rpb24gTG9jYXRpb24ob2JqKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBnZXRQcm9wZXJ0eSA9IHV0aWxzLmdldFByb3BlcnR5RnJvbU9iaihvYmopO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZEZvcm1hdHRlZEFkZHJlc3MoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlZk9iaiA9IHV0aWxzLmlzRGVmaW5lZChvYmopID8gb2JqIDoge307XG4gICAgICAgICAgICAgICAgdmFyIGFkZHJlc3NMaW5lID0gKHV0aWxzLmlzRGVmaW5lZChkZWZPYmouYWRkcmVzc19saW5lKSA/IGRlZk9iai5hZGRyZXNzX2xpbmUgKyAnICcgOiAnJyk7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsaXR5ID0gKHV0aWxzLmlzRGVmaW5lZChkZWZPYmoubG9jYWxpdHkpID8gZGVmT2JqLmxvY2FsaXR5ICsgJywgJyA6ICcnKTtcbiAgICAgICAgICAgICAgICB2YXIgY291bnRyeUNvZGUgPSAodXRpbHMuaXNEZWZpbmVkKGRlZk9iai5jb3VudHJ5X2NvZGUpID8gZGVmT2JqLmNvdW50cnlfY29kZSArICcgJyA6ICcnKTtcbiAgICAgICAgICAgICAgICB2YXIgcG9zdGFsQ29kZSA9ICh1dGlscy5pc0RlZmluZWQoZGVmT2JqLnBvc3RhbF9jb2RlKSA/IGRlZk9iai5wb3N0YWxfY29kZSA6ICcnKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoYWRkcmVzc0xpbmUgKyBsb2NhbGl0eSArIGNvdW50cnlDb2RlICsgcG9zdGFsQ29kZSkudHJpbSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLmlkID0gZ2V0UHJvcGVydHkoXCJpZFwiKTtcbiAgICAgICAgICAgIHNlbGYuYWRkcmVzc19saW5lID0gZ2V0UHJvcGVydHkoXCJhZGRyZXNzX2xpbmVcIik7XG4gICAgICAgICAgICBzZWxmLmxvY2FsaXR5ID0gZ2V0UHJvcGVydHkoXCJsb2NhbGl0eVwiKTtcbiAgICAgICAgICAgIHNlbGYuZGlzdHJpY3QgPSBnZXRQcm9wZXJ0eShcImRpc3RyaWN0XCIpO1xuICAgICAgICAgICAgc2VsZi5wb3N0YWxfY29kZSA9IGdldFByb3BlcnR5KFwicG9zdGFsX2NvZGVcIik7XG4gICAgICAgICAgICBzZWxmLmNvdW50cnkgPSBnZXRQcm9wZXJ0eShcImNvdW50cnlcIik7XG4gICAgICAgICAgICBzZWxmLmNvdW50cnlfY29kZSA9IGdldFByb3BlcnR5KFwiY291bnRyeV9jb2RlXCIpO1xuICAgICAgICAgICAgc2VsZi5jb29yZGluYXRlcyA9IGdldFByb3BlcnR5KFwiY29vcmRpbmF0ZXNcIik7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IENvbnZlcnQgdGhpcyB0byBhIG1ldGhvZCB0aGF0IGJ1aWxkcyBiYXNlZCBvZmYgb2YgdGhlIGN1cnJlbnQgb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgICAgICAgICAgIC8vIFVubGVzcyB0aGlzIGlzIG5lZWRlZCBmb3IgdGhlIEFQSSBzcGVjaWZpY2FsbHksIHRoZW4gaGF2ZSB0aGlzIGJ1aWx0IGluIGEgc2ltaWxhciBmdW5jdGlvbiBhcyB0aGUgb25lIGluXG4gICAgICAgICAgICAvLyBFbnRpdHlNb2RlbCBmb3IgYnVpbGRpbmcgQVBJIHNwZWNpZmljIG9iamVjdHNcbiAgICAgICAgICAgIHNlbGYuZm9ybWF0dGVkQWRkcmVzcyA9IGJ1aWxkRm9ybWF0dGVkQWRkcmVzcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TG9jYXRpb25Nb2RlbChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTG9jYXRpb24ob2JqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcImdldExvY2F0aW9uTW9kZWxcIjogZ2V0TG9jYXRpb25Nb2RlbFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIFNlcnZpY2UuJGluamVjdCA9IFtcImNnVXRpbFNlcnZpY2VcIl07XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2NpdmljLWdyYXBoLmFwaScpXG4gICAgICAgIC5mYWN0b3J5KCdsb2NhdGlvblNlcnZpY2UnLCBTZXJ2aWNlKTtcblxufSkoYW5ndWxhcik7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgYnJpYW5hdmVjY2hpb25lIG9uIDYvMjcvMTYuXG4gKi9cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBDZ0VudGl0eVNlcnZpY2VcbiAgICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRFbnRpdHlNb2RlbFxuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGdldEluZmx1ZW5jZVR5cGVzXG4gICAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0QWxsXG4gICAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gc2F2ZUVudGl0eVxuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGdldEVudGl0eVR5cGVzXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBFbnRpdHlUeXBlT2JqXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBHb3Zlcm5tZW50XG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBGb3ItUHJvZml0XG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBOb24tUHJvZml0XG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBJbmRpdmlkdWFsXG4gICAgICovXG5cbiAgICAvKiogQHR5cGUge0VudGl0eVR5cGVPYmp9ICovXG4gICAgdmFyIGVudGl0eVR5cGVPYmogPSB7XG4gICAgICAgIFwiR292ZXJubWVudFwiOiB0cnVlLFxuICAgICAgICBcIkZvci1Qcm9maXRcIjogdHJ1ZSxcbiAgICAgICAgXCJOb24tUHJvZml0XCI6IHRydWUsXG4gICAgICAgIFwiSW5kaXZpZHVhbFwiOiB0cnVlXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldEluZmx1ZW5jZVR5cGVzKCkge1xuICAgICAgICByZXR1cm4gW1wiTG9jYWxcIiwgXCJOYXRpb25hbFwiLCBcIkdsb2JhbFwiXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYXBpQ2FsbGVyXG4gICAgICogQHBhcmFtIGZ1bkNvbm5TZXJ2aWNlXG4gICAgICogQHBhcmFtIGNvbm5TZXJ2aWNlXG4gICAgICogQHBhcmFtIGZpbmFuY2VTZXJ2aWNlXG4gICAgICogQHBhcmFtIGxvY2F0aW9uU2VydmljZVxuICAgICAqIEBwYXJhbSBjYXRlZ29yeVNlcnZpY2VcbiAgICAgKiBAcGFyYW0gdXRpbHNcbiAgICAgKiBAcmV0dXJucyB7Q2dFbnRpdHlTZXJ2aWNlfVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNlcnZpY2UoYXBpQ2FsbGVyLCBmdW5Db25uU2VydmljZSwgY29ublNlcnZpY2UsIGZpbmFuY2VTZXJ2aWNlLCBsb2NhdGlvblNlcnZpY2UsIGNhdGVnb3J5U2VydmljZSwgdXRpbHMpIHtcblxuICAgICAgICBmdW5jdGlvbiBFbnRpdHkob2JqKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmT2JqID0gdXRpbHMuaXNEZWZpbmVkKG9iaikgPyBvYmogOiB7fTtcbiAgICAgICAgICAgIHZhciBnZXRQcm9wZXJ0eSA9IHV0aWxzLmdldFByb3BlcnR5RnJvbU9iaihvYmopO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZURCTW9kZWwoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRiTW9kZWwgPSBuZXcgRW50aXR5KHNlbGYpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwubG9jYXRpb25zLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwubG9jYXRpb25zLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuZ3JhbnRzX3JlY2VpdmVkLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuZ3JhbnRzX3JlY2VpdmVkLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuZ3JhbnRzX2dpdmVuLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuZ3JhbnRzX2dpdmVuLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuaW52ZXN0bWVudHNfcmVjZWl2ZWQucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5pbnZlc3RtZW50c19yZWNlaXZlZC5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmludmVzdG1lbnRzX21hZGUucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5pbnZlc3RtZW50c19tYWRlLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuZGF0YV9naXZlbi5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmRhdGFfZ2l2ZW4ucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5kYXRhX3JlY2VpdmVkLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuZGF0YV9yZWNlaXZlZC5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmNvbGxhYm9yYXRpb25zLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuY29sbGFib3JhdGlvbnMucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5rZXlfcGVvcGxlLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwua2V5X3Blb3BsZS5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmVtcGxveW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuZW1wbG95bWVudHMucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5yZXZlbnVlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLnJldmVudWVzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuZXhwZW5zZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5leHBlbnNlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmNhdGVnb3JpZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5jYXRlZ29yaWVzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuZGVzY3JpcHRpb24gPSAnJztcblxuICAgICAgICAgICAgICAgIHJldHVybiBkYk1vZGVsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLmlkID0gZ2V0UHJvcGVydHkoXCJpZFwiKTtcbiAgICAgICAgICAgIHNlbGYubmFtZSA9IGdldFByb3BlcnR5KFwibmFtZVwiKTtcbiAgICAgICAgICAgIHNlbGYuaW5mbHVlbmNlID0gZ2V0UHJvcGVydHkoXCJpbmZsdWVuY2VcIik7XG4gICAgICAgICAgICBzZWxmLnR5cGUgPSBnZXRQcm9wZXJ0eShcInR5cGVcIik7XG4gICAgICAgICAgICBzZWxmLm5pY2tuYW1lID0gZ2V0UHJvcGVydHkoXCJuaWNrbmFtZVwiKTtcbiAgICAgICAgICAgIHNlbGYudXJsID0gZ2V0UHJvcGVydHkoXCJ1cmxcIik7XG4gICAgICAgICAgICBzZWxmLnR3aXR0ZXJfaGFuZGxlID0gZ2V0UHJvcGVydHkoXCJ0d2l0dGVyX2hhbmRsZVwiKTtcbiAgICAgICAgICAgIHNlbGYuZW1wbG95ZWVzID0gZ2V0UHJvcGVydHkoXCJlbXBsb3llZXNcIik7XG5cbiAgICAgICAgICAgIHNlbGYubG9jYXRpb25zID0gdXRpbHMubG9vcEFuZEluaXQoZGVmT2JqLmxvY2F0aW9ucywgbG9jYXRpb25TZXJ2aWNlLmdldExvY2F0aW9uTW9kZWwpO1xuICAgICAgICAgICAgc2VsZi5ncmFudHNfcmVjZWl2ZWQgPSB1dGlscy5sb29wQW5kSW5pdChkZWZPYmouZ3JhbnRzX3JlY2VpdmVkLCBmdW5Db25uU2VydmljZS5nZXRGdW5kaW5nQ29ubmVjdGlvbk1vZGVsKTtcbiAgICAgICAgICAgIHNlbGYuaW52ZXN0bWVudHNfcmVjZWl2ZWQgPSB1dGlscy5sb29wQW5kSW5pdChkZWZPYmouaW52ZXN0bWVudHNfcmVjZWl2ZWQsIGZ1bkNvbm5TZXJ2aWNlLmdldEZ1bmRpbmdDb25uZWN0aW9uTW9kZWwpO1xuICAgICAgICAgICAgc2VsZi5ncmFudHNfZ2l2ZW4gPSB1dGlscy5sb29wQW5kSW5pdChkZWZPYmouZ3JhbnRzX2dpdmVuLCBmdW5Db25uU2VydmljZS5nZXRGdW5kaW5nQ29ubmVjdGlvbk1vZGVsKTtcbiAgICAgICAgICAgIHNlbGYuaW52ZXN0bWVudHNfbWFkZSA9IHV0aWxzLmxvb3BBbmRJbml0KGRlZk9iai5pbnZlc3RtZW50c19tYWRlLCBmdW5Db25uU2VydmljZS5nZXRGdW5kaW5nQ29ubmVjdGlvbk1vZGVsKTtcbiAgICAgICAgICAgIHNlbGYuZGF0YV9naXZlbiA9IHV0aWxzLmxvb3BBbmRJbml0KGRlZk9iai5kYXRhX2dpdmVuLCBjb25uU2VydmljZS5nZXRDb25uZWN0aW9uTW9kZWwpO1xuICAgICAgICAgICAgc2VsZi5kYXRhX3JlY2VpdmVkID0gdXRpbHMubG9vcEFuZEluaXQoZGVmT2JqLmRhdGFfcmVjZWl2ZWQsIGNvbm5TZXJ2aWNlLmdldENvbm5lY3Rpb25Nb2RlbCk7XG4gICAgICAgICAgICBzZWxmLmNvbGxhYm9yYXRpb25zID0gdXRpbHMubG9vcEFuZEluaXQoZGVmT2JqLmNvbGxhYm9yYXRpb25zLCBjb25uU2VydmljZS5nZXRDb25uZWN0aW9uTW9kZWwpO1xuICAgICAgICAgICAgc2VsZi5rZXlfcGVvcGxlID0gdXRpbHMubG9vcEFuZEluaXQoZGVmT2JqLmtleV9wZW9wbGUsIGNvbm5TZXJ2aWNlLmdldENvbm5lY3Rpb25Nb2RlbCk7XG4gICAgICAgICAgICBzZWxmLmVtcGxveW1lbnRzID0gdXRpbHMubG9vcEFuZEluaXQoZGVmT2JqLmVtcGxveW1lbnRzLCBjb25uU2VydmljZS5nZXRDb25uZWN0aW9uTW9kZWwpO1xuICAgICAgICAgICAgc2VsZi5yZXZlbnVlcyA9IHV0aWxzLmxvb3BBbmRJbml0KGRlZk9iai5yZXZlbnVlcywgZmluYW5jZVNlcnZpY2UuZ2V0RmluYW5jZU1vZGVsKTtcbiAgICAgICAgICAgIHNlbGYuZXhwZW5zZXMgPSB1dGlscy5sb29wQW5kSW5pdChkZWZPYmouZXhwZW5zZXMsIGZpbmFuY2VTZXJ2aWNlLmdldEZpbmFuY2VNb2RlbCk7XG4gICAgICAgICAgICBzZWxmLmNhdGVnb3JpZXMgPSB1dGlscy5sb29wQW5kSW5pdChkZWZPYmouY2F0ZWdvcmllcywgY2F0ZWdvcnlTZXJ2aWNlLmdldENhdGVnb3J5TW9kZWwpO1xuXG4gICAgICAgICAgICBzZWxmLmdlbmVyYXRlREJNb2RlbCA9IGdlbmVyYXRlREJNb2RlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEVudGl0eU1vZGVsKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFbnRpdHkob2JqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEFsbCgpIHtcbiAgICAgICAgICAgIHJldHVybiBhcGlDYWxsZXIuZ2V0KCcvZW50aXRpZXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNhdmVFbnRpdHkoZW50aXR5KSB7XG4gICAgICAgICAgICByZXR1cm4gYXBpQ2FsbGVyLnBvc3QoXCIvc2F2ZVwiLCB7IFwiZW50aXR5XCI6IGVudGl0eSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcImdldEVudGl0eU1vZGVsXCI6IGdldEVudGl0eU1vZGVsLFxuICAgICAgICAgICAgXCJnZXRJbmZsdWVuY2VUeXBlc1wiOiBnZXRJbmZsdWVuY2VUeXBlcyxcbiAgICAgICAgICAgIFwiZ2V0QWxsXCI6IGdldEFsbCxcbiAgICAgICAgICAgIFwic2F2ZUVudGl0eVwiOiBzYXZlRW50aXR5LFxuICAgICAgICAgICAgLyoqIEByZXR1cm5zIHtFbnRpdHlUeXBlT2JqfSAqL1xuICAgICAgICAgICAgXCJnZXRFbnRpdHlUeXBlc1wiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudGl0eVR5cGVPYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgU2VydmljZS4kaW5qZWN0ID0gW1xuICAgICAgICBcImNnQXBpQ2FsbGVyXCIsXG4gICAgICAgIFwiZnVuZGluZ0Nvbm5lY3Rpb25TZXJ2aWNlXCIsXG4gICAgICAgIFwiY29ubmVjdGlvblNlcnZpY2VcIixcbiAgICAgICAgXCJmaW5hbmNlU2VydmljZVwiLFxuICAgICAgICBcImxvY2F0aW9uU2VydmljZVwiLFxuICAgICAgICBcImNhdGVnb3J5U2VydmljZVwiLFxuICAgICAgICBcImNnVXRpbFNlcnZpY2VcIlxuICAgIF07XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJjaXZpYy1ncmFwaC5hcGlcIilcbiAgICAgICAgLmZhY3RvcnkoXCJlbnRpdHlTZXJ2aWNlXCIsIFNlcnZpY2UpO1xuXG59KShhbmd1bGFyKTtcbiIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBmdW5jdGlvbiBDb25maWcoJGh0dHBQcm92aWRlcikge1xuICAgICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcbiAgICB9XG5cbiAgICBDb25maWcuJGluamVjdCA9IFtcIiRodHRwUHJvdmlkZXJcIl07XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImNpdmljLWdyYXBoLmFwaVwiKS5jb25maWcoQ29uZmlnKTtcblxufSkoYW5ndWxhcik7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIGFwaVVybCA9IFwiaHR0cHM6Ly9hcGkuY2l2aWNncmFwaC5pby9hcGlcIjtcbiAgICAvL3ZhciBhcGlVcmwgPSBcIi9hcGlcIjtcblxuICAgIHZhciBkZWZhdWx0SGVhZGVyID0ge1xuICAgICAgICAvLyBcIkV2ZW50LU5hbWVcIjogXCJUZXN0LUV2ZW50XCJcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gU2VydmljZSgkaHR0cCwgJHEpIHtcbiAgICAgICAgZnVuY3Rpb24gbG9nQXBpRXJyb3IoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiUmVjaWV2ZWQgYW4gZXJyb3IgZnJvbSBBUEkgd2l0aCB0aGlzIG1lc3NhZ2U6ICVPXCIsIGVyci5kYXRhKTtcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVud3JhcEFuZ3VsYXJIdHRwKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldCh1cmwsIHBhcmFtcykge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLmdldChhcGlVcmwgKyB1cmwsIHsgXCJwYXJhbXNcIjogcGFyYW1zLCBcImhlYWRlcnNcIjogZGVmYXVsdEhlYWRlciB9KVxuICAgICAgICAgICAgICAgIC50aGVuKHVud3JhcEFuZ3VsYXJIdHRwLCBsb2dBcGlFcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwb3N0KHVybCwgZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLnBvc3QoYXBpVXJsICsgdXJsLCBkYXRhLCB7IFwiaGVhZGVyc1wiOiBkZWZhdWx0SGVhZGVyIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4odW53cmFwQW5ndWxhckh0dHAsIGxvZ0FwaUVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcImdldFwiOiBnZXQsXG4gICAgICAgICAgICBcInBvc3RcIjogcG9zdFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIFNlcnZpY2UuJGluamVjdCA9IFtcIiRodHRwXCIsIFwiJHFcIl07XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImNpdmljLWdyYXBoLmFwaVwiKS5mYWN0b3J5KFwiY2dBcGlDYWxsZXJcIiwgU2VydmljZSk7XG5cbn0pKGFuZ3VsYXIpO1xuIiwiKGZ1bmN0aW9uIChhbmd1bGFyLCBkMywgTCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgZnVuY3Rpb24gQ29udHJvbGxlcigkc2NvcGUsIF8sIGxlYWZsZXREYXRhLCBjZ1NlcnZpY2UpIHtcblxuICAgICAgICBhY3RpdmF0ZSgpO1xuXG4gICAgICAgICRzY29wZS4kb24oXCJjZy5kYXRhLWxvYWRlZFwiLCBhY3RpdmF0ZSk7XG5cbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAkc2NvcGUub3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBjZW50ZXIgIDoge1xuICAgICAgICAgICAgICAgICAgICBsYXQgOiAyMC4wMCxcbiAgICAgICAgICAgICAgICAgICAgbG5nIDogLTQwLjAwLFxuICAgICAgICAgICAgICAgICAgICB6b29tOiAzXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgICAgICAgICB0aWxlTGF5ZXIgICAgICAgICA6ICdodHRwczovL2FwaS50aWxlcy5tYXBib3guY29tL3Y0L21hcGJveC5saWdodC97en0ve3h9L3t5fS5wbmc/YWNjZXNzX3Rva2VuPXBrLmV5SjFJam9pWkdGMmFXUnNjbTUwSWl3aVlTSTZJakEwTTJSa056TXpaV0ptTnpFek5HWXpNVGRoWVRFeFl6QXlabVU0WlRFMUluMC5UTllsRnRhMlZJdHJrbjRMMFo5QkpRJyxcbiAgICAgICAgICAgICAgICAgICAgdGlsZUxheWVyT3B0aW9ucyAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3RSZXRpbmE6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXVzZVRpbGVzICA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHpvb21Db250cm9sICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uQ29udHJvbDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGhhbmRsZUxlYWZsZXREYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVBpZUNoYXJ0KG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBkYXRhICAgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgICAgICB2YXIgcGllICAgID0gZDMubGF5b3V0XG4gICAgICAgICAgICAgICAgLnBpZSgpXG4gICAgICAgICAgICAgICAgLnNvcnQobnVsbClcbiAgICAgICAgICAgICAgICAudmFsdWUoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQudmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBhcmMgICAgPSBkMy5zdmcuYXJjKCkub3V0ZXJSYWRpdXMob3B0aW9ucy5yKS5pbm5lclJhZGl1cyhvcHRpb25zLnIgLSAxMCk7XG4gICAgICAgICAgICB2YXIgY2VudGVyID0gb3B0aW9ucy5yICsgb3B0aW9ucy5zdHJva2VXaWR0aDtcbiAgICAgICAgICAgIHZhciB3ICAgICAgPSBjZW50ZXIgKiAyO1xuICAgICAgICAgICAgdmFyIGggICAgICA9IHc7XG4gICAgICAgICAgICB2YXIgc3ZnICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGQzLm5zLnByZWZpeC5zdmcsICdzdmcnKTtcbiAgICAgICAgICAgIHZhciB2aXMgICAgPSBkMy5zZWxlY3Qoc3ZnKVxuICAgICAgICAgICAgICAgIC5kYXRhKGRhdGEpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3BpZWNoYXJ0JylcbiAgICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCB3KVxuICAgICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBoKTtcblxuICAgICAgICAgICAgdmFyIGFyY3MgPSB2aXMuc2VsZWN0QWxsKCcuYXJjJylcbiAgICAgICAgICAgICAgICAuZGF0YShwaWUoZGF0YSkpXG4gICAgICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKCdnJylcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnYXJjJylcbiAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgY2VudGVyICsgJywnICsgY2VudGVyICsgJyknKTtcblxuICAgICAgICAgICAgYXJjcy5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdkJywgYXJjKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmRhdGEudHlwZSArICctYXJjJztcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYXJjcy5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuICAgICAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIC00ICogb3B0aW9ucy5jb3VudC50b1N0cmluZygpLmxlbmd0aClcbiAgICAgICAgICAgICAgICAuYXR0cihcImR5XCIsIDUpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImFyY1RleHRcIik7XG5cbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuWE1MU2VyaWFsaXplclxuICAgICAgICAgICAgICAgID8gKG5ldyB3aW5kb3cuWE1MU2VyaWFsaXplcigpKS5zZXJpYWxpemVUb1N0cmluZyhzdmcpXG4gICAgICAgICAgICAgICAgOiAoISEoc3ZnLnhtbClcbiAgICAgICAgICAgICAgICAgICAgPyBzdmcueG1sXG4gICAgICAgICAgICAgICAgICAgIDogJydcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlTGVhZmxldERhdGEobWFwKSB7XG4gICAgICAgICAgICB2YXIgZmlsdGVyZWRFbnRpdGllcyA9IGNnU2VydmljZS5nZXRFbnRpdHlMaXN0KCk7XG5cbiAgICAgICAgICAgIG1hcC5pbnZhbGlkYXRlU2l6ZSgpO1xuXG4gICAgICAgICAgICBuZXcgTC5Db250cm9sXG4gICAgICAgICAgICAgICAgLlpvb20oe3Bvc2l0aW9uOiAndG9wcmlnaHQnfSlcbiAgICAgICAgICAgICAgICAuYWRkVG8obWFwKTtcblxuICAgICAgICAgICAgbmV3IEwuQ29udHJvbFxuICAgICAgICAgICAgICAgIC5Mb2NhdGUoe3Bvc2l0aW9uOiAndG9wcmlnaHQnLCBzaG93UG9wdXA6IGZhbHNlLCBpY29uOiAnZmEgZmEtbG9jYXRpb24tYXJyb3cnfSlcbiAgICAgICAgICAgICAgICAuYWRkVG8obWFwKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY2x1c3Rlckljb24oY2x1c3Rlcikge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiAgICAgICA9IGNsdXN0ZXIuZ2V0QWxsQ2hpbGRNYXJrZXJzKCk7XG4gICAgICAgICAgICAgICAgdmFyIHRvdGFsICAgICAgICAgID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBjbHVzdGVyTWFya2VycyA9IF8ucGx1Y2soY2hpbGRyZW4sICdvcHRpb25zJyk7XG4gICAgICAgICAgICAgICAgdmFyIGNvdW50cyAgICAgICAgID0gXy5tYXAoXG4gICAgICAgICAgICAgICAgICAgIF8uY291bnRCeShjbHVzdGVyTWFya2VycywgJ3R5cGUnKSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGNvdW50LCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyd0eXBlJzogdHlwZSwgJ3ZhbHVlJzogY291bnR9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHZhciByICAgICAgICAgICAgICA9IDI4O1xuICAgICAgICAgICAgICAgIHZhciBzdHJva2VXaWR0aCAgICA9IDE7XG4gICAgICAgICAgICAgICAgdmFyIGljb25EaW0gICAgICAgID0gKHIgKyBzdHJva2VXaWR0aCkgKiAyO1xuICAgICAgICAgICAgICAgIHZhciBodG1sICAgICAgICAgICA9IGNyZWF0ZVBpZUNoYXJ0KFxuICAgICAgICAgICAgICAgICAgICB7ZGF0YTogY291bnRzLCByOiByLCBzdHJva2VXaWR0aDogc3Ryb2tlV2lkdGgsIGNvdW50OiB0b3RhbH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMLkRpdkljb24oe1xuICAgICAgICAgICAgICAgICAgICBodG1sICAgICA6IGh0bWwsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ21hcmtlci1jbHVzdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgaWNvblNpemUgOiBuZXcgTC5wb2ludChpY29uRGltLCBpY29uRGltKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hcmtlckljb24gID0ge1xuICAgICAgICAgICAgICAgICdOb24tUHJvZml0JzogTC5pY29uKHtcbiAgICAgICAgICAgICAgICAgICAgaWNvblVybCA6ICdpbWcvbWFya2VyLW5vbnByb2Yuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFs2MCwgNjBdXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgJ0Zvci1Qcm9maXQnOiBMLmljb24oe1xuICAgICAgICAgICAgICAgICAgICBpY29uVXJsIDogJ2ltZy9tYXJrZXItcHJvZi5zdmcnLFxuICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzYwLCA2MF1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAnSW5kaXZpZHVhbCc6IEwuaWNvbih7XG4gICAgICAgICAgICAgICAgICAgIGljb25VcmwgOiAnaW1nL21hcmtlci1pbmQuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFs2MCwgNjBdXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgJ0dvdmVybm1lbnQnOiBMLmljb24oe1xuICAgICAgICAgICAgICAgICAgICBpY29uVXJsIDogJ2ltZy9tYXJrZXItZ292LnN2ZycsXG4gICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbNjAsIDYwXVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgbWFya2VycyA9IEwubWFya2VyQ2x1c3Rlckdyb3VwKHtcbiAgICAgICAgICAgICAgICBzcGlkZXJmeU9uTWF4Wm9vbTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93Q292ZXJhZ2VPbkhvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpY29uQ3JlYXRlRnVuY3Rpb246IGNsdXN0ZXJJY29uLFxuICAgICAgICAgICAgICAgIG1heENsdXN0ZXJSYWRpdXM6IDMwLFxuICAgICAgICAgICAgICAgIHNwaWRlcmZ5RGlzdGFuY2VNdWx0aXBsaWVyOiAxLjNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBvdXRlckxvb3AoZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5uZXJMb29wKGxvYykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV8uZXZlcnkobG9jLmNvb3JkaW5hdGVzKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jLmNvb3JkaW5hdGVzWzBdLnRvRml4ZWQoNSkgPT09ICc0MC43ODIwMCcgJiYgbG9jLmNvb3JkaW5hdGVzWzFdLnRvRml4ZWQoNSkgPT09ICctNzMuODMxNzAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2MuY29vcmRpbmF0ZXNbMF0gPSA0MC43NzA2NTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYy5jb29yZGluYXRlc1sxXSA9IC03My45NzQwNjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IEwubWFya2VyKGxvYy5jb29yZGluYXRlcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbWFya2VySWNvbltlbnRpdHkudHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiBlbnRpdHkubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdlbnRpdHlfaWQnOiBlbnRpdHkuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6IGVudGl0eS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiBlbnRpdHkudHlwZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbWFya2Vycy5hZGRMYXllcihtKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfLmZvckVhY2goZW50aXR5LmxvY2F0aW9ucywgaW5uZXJMb29wKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5mb3JFYWNoKGZpbHRlcmVkRW50aXRpZXMsIG91dGVyTG9vcCk7XG4gICAgICAgICAgICBtYXAuYWRkTGF5ZXIobWFya2Vycyk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uTG9jYXRpb25FcnJvcihsZWFmbGV0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGxlYWZsZXRFcnJvci5tZXNzYWdlICsgXCIgICVPXCIsIGxlYWZsZXRFcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1hcC5vbignbG9jYXRpb25lcnJvcicsIG9uTG9jYXRpb25FcnJvcik7XG5cbiAgICAgICAgICAgIC8vIG1hcmtlcnMub24oJ2NsaWNrJywgZnVuY3Rpb24gKG1hcmtlcikge1xuICAgICAgICAgICAgLy8gICAgICRzY29wZS5zZXRFbnRpdHlJRChtYXJrZXIubGF5ZXIub3B0aW9ucy5lbnRpdHlfaWQpO1xuICAgICAgICAgICAgLy8gICAgICRzY29wZS5jbGlja2VkRW50aXR5LmVudGl0eSA9ICRzY29wZS5jdXJyZW50RW50aXR5O1xuICAgICAgICAgICAgLy8gICAgICRzY29wZS5hY3Rpb25zLmludGVyYWN0ZWQgICA9IHRydWU7XG4gICAgICAgICAgICAvLyAgICAgaWYgKCRzY29wZS5zZXR0aW5nc0VuYWJsZWQgJiYgJHNjb3BlLm1vYmlsZSkge1xuICAgICAgICAgICAgLy8gICAgICAgICAkc2NvcGUudG9nZ2xlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyAgICAgJHNjb3BlLnNhZmVBcHBseSgpO1xuICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gbWFwLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vICAgICAkc2NvcGUuY2xpY2tlZEVudGl0eS5lbnRpdHkgPSBudWxsO1xuICAgICAgICAgICAgLy8gICAgICRzY29wZS5hY3Rpb25zLmludGVyYWN0ZWQgICA9IHRydWU7XG4gICAgICAgICAgICAvLyAgICAgJHNjb3BlLnNhZmVBcHBseSgpO1xuICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICAvLyAkc2NvcGUuJG9uKCdzZWxlY3RJdGVtJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gICAgIHZhciBjb29yZGluYXRlcyA9ICRzY29wZS5jdXJyZW50RW50aXR5LmxvY2F0aW9ucy5sZW5ndGggPiAwID8gXy5wbHVjayhcbiAgICAgICAgICAgIC8vICAgICAgICAgJHNjb3BlLmN1cnJlbnRFbnRpdHkubG9jYXRpb25zLCAnY29vcmRpbmF0ZXMnKSA6IG51bGw7XG4gICAgICAgICAgICAvLyAgICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgbWFwLnNldFZpZXcoY29vcmRpbmF0ZXNbMF0sIDExKTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyAgICAgJHNjb3BlLmFjdGlvbnMuaW50ZXJhY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAvLyAgICAgJHNjb3BlLnNhZmVBcHBseSgpO1xuICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICAgICAgIFwiJHNjb3BlXCIsXG4gICAgICAgIFwiX1wiLFxuICAgICAgICBcImxlYWZsZXREYXRhXCIsXG4gICAgICAgIFwiY2dNYWluU2VydmljZVwiXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIERpcmVjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwicmVzdHJpY3RcIjogXCJFXCIsXG4gICAgICAgICAgICBcInRlbXBsYXRlVXJsXCI6IFwianMvY29tcG9uZW50L21hcC9tYXAudGVtcGxhdGUuaHRtbFwiLFxuICAgICAgICAgICAgXCJjb250cm9sbGVyXCI6IENvbnRyb2xsZXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJjaXZpYy1ncmFwaFwiKVxuICAgICAgICAuZGlyZWN0aXZlKFwiY2dNYXBcIiwgRGlyZWN0aXZlKTtcbn0pKGFuZ3VsYXIsIGQzLCBMKTtcbiIsIihmdW5jdGlvbiAoYW5ndWxhciwgZDMpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBpc0RlZmluZWQ7XG5cbiAgICBmdW5jdGlvbiBidWlsZFN2Z0VsZW1lbnQgKHJvb3QpIHtcbiAgICAgICAgLy8gRGVsZXRlIHRoZSBvbGQgZ3JhcGhcbiAgICAgICAgaWYgKCBpc0RlZmluZWQocm9vdC5zZWxlY3QoJ3N2ZycpKSApIHtcbiAgICAgICAgICAgIHJvb3Quc2VsZWN0KCdzdmcnKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByb290XG4gICAgICAgICAgICAuYXBwZW5kKCdzdmcnKVxuICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsICcxMDB2aCcpXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCAnMTAwJScpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgc3RyYW5nZSBvbmUgdGhhdCBJIGhhdmUgY2xlYW5lZCB1cCBhIGJpdCBmcm9tIHRoZSBvbGQgZ3JhcGguICBJbiB0aGVcbiAgICAvLyBvbGQgZ3JhcGgsIHRoZXJlIHdhcyBhbiBvYmplY3QgY2FsbGVkIHNjYWxlIHRoYXQgaGFkIGEgZDMgc3FydCBmdW5jdGlvbiBidWlsdFxuICAgIC8vIGZvciBlbXBsb3llZXMgYW5kIGZvbGxvd2Vycy4gIEluc3RlYWQgb2YgdXNpbmcgdGhlaXJzLCBJIGJ1aWx0IHRoaXMgZnVuY3Rpb25cbiAgICAvLyB0aGF0IGJ1aWxkcyB0aGUgc2NhbGUgZnVuY3Rpb24gYmFzZWQgb24gdGhlIGRhdGEgYW5kIHBhcmFtZXRlciB0byBzY2FsZSBieS5cbiAgICBmdW5jdGlvbiBidWlsZFNjYWxlRnVuY3Rpb24gKHNpemVCeSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGVMaXN0KSB7XG4gICAgICAgICAgICB2YXIgbG93ZXJCb3VuZFJhZGl1cyA9IDEwO1xuICAgICAgICAgICAgdmFyIHVwcGVyQm91bmRSYWRpdXMgPSA1MDtcbiAgICAgICAgICAgIHZhciBtYXhOb2RlUGFyYW0gPSBkMy5tYXgobm9kZUxpc3QsIGdldEdyYXBoT2JqUGFyYW0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRHcmFwaE9ialBhcmFtIChkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSBkLnZhbHVlWyBzaXplQnkgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGaW5pdGUodikgJiYgaXNEZWZpbmVkKHYpID8gdiA6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQzLnNjYWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgLnNxcnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oWyAwLCBtYXhOb2RlUGFyYW0gXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAucmFuZ2UoWyBsb3dlckJvdW5kUmFkaXVzLCB1cHBlckJvdW5kUmFkaXVzIF0pKG9iai52YWx1ZVsgc2l6ZUJ5IF0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBVc2VkIHRvIGRlc2NyaWJlIHRoZSBmb3VyIGNvcm5lcnMgb2YgdGhlIGdyYXBoLiAgQnkgZGVmYXVsdCwgZm9yY2UgbGF5b3V0XG4gICAgLy8ga2VlcHMgdGhlIG5vZGVzIGZvY3VzZWQgb24gdGhlIGNlbnRlciBvZiB0aGUgZ3JhcGgsIGJ1dCBpbiBvdXIgY2FzZSwgd2Ugd2FudFxuICAgIC8vIHRoZSBub2RlcyBzZXBhcmF0ZWQgdG8gZWFjaCBjb3JuZXIuXG4gICAgZnVuY3Rpb24gYnVpbGRGb2NpIChib3VuZHMpIHtcbiAgICAgICAgZnVuY3Rpb24gdHdlbnR5Rml2ZVBlcmNlbnQgKHYpIHtcbiAgICAgICAgICAgIHJldHVybiB2IC8gNDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldmVudHlGaXZlUGVyY2VudCAodikge1xuICAgICAgICAgICAgcmV0dXJuIHYgLSB0d2VudHlGaXZlUGVyY2VudCh2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnSW5kaXZpZHVhbCc6IHtcbiAgICAgICAgICAgICAgICAneCc6IHR3ZW50eUZpdmVQZXJjZW50KGJvdW5kcy53aWR0aCksXG4gICAgICAgICAgICAgICAgJ3knOiB0d2VudHlGaXZlUGVyY2VudChib3VuZHMuaGVpZ2h0KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdGb3ItUHJvZml0Jzoge1xuICAgICAgICAgICAgICAgICd4JzogdHdlbnR5Rml2ZVBlcmNlbnQoYm91bmRzLndpZHRoKSxcbiAgICAgICAgICAgICAgICAneSc6IHNldmVudHlGaXZlUGVyY2VudChib3VuZHMuaGVpZ2h0KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdOb24tUHJvZml0Jzoge1xuICAgICAgICAgICAgICAgICd4Jzogc2V2ZW50eUZpdmVQZXJjZW50KGJvdW5kcy53aWR0aCksXG4gICAgICAgICAgICAgICAgJ3knOiB0d2VudHlGaXZlUGVyY2VudChib3VuZHMuaGVpZ2h0KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdHb3Zlcm5tZW50Jzoge1xuICAgICAgICAgICAgICAgICd4Jzogc2V2ZW50eUZpdmVQZXJjZW50KGJvdW5kcy53aWR0aCksXG4gICAgICAgICAgICAgICAgJ3knOiBzZXZlbnR5Rml2ZVBlcmNlbnQoYm91bmRzLmhlaWdodClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWlsZENoYXJnZUZ1bmN0aW9uIChzaXplQnkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlTGlzdCkge1xuICAgICAgICAgICAgdmFyIHNpemVCeVNjYWxlID0gYnVpbGRTY2FsZUZ1bmN0aW9uKHNpemVCeSkobm9kZUxpc3QpO1xuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNEZWZpbmVkKGQudmFsdWVbIHNpemVCeSBdKVxuICAgICAgICAgICAgICAgICAgICA/IC0yICogc2l6ZUJ5U2NhbGUoZClcbiAgICAgICAgICAgICAgICAgICAgOiAtMjA7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgY2xlYW5lciBpbiBFUzYgb3IgaWYgSSBoYWQgY3JlYXRlZCBhY3R1YWwgZ2V0dGVyL3NldHRlcnMgaW5zdGVhZCBvZiBtZXJnaW5nXG4gICAgLy8gdGhlbSBpbnRvIGEgc2luZ2xlIG1ldGhvZFxuICAgIGZ1bmN0aW9uIHdyYXBGbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZuKCk7IH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gRGlyZWN0aXZlICgkd2luZG93LCBfLCB1dGlscywgY2dTZXJ2aWNlLCBuZXR3b3JrU2VydmljZSkge1xuICAgICAgICBpc0RlZmluZWQgPSB1dGlscy5pc0RlZmluZWQ7XG5cbiAgICAgICAgZnVuY3Rpb24gTGlua0ZuIChzY29wZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSBkMy5zZWxlY3QoZWxlbWVudFsgMCBdKTtcbiAgICAgICAgICAgIHZhciBfYnVpbGRTY2FsZUZ1bmN0aW9uO1xuICAgICAgICAgICAgdmFyIF9idWlsZENoYXJnZUZ1bmN0aW9uO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRFbnRpdHlMaXN0ZW5lcjtcblxuICAgICAgICAgICAgJHdpbmRvdy5vbnJlc2l6ZSA9IF8uZGVib3VuY2Uob25XaW5kb3dSZXNpemUpO1xuXG4gICAgICAgICAgICBzY29wZS4kd2F0Y2god3JhcEZuKG5ldHdvcmtTZXJ2aWNlLnNpemVCeSksIHdhdGNoU2l6ZUJ5KTtcblxuICAgICAgICAgICAgc2NvcGUuJHdhdGNoR3JvdXAoWyB3cmFwRm4obmV0d29ya1NlcnZpY2UubWluQ29ubmVjdGlvbiksIHdyYXBGbihuZXR3b3JrU2VydmljZS5zaXplQnkpIF0sIHJ1bik7XG5cbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oXy5kZWJvdW5jZShnZXRXaW5kb3dCb3gpLCBydW4pO1xuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGtpbmQgb2YgYW4gZXhwZW5zaXZlIG9wZXJhdGlvbi4gIFByb2JhYmx5IHNvbWV0aGluZyB0byBsb29rIGludG8gb3B0aW1pemluZyBsYXRlci5cbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaChuZXR3b3JrU2VydmljZS5nZXRHcmFwaERhdGEsIHJ1biwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFdpbmRvd0JveCAoKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJucyB0aGUgaW5uZXIgd2lkdGggb2YgdGhlIGJyb3dzZXIgd2luZG93LCBmb3IgcmVmcmVzaGluZyBkMyBncmFwaFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFdpbmRvd1dpZHRoICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KVsgMCBdLmlubmVyV2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0V2luZG93SGVpZ2h0ICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KVsgMCBdLmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBbIGdldFdpbmRvd0hlaWdodCgpLCBnZXRXaW5kb3dXaWR0aCgpIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdoZW5ldmVyIHRoZSB3aW5kb3cgaXMgcmVzaXplZCwgdGhlbiB3ZSBuZWVkIHRvIHJlLXJ1biBhbmd1bGFyJ3MgY29tcGlsZSBjaGFpbi5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uV2luZG93UmVzaXplICgpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcnVuIChuLCBvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBuID09PSBvICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCBjdXJyZW50RW50aXR5TGlzdGVuZXIgKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRFbnRpdHlMaXN0ZW5lcigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlbmRlcihuZXR3b3JrU2VydmljZS5nZXRHcmFwaERhdGEoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHBhcmFtIHsgeyBub2RlTGlzdCwgbGlua0xpc3QgfSB9IGdyYXBoRGF0YVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiByZW5kZXIgKGdyYXBoRGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBzdmcgPSBidWlsZFN2Z0VsZW1lbnQocm9vdCk7XG4gICAgICAgICAgICAgICAgc3ZnLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGJhY2tncm91bmRDbGljayk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIGdyYXBoRGF0YS5ub2RlTGlzdC5sZW5ndGggPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ05vZGUgbGlzdCBpcyBlbXB0eSwgbm90IGRyYXdpbmcgYSBncmFwaCcpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IHN2Zy5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2l6ZUJ5U2NhbGUgPSBfYnVpbGRTY2FsZUZ1bmN0aW9uKGdyYXBoRGF0YS5ub2RlTGlzdCk7XG4gICAgICAgICAgICAgICAgdmFyIGNhbGN1bGF0ZUNoYXJnZSA9IF9idWlsZENoYXJnZUZ1bmN0aW9uKGdyYXBoRGF0YS5ub2RlTGlzdCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZm9jaSA9IGJ1aWxkRm9jaShib3VuZHMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGZvcmNlTGF5b3V0ID0gYnVpbGRGb3JjZUxheW91dChncmFwaERhdGEsIGJvdW5kcyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRyYXdOb2RlKGdyYXBoRGF0YS5ub2RlTGlzdCk7XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBCdWlsZCBDb25uZWN0aW9uIExpc3RcbiAgICAgICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IGRyYXdDb25uZWN0aW9uKGdyYXBoRGF0YS5saW5rTGlzdCk7XG5cbiAgICAgICAgICAgICAgICBmb3JjZUxheW91dC5vbigndGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0aWNrICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrID0gMC4xICogZXZlbnQuYWxwaGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneDEnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zb3VyY2UueDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNvdXJjZS55O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQudGFyZ2V0Lng7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneTInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQueTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcGhEYXRhLm5vZGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnkgKz0gKGZvY2lbIGQudmFsdWUudHlwZSBdLnkgLSBkLnkpICogaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnggKz0gKGZvY2lbIGQudmFsdWUudHlwZSBdLnggLSBkLngpICogaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGQueCArICcsJyArIGQueSArICcpJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KHRpY2spO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY3VycmVudEVudGl0eUxpc3RlbmVyID0gc2NvcGUuJG9uKFxuICAgICAgICAgICAgICAgICAgICAnY2cuY3VycmVudC1lbnRpdHkudXBkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGV2ZW50LCBhcmdzKSB7IGZvY3VzQ3VycmVudEVudGl0eShhcmdzKTsgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAvLyBGb2N1cyB0aGUgY3VycmVudCBlbnRpdHksIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvY3VzQ3VycmVudEVudGl0eSAoY3VycmVudEVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBncmFwaERhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIC5ub2RlTGlzdFxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmoudmFsdWU7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChlbnRpdHkpIHsgcmV0dXJuIF8uaXNFcXVhbChjdXJyZW50RW50aXR5LCBlbnRpdHkpOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZvckVhY2goZm9jdXNOZWlnaGJvcnMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkRm9yY2VMYXlvdXQgKGRhdGEsIGJvdW5kcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDMubGF5b3V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JjZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zaXplKFsgYm91bmRzLndpZHRoLCBib3VuZHMuaGVpZ2h0IF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5ub2RlcyhkYXRhLm5vZGVMaXN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubGlua3MoZGF0YS5saW5rTGlzdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmxpbmtTdHJlbmd0aCgwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubGlua0Rpc3RhbmNlKDUwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ3Jhdml0eSgwLjAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2hhcmdlKGNhbGN1bGF0ZUNoYXJnZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZHJhd05vZGUgKG5vZGVMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0U2l6ZSA9IDEwO1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldENpcmNsZVJhZGl1cyAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzRGVmaW5lZChuKSA/IHNpemVCeVNjYWxlKG4pIDogZGVmYXVsdFNpemU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjbGlja0V2ZW50IChvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNsaWNrICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHV0aWxzLmlzRGVmaW5lZChkMy5ldmVudCkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzKG9iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShjbGljayk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHN2Z1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgnLm5vZGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEobm9kZUxpc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ25vZGUgJyArIGQudmFsdWUudHlwZSArICctbm9kZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdjbGljaycsIGNsaWNrRXZlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2FsbChmb3JjZUxheW91dC5kcmFnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmRzIGNpcmNsZXMgdG8gZWFjaCBub2RlXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3InLCBnZXRDaXJjbGVSYWRpdXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzRGVmaW5lZChkLnZhbHVlLm5pY2tuYW1lKSA/IGQudmFsdWUubmlja25hbWUgOiBkLnZhbHVlLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2R4JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoLTAuMDY1ICogdGhpcy5nZXRDb21wdXRlZFRleHRMZW5ndGgoKSAvIDIpICsgJ2VtJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLjA4ICogdGhpcy5wYXJlbnROb2RlLmdldEJCb3goKS5oZWlnaHQgLyAyICsgMC41KSArICdlbSc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb2N1c05laWdoYm9ycyAoZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVBZ2FpbnN0Q29ubmVjdGlvbk9iaiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc291cmNlID09PSBjLmluZGV4IHx8IGQudGFyZ2V0ID09PSBjLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG5laWdoYm9yaW5nIChhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5pbmRleCA9PT0gYi5pbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB1dGlscy5pc0RlZmluZWQoZ3JhcGhEYXRhLmxpbmtMaXN0LmZpbmQoY29tcGFyZUFnYWluc3RDb25uZWN0aW9uT2JqKGEpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHkgJ3VuZm9jdXNlZCcgY2xhc3MgdG8gYWxsIG5vbi1uZWlnaGJvcnMuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5ICdmb2N1c2VkJyBjbGFzcyB0byBhbGwgbmVpZ2hib3JzLlxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBTZWUgaWYgaXQgY2FuIGJlIGRvbmUgd2l0aCBqdXN0IG9uZSBjbGFzcyBhbmQgOm5vdCguZm9jdXNlZCkgQ1NTIHNlbGVjdG9ycy5cbiAgICAgICAgICAgICAgICAgICAgbm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2ZvY3VzZWQnLCBuZWlnaGJvcmluZyhlbnRpdHkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ3VuZm9jdXNlZCcsIF8ubmVnYXRlKG5laWdoYm9yaW5nKGVudGl0eSkpKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnZm9jdXNlZCcsIGNvbXBhcmVBZ2FpbnN0Q29ubmVjdGlvbk9iaihlbnRpdHkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ3VuZm9jdXNlZCcsIF8ubmVnYXRlKGNvbXBhcmVBZ2FpbnN0Q29ubmVjdGlvbk9iaikpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvY3VzIChlbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB1dGlscy5pc0RlZmluZWQoY2dTZXJ2aWNlLmdldEN1cnJlbnRFbnRpdHkoKSkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGV5IGFyZSB0aGUgc2FtZSwgdGhlbiB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIF8uaXNFcXVhbChjZ1NlcnZpY2UuZ2V0Q3VycmVudEVudGl0eSgpLCBlbnRpdHkudmFsdWUpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG5vdCwgdGhlbiBjYWxsIHVuRm9jdXMgdG8gc2V0dXAgZm9yIG5ldyBmb2N1c2VkIGVudGl0eVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5Gb2N1cyhlbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2dTZXJ2aWNlLnNldEN1cnJlbnRFbnRpdHkoZW50aXR5LnZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICBmb2N1c05laWdoYm9ycyhlbnRpdHkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJhY2tncm91bmRDbGljayAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggIXV0aWxzLmlzRGVmaW5lZChjZ1NlcnZpY2UuZ2V0Q3VycmVudEVudGl0eSgpKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHVuRm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgY2dTZXJ2aWNlLnNldEN1cnJlbnRFbnRpdHkobnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdW5Gb2N1cyAoZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdmb2N1c2VkJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgndW5mb2N1c2VkJywgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdmb2N1c2VkJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgndW5mb2N1c2VkJywgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggdXRpbHMuaXNEZWZpbmVkKGVudGl0eSkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkuZml4ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoRGF0YS5ub2RlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5maXhlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXN0YXJ0IGQzIGFuaW1hdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgIGlmICggdXRpbHMuaXNEZWZpbmVkKGNnU2VydmljZS5nZXRDdXJyZW50RW50aXR5KCkpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VMYXlvdXQucmVzdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkcmF3Q29ubmVjdGlvbiAoY29ubmVjdGlvbkxpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN2Z1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgnLmxpbmsnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEoY29ubmVjdGlvbkxpc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoJ2xpbmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2xpbmsgJyArIGwudHlwZSArICctbGluayAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiB3YXRjaFNpemVCeSAobmV3U2l6ZUJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCAhaXNEZWZpbmVkKG5ld1NpemVCeSkgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX2J1aWxkU2NhbGVGdW5jdGlvbiA9IGJ1aWxkU2NhbGVGdW5jdGlvbihuZXdTaXplQnkpO1xuICAgICAgICAgICAgICAgIF9idWlsZENoYXJnZUZ1bmN0aW9uID0gYnVpbGRDaGFyZ2VGdW5jdGlvbihuZXdTaXplQnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdyZXN0cmljdCc6ICdFJyxcbiAgICAgICAgICAgICdsaW5rJzogTGlua0ZuXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgRGlyZWN0aXZlLiRpbmplY3QgPSBbXG4gICAgICAgICckd2luZG93JyxcbiAgICAgICAgJ18nLFxuICAgICAgICAnY2dVdGlsU2VydmljZScsXG4gICAgICAgICdjZ01haW5TZXJ2aWNlJyxcbiAgICAgICAgJ2NnTmV0d29ya1NlcnZpY2UnXG4gICAgXTtcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnY2l2aWMtZ3JhcGgubmV0d29yaycpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2NnTmV0d29ya0dyYXBoJywgRGlyZWN0aXZlKTtcblxufSkoYW5ndWxhciwgZDMpO1xuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvLyBTbG9wcHkgZnVuY3Rpb24sIHJldHVybnMgYSBmaWx0ZXIgZnVuY3Rpb24gdGhhdCBmaWx0ZXJzIGJhc2VkIG9uIHRoZSB2YWx1ZSBpbiB0aGVcbiAgICAvLyBtYXAsIHdpdGggdGhlIGtleSBjaG9zZW4gYmVpbmcgdGhlIHR5cGUgcHJvcGVydHkgaW4gdGhlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGZpbHRlckJ5Qm9vbGVhbk1hcChtYXApIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXBbdi50eXBlXTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWx0ZXJCeU1pbkNvbm5lY3Rpb24obWluQ29ubmVjdGlvbikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgcmV0dXJuIGVudGl0eS52YWx1ZS5jb2xsYWJvcmF0aW9ucy5sZW5ndGggPj0gbWluQ29ubmVjdGlvbjtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb252ZXJ0RW50aXR5VG9HcmFwaE5vZGUoZW50aXR5KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcImlkXCI6IGVudGl0eS5pZCxcbiAgICAgICAgICAgIFwidmFsdWVcIjogZW50aXR5XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluZEJ5SWQoZmluZFRoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gZC5pZCA9PT0gZmluZFRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gU2VydmljZSh1dGlscywgY2dTZXJ2aWNlLCBlbnRpdHlTZXJ2aWNlLCBjb25uZWN0aW9uU2VydmljZSkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF9taW5Db25uZWN0aW9uID0gMDtcbiAgICAgICAgdmFyIF9zaXplQnkgPSBcImVtcGxveWVlc1wiO1xuXG4gICAgICAgIGZ1bmN0aW9uIHNpemVCeShvKSB7XG4gICAgICAgICAgICBpZih1dGlscy5pc1N0cmluZyhvKSkge1xuICAgICAgICAgICAgICAgIF9zaXplQnkgPSBvO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX3NpemVCeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1pbkNvbm5lY3Rpb24obykge1xuICAgICAgICAgICAgaWYoaXNGaW5pdGUobykgJiYgbyA+PSAwKSB7XG4gICAgICAgICAgICAgICAgX21pbkNvbm5lY3Rpb24gPSBvO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX21pbkNvbm5lY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRHcmFwaE5vZGVMaXN0KGVudGl0eUxpc3QpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdHlMaXN0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGVudGl0eUxpc3RcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZpbHRlckJ5Qm9vbGVhbk1hcChlbnRpdHlTZXJ2aWNlLmdldEVudGl0eVR5cGVzKCkpKVxuICAgICAgICAgICAgICAgIC5tYXAoY29udmVydEVudGl0eVRvR3JhcGhOb2RlKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZmlsdGVyQnlNaW5Db25uZWN0aW9uKF9taW5Db25uZWN0aW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRHcmFwaExpbmtMaXN0KG5vZGVMaXN0LCBjb25uZWN0aW9uT2JqKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZENvbm5lY3Rpb25PYmplY3Qoa2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb25zID0gY29ubmVjdGlvbk9ialtrZXldO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uc1xuICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlTm9kZSA9IG5vZGVMaXN0LmZpbmRJbmRleChmaW5kQnlJZChjb25uZWN0aW9uLnNvdXJjZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldE5vZGUgPSBub2RlTGlzdC5maW5kSW5kZXgoZmluZEJ5SWQoY29ubmVjdGlvbi50YXJnZXQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IFwic291cmNlXCI6IHNvdXJjZU5vZGUsIFwidGFyZ2V0XCI6IHRhcmdldE5vZGUsIHR5cGU6IGtleSB9O1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHV0aWxzLmlzRGVmaW5lZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGZpbHRlckNvbm5lY3Rpb25XaXRoTWlzc2luZ0VudGl0eShjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tQcm9wZXJ0eShwcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlscy5pc0RlZmluZWQoY29ubmVjdGlvbltwcm9wXSkgJiYgY29ubmVjdGlvbltwcm9wXSAhPT0gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjaGVja1Byb3BlcnR5KFwic291cmNlXCIpICYmIGNoZWNrUHJvcGVydHkoXCJ0YXJnZXRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZHVjZUFycmF5T2ZBcnJheShhcnIsIGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyLmNvbmNhdChkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdFxuICAgICAgICAgICAgICAgIC5rZXlzKGNvbm5lY3Rpb25PYmopXG4gICAgICAgICAgICAgICAgLm1hcChidWlsZENvbm5lY3Rpb25PYmplY3QpXG4gICAgICAgICAgICAgICAgLnJlZHVjZShyZWR1Y2VBcnJheU9mQXJyYXksIFtdKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZmlsdGVyQ29ubmVjdGlvbldpdGhNaXNzaW5nRW50aXR5KVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZmlsdGVyQnlCb29sZWFuTWFwKGNvbm5lY3Rpb25TZXJ2aWNlLmdldENvbm5lY3Rpb25UeXBlcygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRHcmFwaERhdGEoKSB7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbk9iaiA9IGNnU2VydmljZS5nZXRDb25uZWN0aW9uT2JqKCk7XG4gICAgICAgICAgICB2YXIgbm9kZUxpc3QgPSBnZXRHcmFwaE5vZGVMaXN0KGNnU2VydmljZS5nZXRFbnRpdHlMaXN0KCkpO1xuXG4gICAgICAgICAgICByZXR1cm4geyBcIm5vZGVMaXN0XCI6IG5vZGVMaXN0LCBcImxpbmtMaXN0XCI6IGdldEdyYXBoTGlua0xpc3Qobm9kZUxpc3QsIGNvbm5lY3Rpb25PYmopIH07XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLmdldEdyYXBoRGF0YSA9IGdldEdyYXBoRGF0YTtcblxuICAgICAgICBzZWxmLnNpemVCeSA9IHNpemVCeTtcbiAgICAgICAgc2VsZi5taW5Db25uZWN0aW9uID0gbWluQ29ubmVjdGlvbjtcbiAgICB9XG5cbiAgICBTZXJ2aWNlLiRpbmplY3QgPSBbXG4gICAgICAgIFwiY2dVdGlsU2VydmljZVwiLFxuICAgICAgICBcImNnTWFpblNlcnZpY2VcIixcbiAgICAgICAgXCJlbnRpdHlTZXJ2aWNlXCIsXG4gICAgICAgIFwiY29ubmVjdGlvblNlcnZpY2VcIlxuICAgIF07XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJjaXZpYy1ncmFwaC5uZXR3b3JrXCIpXG4gICAgICAgIC5zZXJ2aWNlKFwiY2dOZXR3b3JrU2VydmljZVwiLCBTZXJ2aWNlKTtcblxufSkoYW5ndWxhcik7XG4iXX0=
