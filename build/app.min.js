!function(i){"use strict";var t=["ui.bootstrap","leaflet-directive","ngAnimate"];i.module("civic-graph",t)}(angular);
!function(t){"use strict";function a(){return{templateUrl:"/js/analytic/analytics.html",restrict:"E",scope:{},controller:"analyticsCtrl"}}var c=[a];t.module("civic-graph").directive("analytics",c)}(angular);
!function(o){"use strict";function r(){return{templateUrl:"/js/control/controls.html",restrict:"E",scope:{toggleNetwork:"="},controller:"controlCtrl",controllerAs:"control",bindToController:{minConnections:"="}}}var t=[r];o.module("civic-graph").directive("control",t)}(angular);
!function(t){"use strict";function e(){return{templateUrl:"/js/edit-entity/edit.html",restrict:"E",scope:{entity:"=",entities:"=",isOpen:"="},controller:"editCtrl"}}var i=[e];t.module("civic-graph").directive("editEntity",i)}(angular);
!function(i,t){"use strict";function s(i){function s(){var i=t(this);i.css("height","55vh")}function c(){var i=t(this);window.innerHeight/3>parseInt(i.css("height"))?i.css("height","55vh"):i.css("height","30vh")}var e;i.mobile&&(e=t("#details-panel"),e.css("height","30vh"),e.scrollTop(0),e.scroll(s),e.click(c))}function c(){return{restrict:"A",link:s}}i.module("civic-graph").directive("addMobileEvents",[c])}(angular,$);
!function(o){"use strict";function c(o,c){o.closeWindow=function(){c.close()}}o.module("civic-graph").controller("modalCtrl",["$scope","$modalInstance",c])}(angular);
!function(o){"use strict";o.module("civic-graph").constant("_",window._).constant("config",{apiHost:"//civicgraph.io/"}).config(["$locationProvider","$httpProvider","$compileProvider",function(o,t,i){o.html5Mode(!0),t.defaults.headers.common["X-Requested-With"]="XMLHttpRequest",i.debugInfoEnabled(!0)}]).filter("thousandSuffix",function(){return function(o,t){var i,n=["k","M","G","T","P","E"];return window.isNaN(o)?null:o<1e3?o:(i=Math.floor(Math.log(o)/Math.log(1e3)),(o/Math.pow(1e3,i)).toFixed(t)+n[i-1])}})}(angular);
!function(t){"use strict";function i(t,i,e,n,o,a){t.random=(new Date).getTime(),t.entities=[],t.searchItems=null,t.categories=[],t.currentLocation=null,t.clickedLocation={},t.clickedLocation.location=null,t.clickedEntity={},t.clickedEntity.entity=null,t.editing=!1,t.actions={interacted:!1},t.showsearchMB=!1,t.showAnalytics=!1,t.entityTypes=n.getEntityTypes(),t.connectionTypes=o.getConnectionTypes(),t.status={isNetworkShown:!0,license:!0,networkLoading:!0},t.toggleAnalytics=function(){t.showAnalytics=!t.showAnalytics},this.minConnections=t.minConnections=2;var s=this;t.$watch("minConnections",function(){t.$broadcast("entitiesLoaded")}),t.connectionChange=function(){console.log(s.minConnections),t.minConnections=s.minConnections,t.$broadcast("entitiesLoaded")},t.hydePartials=function(i){"search"===i?(t.editing=!1,t.settingsEnabled=!1):"settings"===i?(t.editing=!1,t.showsearchMB=!1):"edit"===i?(t.settingsEnabled=!1,t.showsearchMB=!1):(t.editing=!1,t.settingsEnabled=!1,t.showsearchMB=!1)},t.showSearch=function(){t.hydePartials("search"),t.showsearchMB=!t.showsearchMB,t.status.license=!1},t.toggleSettings=function(){t.hydePartials("settings"),t.settingsEnabled=!t.settingsEnabled},t.startEdit=function(i){t.currentEntity=i,t.mobile&&t.hydePartials("edit"),t.editing=!0},t.switchView=function(){t.changeView(t.status.isNetworkShown?"Map":"Network")},window.mobilecheck=function(){var t=!1,i=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,e=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i;return function(n){(i.test(n)||e.test(n.substr(0,4)))&&(t=!0)}(navigator.userAgent||navigator.vendor||window.opera),t},t.mobile=window.mobilecheck(),t.settingsEnabled=!t.mobile,setTimeout(function(){i.get(a.apiHost+"api/entities").success(function(i){t.entities=i.nodes;var n=e.uniq(e.pluck(e.flatten(e.pluck(t.entities,"locations")),"locality")),o=e.map(n,function(i){var n=e.filter(t.entities,e.flow(e.property("locations"),e.partialRight(e.any,{locality:i})));return{name:i,type:"location",entities:n,dict:e.zipObject(e.pluck(n,"name"),e.pluck(n,"index"))}});t.searchItems=o.concat(t.entities),t.overviewUrl="js/overview/overview.html?i="+t.random,t.$broadcast("entitiesLoaded")})},100),t.overviewUrl=null,t.setEntity=function(i){t.currentLocation=null,t.currentEntity=i,t.editing&&t.stopEdit(),t.$broadcast("entityChange")},t.setEntityID=function(i){t.setEntity(e.find(t.entities,{id:i}))},t.setLocation=function(i){t.currentLocation=i,t.editing&&t.stopEdit(),t.$broadcast("itemChange")},t.selectItem=function(i){"location"===i.type?t.setLocation(i):t[i%1===0?"setEntityID":"setEntity"](i),t.$broadcast("selectItem",i)},t.$on("setCurrentEntity",function(i,e){t.currentEntity=e.value}),t.$on("setCurrentLocation",function(i,e){t.currentLocation=e.value}),t.setEntities=function(i){t.entities=i},t.stopEdit=function(){t.editing=!1},t.$on("editEntitySuccess",function(i){t.setEntities(i.nodes),t.$broadcast("entitiesLoaded")}),t.animationsEnabled=!0}var e=["$scope","$http","_","entityService","connectionService","config",i];t.module("civic-graph").controller("homeCtrl",e)}(angular);
!function(i){"use strict";var a=[];i.module("civic-graph").directive("map",a)}(angular);
!function(r){"use strict";function t(){return{restrict:"E",templateUrl:"/js/network/network.html",controller:"networkCtrl"}}var e=[t];r.module("civic-graph").directive("network",e)}(angular);
!function(e){"use strict";e.module("civic-graph").directive("input",function(){return{restict:"E",require:"?ngModel",link:function(e,r,t,i){"type"in t&&"range"===t.type.toLowerCase()&&i.$parsers.push(parseFloat)}}})}(angular);
!function(e){"use strict";function t(e,t){e.categorizedEntities={},t.forEach(t.keys(e.entityTypes),function(i){e.categorizedEntities[i]=t.filter(e.entities,{type:i})})}e.module("civic-graph").controller("overviewCtrl",["$scope","_",t])}(angular);
!function(c){"use strict";function n(c){}c.module("civic-graph").controller("analyticsCtrl",["$scope",n])}(angular);
!function(e){"use strict";function o(e,o,n,t,i){var a=this;a.entityTypes=e.getEntityTypes(),a.connectionTypes=o.getConnectionTypes(),a.sizeByList=[{name:"Employees",value:"employees"},{name:"Twitter Followers",value:"followers"}],a.sizeBy="employees",a.showView={Network:!0,Map:!1},a.changeView=function(e){t.forEach(t.keys(a.showView),function(o){a.showView[o]=e===o}),n.$broadcast("viewChange")},a.showAbout=function(){i.open({animation:!1,templateUrl:"control/about.html",controller:"modalCtrl"})},a.toggleNode=function(e){n.$broadcast("toggleNode",{name:e,enabled:a.entityTypes[e]})},a.toggleLink=function(e){n.$broadcast("toggleLink",{name:e,enabled:a.connectionTypes[e]})},a.changeSizeBy=function(){n.$broadcast("changeSizeBy",a.sizeBy)}}var n=["entityService","connectionService","$rootScope","_","$modal",o];e.module("civic-graph").controller("controlCtrl",n)}(angular);
!function(e){"use strict";function n(e,n){e.itemsShownDefault={key_people:3,grants_given:3,grants_received:3,investments_made:3,investments_received:3,collaborations:3,employments:3,relations:3,data_given:3,data_received:3,revenues:3,expenses:3},e.itemsShown=n.clone(e.itemsShownDefault),e.$on("entityChange",function(){e.itemsShown=n.clone(e.itemsShownDefault)}),e.showMore=function(n){e.itemsShown[n]=e.currentEntity[n].length},e.showLess=function(n){e.itemsShown[n]=e.itemsShownDefault[n]}}e.module("civic-graph").controller("detailsCtrl",["$scope","_",n])}(angular);
!function(t){"use strict";function e(t){return void 0!==t&&null!==t}function i(i,n,o,s,c,a,r){function d(){var t,e,n,o;for(e in i.categories)if(i.categories.hasOwnProperty(e)){t=i.categories[e];for(n in i.editEntity.categories)i.editEntity.categories.hasOwnProperty(n)&&(o=i.editEntity.categories[n],t.id===o.id&&(t.enabled=o.enabled))}}i.isEditing=!1,i.editEntity=c.getEntityModel(i.entity),i.entityTypes=c.getEntityTypes(),i.influenceTypes=c.getInfluenceTypes();var u;i.categories=[],i.addressSearch=function(t){return n.jsonp("https://dev.virtualearth.net/REST/v1/Locations",{params:{query:t,key:"Ai58581yC-Sr7mcFbYTtUkS3ixE7f6ZuJnbFJCVI4hAtW1XoDEeZyidQz2gLCCyD",jsonp:"JSON_CALLBACK",include:"ciso2"}}).then(function(t){if(e(t.data.resourceSets)&&t.data.resourceSets.length>0)return t.data.resourceSets[0].resources})},i.toggleCategory=function(t){if(0===i.editEntity.categories.length)i.editEntity.categories.push(t);else{var e=!1;for(var n in i.editEntity.categories)if(i.editEntity.categories.hasOwnProperty(n)){var o=i.editEntity.categories[n];if(o.id===t.id){e=!0,o.enabled=t.enabled;break}}e||i.editEntity.categories.push(t)}},i.setLocation=function(t,n){i.addressSearch(t.formattedAddress).then(function(o){var s=o[0],c=s.address,a=s.point;i.addLocation(n),t.address_line=e(c.addressLine)?c.addressLine:"",t.locality=e(c.locality)?c.locality:"",t.district=e(c.adminDistrict)?c.adminDistrict:"",t.country=e(c.countryRegion)?c.countryRegion:null,t.country_code=e(c.countryRegionIso2)?c.countryRegionIso2:"",t.coordinates=e(a.coordinates)?a.coordinates:null,t.postal_code=e(c.postalCode)?c.postalCode:null})},i.addLocation=function(t){t&&i.editEntity.locations.push(a.getLocationModel())},i.addKeyPerson=function(){s.some(i.editEntity.key_people,{name:"",id:null})||i.editEntity.key_people.push({name:"",id:null})},i.setFundingConnection=function(t,e){e.entity_id=t.id},i.addFundingConnection=function(t){s.some(t,{entity:""})||t.push({entity:"",amount:null,year:null,id:null})},i.setConnection=function(t,e){e.entity_id=t.id},i.addConnection=function(t){s.some(t,{entity:"",id:null})||t.push({entity:"",id:null,details:null})},i.addFinance=function(t){s.every(t,function(t){return t.amount>0&&t.year>1750})&&t.push({amount:null,year:null,id:null})},i.save=function(){i.isSaving=!0,console.log(i.editEntity.generateDBModel()),n.post(r.apiHost+"api/save",{entity:i.editEntity.generateDBModel()}).success(function(t){i.isSaving=!1,i.$emit("editEntitySuccess",t),i.cancelEdit()}).error(function(){i.isError=!0,o(function(){i.isError=!1},2e3)})},i.cancelEdit=function(){i.isOpen=!1},i.$watch("entity",function(n,o){t.equals(n,o)||(console.log(i.entity),i.editEntity=c.getEntityModel(n),i.categories=t.copy(u),d(),i.isEditing=e(i.editEntity.id))}),n.get(r.apiHost+"api/categories").success(function(e){u=e.categories,i.categories=t.copy(u)})}var n=["$scope","$http","$timeout","_","entityService","locationService","config",i];t.module("civic-graph").controller("editCtrl",n)}(angular);
!function(n){"use strict";function e(){function n(n){return void 0!==n&&null!==n}function e(e){var i=n(e)?e:{};this.name=n(i.name)?i.name:null,this.enabled=!n(i.enable)||i.enabled,this.id=n(i.id)?i.id:null}this.getCategoryModel=function(n){return new e(n)}}var i=[e];n.module("civic-graph").service("categoryService",i)}(angular);
!function(n){"use strict";function t(n){return void 0!==n&&null!==n}function i(){function n(n){var i=t(n);this.entity=i&&t(n.entity)?n.entity:null,this.id=i&&t(n.id)?n.id:null,this.details=i&&t(n.details)?n.details:null,this.name=i&&t(n.name)?n.name:null,this.entity_id=i&&t(n.entity_id)?n.entity_id:null}this.getConnectionModel=function(t){return new n(t)},this.getConnectionTypes=function(){return l}}var e=[i],l={Funding:!0,Data:!0,Employment:!0,Collaboration:!0};n.module("civic-graph").service("connectionService",e)}(angular);
!function(e){"use strict";function n(n,t,i,o,s){function p(e){return void 0!==e&&null!==e}function r(n,t){if(!p(n)&&!e.isArray(n))return[t()];var i,o,s=[];for(i in n)n.hasOwnProperty(i)&&(o=n[i],e.isObject(o)&&s.push(t(o)));return s.push(t()),s}function a(e){var l=this,c=p(e)?e:{};this.id=p(c.id)?c.id:null,this.name=p(c.name)?c.name:null,this.locations=r(c.locations,o.getLocationModel),this.influence=p(c.influence)?c.influence:null,this.grants_received=r(c.grants_received,n.getFundingConnectionModel),this.investments_received=r(c.investments_received,n.getFundingConnectionModel),this.grants_given=r(c.grants_given,n.getFundingConnectionModel),this.investments_made=r(c.investments_made,n.getFundingConnectionModel),this.data_given=r(c.data_given,t.getConnectionModel),this.data_received=r(c.data_received,t.getConnectionModel),this.collaborations=r(c.collaborations,t.getConnectionModel),this.key_people=r(c.key_people,t.getConnectionModel),this.employments=r(c.employments,t.getConnectionModel),this.revenues=r(c.revenues,i.getFinanceModel),this.expenses=r(c.expenses,i.getFinanceModel),this.categories=r(c.categories,s.getCategoryModel),this.type=p(c.type)?c.type:null,this.nickname=p(c.nickname)?c.nickname:null,this.url=p(c.url)?c.url:null,this.twitter_handle=p(c.twitter_handle)?c.twitter_handle:null,this.employees=p(c.employees)?c.employees:null,this.generateDBModel=function(){var e=new a(l);return e.locations.pop(),e.locations.pop(),e.grants_received.pop(),e.grants_received.pop(),e.grants_given.pop(),e.grants_given.pop(),e.investments_received.pop(),e.investments_received.pop(),e.investments_made.pop(),e.investments_made.pop(),e.data_given.pop(),e.data_given.pop(),e.data_received.pop(),e.data_received.pop(),e.collaborations.pop(),e.collaborations.pop(),e.key_people.pop(),e.key_people.pop(),e.employments.pop(),e.employments.pop(),e.revenues.pop(),e.revenues.pop(),e.expenses.pop(),e.expenses.pop(),e.categories.pop(),e.categories.pop(),e.description="",console.log(e),e}}var l={Government:!0,"For-Profit":!0,"Non-Profit":!0,Individual:!0},c=["Local","National","Global"];this.getEntityModel=function(e){return new a(e)},this.getEntityTypes=function(){return l},this.getInfluenceTypes=function(){return c}}var t=["fundingConnectionService","connectionService","financeService","locationService","categoryService",n];e.module("civic-graph").service("entityService",t)}(angular);
!function(n){"use strict";function i(n){return void 0!==n&&null!==n}function t(){function n(n){var t=i(n)?n:{};this.amount=i(t.amount)&&t.amount>=0?t.amount:0,this.year=i(t.year)&&t.year>=1750?t.year:null,this.id=i(t.id)?t.id:null}this.getFinanceModel=function(i){return new n(i)}}var e=[t];n.module("civic-graph").service("financeService",e)}(angular);
!function(n){"use strict";function i(n){return void 0!==n&&null!==n}function t(){function n(n){var t=i(n);this.entity=t&&i(n.entity)?n.entity:"",this.amount=t&&i(n.amount)?n.amount:null,this.year=t&&i(n.year)?n.year:null,this.id=t&&i(n.id)?n.id:null}this.getFundingConnectionModel=function(i){return new n(i)}}var e=[t];n.module("civic-graph").service("fundingConnectionService",e)}(angular);
!function(t){"use strict";function i(){function t(t){return void 0!==t&&null!==t}function i(i){var s=t(i)?i:{};this.address_line=t(s.address_line)?s.address_line:null,this.locality=t(s.locality)?s.locality:null,this.district=t(s.district)?s.district:null,this.postal_code=t(s.postal_code)?s.postal_code:null,this.country=t(s.country)?s.country:null,this.country_code=t(s.country_code)?s.country_code:null,this.coordinates=t(s.coordinates)?s.coordinates:null,this.id=t(s.id)?s.id:null,this.formattedAddress=(t(this.address_line)?this.address_line+" ":"")+(t(this.locality)?this.locality+", ":"")+(t(this.country_code)?this.country_code+" ":"")+(t(this.postal_code)?this.postal_code:""),this.formattedAddress=this.formattedAddress.trim()}this.getLocationModel=function(t){return new i(t)}}var s=[i];t.module("civic-graph").service("locationService",s)}(angular);
!function(t,e,n){"use strict";function i(t,i,o,r,a){t.options={center:{lat:20,lng:-40,zoom:3},defaults:{tileLayer:"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZGF2aWRscm50IiwiYSI6IjA0M2RkNzMzZWJmNzEzNGYzMTdhYTExYzAyZmU4ZTE1In0.TNYlFta2VItrkn4L0Z9BJQ",tileLayerOptions:{detectRetina:!0,reuseTiles:!1},zoomControl:!1,attributionControl:!1}},i(function(){var i=function(t){var n=t.data,i=e.layout.pie().sort(null).value(function(t){return t.value}),o=e.svg.arc().outerRadius(t.r).innerRadius(t.r-10),r=t.r+t.strokeWidth,a=2*r,c=a,l=document.createElementNS(e.ns.prefix.svg,"svg"),s=e.select(l).data(n).attr("class","piechart").attr("width",a).attr("height",c),u=s.selectAll(".arc").data(i(n)).enter().append("g").attr("class","arc").attr("transform","translate("+r+","+r+")");return u.append("path").attr("d",o).attr("class",function(t){return t.data.type+"-arc"}),u.append("svg:text").text(function(e,n){if(0===n)return t.count}).attr("x",-4*t.count.toString().length).attr("dy",5).attr("class","arcText"),window.XMLSerializer?(new window.XMLSerializer).serializeToString(l):l.xml?l.xml:""};o.getMap().then(function(e){function o(t){var e=t.getAllChildMarkers(),o=e.length,a=r.pluck(e,"options"),c=r.map(r.countBy(a,"type"),function(t,e){return{type:e,value:t}}),l=28,s=1,u=2*(l+s),d=i({data:c,r:l,strokeWidth:s,count:o});return new n.DivIcon({html:d,className:"marker-cluster",iconSize:new n.point(u,u)})}function c(t){function e(e){if(r.every(e.coordinates)){"40.78200"===e.coordinates[0].toFixed(5)&&"-73.83170"===e.coordinates[1].toFixed(5)&&(e.coordinates[0]=40.77065,e.coordinates[1]=-73.97406);var i=n.marker(e.coordinates,{icon:u[t.type],title:t.name,entity_id:t.id,message:t.name,type:t.type});d.addLayer(i)}}r.forEach(t.locations,e)}function l(t){console.error(t.message+"  %O",t)}var s=a("filter")(t.entities,function(t){return t.collaborations.length>4});e.invalidateSize(),new n.Control.Zoom({position:"topright"}).addTo(e),n.control.locate({position:"topright",showPopup:!1,icon:"fa fa-location-arrow"}).addTo(e);var u={"Non-Profit":n.icon({iconUrl:"img/marker-nonprof.svg",iconSize:[60,60]}),"For-Profit":n.icon({iconUrl:"img/marker-prof.svg",iconSize:[60,60]}),Individual:n.icon({iconUrl:"img/marker-ind.svg",iconSize:[60,60]}),Government:n.icon({iconUrl:"img/marker-gov.svg",iconSize:[60,60]})},d=n.markerClusterGroup({spiderfyOnMaxZoom:!0,showCoverageOnHover:!1,iconCreateFunction:o,maxClusterRadius:30,spiderfyDistanceMultiplier:1.3});console.log("Original: %O",t.entities),console.log("Filtered: %O",s),r.forEach(s,c),e.addLayer(d),e.on("locationerror",l),d.on("click",function(e){t.setEntityID(e.layer.options.entity_id),t.clickedEntity.entity=t.currentEntity,t.actions.interacted=!0,t.settingsEnabled&&t.mobile&&t.toggleSettings(),t.safeApply()}),e.on("click",function(){t.clickedEntity.entity=null,t.actions.interacted=!0,t.safeApply()}),t.$on("selectItem",function(){var n=t.currentEntity.locations.length>0?r.pluck(t.currentEntity.locations,"coordinates"):null;n.length>0&&e.setView(n[0],11),t.actions.interacted=!0,t.safeApply()})})})}var o=["$scope","$timeout","leafletData","_","$filter",i];t.module("civic-graph").controller("mapCtrl",o)}(angular,d3,L);
!function(t,e){"use strict";function n(t){return void 0!==t&&null!==t}function i(t,i,o,c,a){t.isLoading=!0,t.connections={},t.safeApply=function(t){var e=this.$root.$$phase;"$apply"===e||"$digest"===e?t&&"function"==typeof t&&t():this.$apply(t)},t.$on("entitiesLoaded",function(e){e.targetScope;i.get(a.apiHost+"api/connections").success(function(e){var i=c("filter")(t.entities,function(e){return e.collaborations.length>=t.minConnections}),a={};o.forEach(o.keys(e.connections),function(t){a[t]=[]}),o.forEach(e.connections,function(t,e){o.forEach(t,function(t){var c=o.find(i,{id:t.source}),r=o.find(i,{id:t.target});n(c)&&n(r)&&a[e].push({source:c,target:r})})}),o.forEach(o.keys(t.entityTypes),function(e){var n=o.takeRight(o.sortBy(o.filter(t.entities,{type:e}),"collaborations.length"),5);o.forEach(n,function(t){t.wellconnected=!0})}),i=o.sortBy(i,function(t){return t.wellconnected?1:0}),t.mobile?r(i):s(i,a)})});var r=function(i){var c={nodes:t.entities,links:o.flatten(o.values(t.connections))},a={Government:{focused:"rgba(242, 80, 34, 1)",unfocused:"rgba(242, 80, 34, 0.1)"},"Non-Profit":{focused:"rgba(30, 144, 255, 1)",unfocused:"rgba(30, 144, 255, 0.1)"},"For-Profit":{focused:"rgba(127, 186, 0, 1)",unfocused:"rgba(127, 186, 0, 0.1)"},Individual:{focused:"rgba(255, 175, 44, 1)",unfocused:"rgba(255, 175, 44, 0.1)"},Funding:{focused:"#FF7460",unfocused:"#E3DFE4"},Data:{focused:"#84C2FF",unfocused:"#E3DFE4"},Employment:{focused:"#EE73FF",unfocused:"#E3DFE4"},Collaboration:{focused:"#FFD955",unfocused:"#E3DFE4"}},r=$("#canvas-force"),s=r.width(),u=r.height(),l={Government:[-90,-90-u/7],"Non-Profit":[-90,90-u/7],"For-Profit":[90,-90-u/7],Individual:[90,90-u/7]},d=function(t,e,n,i,o){var c=t-n,a=e-i;return c*c+a*a<=o*o},y={employees:function(t){return t>10?Math.log(t)/3:1.5},followers:function(t){return t>0&&t<=500?1.5:t>500&&t<=5e3?1.8:t>5e3&&t<=1e4?2:t>1e4&&t<=25e3?2.5:t>25e3&&t<=9e5?3:t>9e5?5:1}},f=d3.select("div#canvas-force").append("canvas"),p=f.node().getContext("2d"),h=window.devicePixelRatio||1,g=p.webkitBackingStorePixelRatio||p.mozBackingStorePixelRatio||p.msBackingStorePixelRatio||p.oBackingStorePixelRatio||p.backingStorePixelRatio||1,m=h/g;f.attr("width",s*m).attr("height",u*m).attr("id","networkCanvas");var k=document.getElementById("networkCanvas");k.style.width=s+"px",k.style.height=u+"px",p.scale(m,m),t.loading=!1;var x=1;$("#networkCanvas").click(function(e){var n=e.offsetX/x,i=e.offsetY/x;t.showLicense=!1,t.clickedEntity.entity=null;var o=!1;c.nodes.forEach(function(e){var c=y[t.sizeBy](e[t.sizeBy]);d(n,i,e.x+l[e.type][0],e.y+l[e.type][1],4.5*c)&&(t.hydePartials(),t.$emit("setCurrentEntity",{value:e}),o=!0,t.setEntity(e),t.clickedEntity.entity=e,focus(e))}),o||(t.$emit("setCurrentLocation",{value:null}),t.$emit("setCurrentEntity",{value:null})),T(),t.actions.interacted=!0,t.safeApply(),$("#details-panel").scrollTop(0)});var v,E=0,L=!0,w=[],M=[];c.nodes.forEach(function(e){n(i[e.type])&&(t.currentLocation?e.name in t.currentLocation.dict&&w.push(e):t.currentEntity&&!v[e.id]&&e!==t.currentEntity||(t.currentEntity||e.wellconnected?w.push(e):M.push(e)))}),M=M.concat(w);var T=function(){var i;E++,E>70&&L&&(L=!1,b.stop(),i=new e.PinchZoom($("#networkCanvas"),{})),p.clearRect(0,0,s,u),v={},p.strokeStyle="#ccc",o.forEach(t.connections,function(e,i){e.forEach(function(e){var o,c=n(t.connectionTypes[i]),r=n(t.entityTypes[e.target.type]),d=n(t.entityTypes[e.source.type]);c&&r&&d&&(n(t.currentLocation)?e.source.name in t.currentLocation.dict&&e.target.name in t.currentLocation.dict&&(p.beginPath(),o=y[t.sizeBy](e.source[t.sizeBy]),p.moveTo(Math.max(4.5*o,Math.min(s-4.5*o,e.source.x+l[e.source.type][0])),Math.max(4.5*o,Math.min(u-4.5*o,e.source.y+l[e.source.type][1]))),p.lineTo(Math.max(4.5*o,Math.min(s-4.5*o,e.target.x+l[e.target.type][0])),Math.max(4.5*o,Math.min(u-4.5*o,e.target.y+l[e.target.type][1]))),p.strokeStyle=a[i].focused,p.stroke(),p.closePath()):n(t.currentEntity)&&e.source!==t.currentEntity&&e.target!==t.currentEntity||(p.beginPath(),o=y[t.sizeBy](e.source[t.sizeBy]),p.moveTo(Math.max(4.5*o,Math.min(s-4.5*o,e.source.x+l[e.source.type][0])),Math.max(4.5*o,Math.min(u-4.5*o,e.source.y+l[e.source.type][1]))),p.lineTo(Math.max(4.5*o,Math.min(s-4.5*o,e.target.x+l[e.target.type][0])),Math.max(4.5*o,Math.min(u-4.5*o,e.target.y+l[e.target.type][1]))),p.strokeStyle=a[i].focused,p.stroke(),p.closePath(),v[e.source.id]=!0,v[e.target.id]=!0))})});var c=[];M.forEach(function(e){if(t.entityTypes[e.type]){var n;t.currentLocation?e.name in t.currentLocation.dict?(n="focused",p.strokeStyle="white",c.push(e)):(p.strokeStyle="rgba(255, 255, 255, 0.1)",n="unfocused"):!t.currentEntity||v[e.id]||e===t.currentEntity?(n="focused",p.strokeStyle="white",t.currentEntity?c.push(e):e.wellconnected&&c.push(e)):(p.strokeStyle="rgba(255, 255, 255, 0.1)",n="unfocused");var i=y[t.sizeBy](e[t.sizeBy]);p.beginPath(),p.fillStyle=a[e.type][n],p.arc(Math.max(4.5*i,Math.min(s-4.5*i,e.x+l[e.type][0])),Math.max(4.5*i,Math.min(u-4.5*i,e.y+l[e.type][1])),4.5*i,0,2*Math.PI),p.fill(),p.lineWidth=1,p.stroke(),p.closePath()}}),o.forEach(c,function(e){var n=y[t.sizeBy](e[t.sizeBy]);p.strokeStyle="#333333";var i=e.nickname?e.nickname:e.name;p.font="lighter 11px Segoe UI, HelveticaNeue-Light, sans-serif-light, sans-serif",p.strokeText(i,Math.max(4.5*n,Math.min(s-4.5*n,e.x+l[e.type][0]))-2*i.length,Math.max(4.5*n,Math.min(u-4.5*n,e.y+l[e.type][1]))+10,100)})},b=d3.layout.force().size([s,u]).nodes(c.nodes).links(c.links).on("tick",T).charge(-2).linkStrength(.1).linkDistance(50).start();t.$on("toggleNode",function(){T()}),t.$on("toggleLink",function(){T(),console.log("network found")}),t.$on("changeSizeBy",function(){T()}),t.$on("selectItem",function(e,n){"location"===n.type?(t.clickedLocation.location=t.currentLocation,t.$emit("setCurrentEntity",{value:null})):(t.clickedEntity.entity=t.currentEntity,t.$emit("setCurrentLocation",{value:null})),t.actions.interacted=!0,t.safeApply(),T()})},s=function(e,i){t.isLoading=!1;var c=d3.select("#network");c.selectAll("*").remove();var a=c.node().getBoundingClientRect(),r=a.height,s=a.width,u=6,l=7,d={Individual:{x:1,y:1},"For-Profit":{x:1,y:-1},"Non-Profit":{x:-1,y:1},Government:{x:-1,y:-1}},y=10,f=50,p=d3.max(e,function(t){return parseInt(t.employees)}),h=d3.max(e,function(t){return parseInt(t.followers)}),g={employees:d3.scale.sqrt().domain([10,p]).range([y,f]),followers:d3.scale.sqrt().domain([10,h]).range([y,f])},m={},k=d3.layout.force().size([s,r]).nodes(e).links(o.flatten(o.values(i))).charge(function(t){return t.employees?-2*g.employees(t.employees):-20}).linkStrength(0).linkDistance(50);o.forEach(i,function(t,e){m[e]=c.selectAll(".link ."+e+"-link").data(t).enter().append("line").attr("class",function(t){return n(t.source)&&n(t.target)?(t.type=e,"link "+e+"-link "+t.source.type+"-link "+t.target.type+"-link"):""})});var x=c.selectAll(".node").data(e).enter().append("g").attr("class",function(t){return"node "+t.type+"-node"}).call(k.drag);x.append("circle").attr("r",function(t){return t.employees?g.employees(t.employees):l}),x.append("text").text(function(t){return t.nickname?t.nickname:t.name}).attr("dx",function(){return-.065*this.getComputedTextLength()/2+"em"}).attr("dy",function(){return.08*this.parentNode.getBBox().height/2+.5+"em"}),k.on("tick",function(t){var n=u*t.alpha;o.forEach(e,function(t){t.x&&d[t.type]&&(t.x+=d[t.type].x*n,t.y+=d[t.type].y*n,t.x=Math.max(f,Math.min(s-f,t.x)),t.y=Math.max(f,Math.min(r-f,t.y)))}),o.forEach(m,function(t){t.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}),x.attr("transform",function(t){return"translate("+t.x+","+t.y+")"})});var v=function(t){requestAnimationFrame(function e(){for(var n=0;n<t;n++)k.tick();k.alpha()>0&&requestAnimationFrame(e)})};t.mobile||v(7),k.start();var E={};o.forEach(m,function(t){o.forEach(t[0],function(t){var e=t.__data__.source,n=t.__data__.target;E[e.index+","+n.index]=!0,E[n.index+","+e.index]=!0})});var L,w=function(t,e){return E[t.index+","+e.index]||t.index===e.index},M=function(t){x.classed("focused",function(e){return w(t,e)}).classed("unfocused",function(e){return!w(t,e)}),o.forEach(m,function(e){e.classed("focused",function(e){return t.index===e.source.index||t.index===e.target.index}).classed("unfocused",function(e){return!(t.index===e.source.index||t.index===e.target.index)})})},T=function(e){t.currentEntity!==e&&t.setEntity(e),t.safeApply(),M(e)},$=function(e){x.classed("focused",!1).classed("unfocused",!1),o.forEach(m,function(t){t.classed("focused",!1).classed("unfocused",!1)}),e.fixed=!1,t.clickedEntity.entity&&k.resume()},b=function(e){t.clickedEntity.entity||t.editing||t.currentLocation||(L=setTimeout(function(){T(e)},500)),t.actions.interacted=!0,t.safeApply()},P=function(e){t.clickedEntity.entity||t.currentLocation||($(e),clearTimeout(L)),t.actions.interacted=!0,t.safeApply()},B=function(e){t.safeApply(),x.classed("focused",function(t){return t.name in e.dict}).classed("unfocused",function(t){return!(t.name in e.dict)}),o.forEach(m,function(t){t.classed("focused",function(t){return t.source.name in e.dict&&t.target.name in e.dict}).classed("unfocused",function(t){return!(t.source.name in e.dict&&t.target.name in e.dict)})})},A=function(){x.classed("focused",!1).classed("unfocused",!1),o.forEach(m,function(t){t.classed("focused",!1).classed("unfocused",!1)}),t.clickedLocation.location&&k.resume()},S=function(e){t.showLicense=!1,t.clickedEntity.entity&&($(t.clickedEntity.entity),t.clickedEntity.entity=null),t.clickedLocation.location!==e&&(A(t.clickedLocation.location),t.clickedLocation.location=e,B(e)),d3.event&&d3.event.stopPropagation(),t.actions.interacted=!0,t.safeApply()},F=function(e){t.showLicense=!1,n(t.clickedLocation)&&(n(t.clickedLocation.location)&&(A(t.clickedLocation.entity),t.clickedLocation.location=null),t.clickedEntity.entity===e?t.clickedEntity.entity=null:(t.clickedEntity.entity&&$(t.clickedEntity.entity),t.clickedEntity.entity=e,T(e))),d3.event&&d3.event.stopPropagation(),t.actions.interacted=!0,t.safeApply()},C=function(){n(t.clickedLocation)&&(n(t.clickedLocation.location)&&($(t.clickedLocation.location),t.clickedLocation.location=null),n(t.clickedEntity.entity)&&($(t.clickedEntity.entity),t.clickedEntity.entity=null)),t.safeApply()},z=function(e){e.fixed?$(e):(e.x=s/2,e.y=r/2,e.px=s/2,e.py=r/2,e.fixed=!0,t.clickedEntity.entity=e),t.actions.interacted=!0,t.safeApply()};x.on("mouseover",b),x.on("mouseout",P),x.on("click",F),x.on("dblclick",z),c.on("click",C),x.classed("wellconnected",function(t){return t.hasOwnProperty("wellconnected")}),t.$on("changeSizeBy",function(t,e){c.selectAll("circle").transition().duration(250).attr("r",function(t){return t[e]?g[e](t[e]):l})}),t.$on("toggleLink",function(e,n){o.map(t.entityTypes,function(e,n){c.selectAll("."+n+"-link").classed({visible:function(e){return!t.connectionTypes[e.type]||t.entityTypes[e.source.type]&&t.entityTypes[e.target.type]},hidden:function(e){return!t.connectionTypes[e.type]||!t.entityTypes[e.source.type]||!t.entityTypes[e.target.type]}})})}),t.$on("toggleNode",function(e,n){c.selectAll("."+n.name+"-node").classed({visible:n.enabled,hidden:!n.enabled}),c.selectAll("."+n.name+"-link").classed({visible:function(e){return t.connectionTypes[e.type]&&t.entityTypes[e.source.type]&&t.entityTypes[e.target.type]},hidden:function(e){return!t.connectionTypes[e.type]||!t.entityTypes[e.source.type]||!t.entityTypes[e.target.type]}})}),t.$on("selectItem",function(e,n){"location"===n.type?S(t.currentLocation):F(t.currentEntity)})}}var o=["$scope","$http","_","$filter","config",i];t.module("civic-graph").controller("networkCtrl",o)}(angular,RTP);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNpdmljLWdyYXBoLm1vZHVsZS5qcyIsImFuYWx5dGljL2FuYWx5dGljc0RpcmVjdGl2ZS5qcyIsImNvbnRyb2wvY29udHJvbERpcmVjdGl2ZS5qcyIsImVkaXQtZW50aXR5L2VkaXRFbnRpdHlEaXJlY3RpdmUuanMiLCJleHRyYS9hZGRNb2JpbGVFdmVudHMuanMiLCJleHRyYS9tb2RhbEN0cmwuanMiLCJtYWluL2FwcC5qcyIsIm1haW4vaG9tZUN0cmwuanMiLCJtYXAvbWFwRGlyZWN0aXZlLmpzIiwibmV0d29yay9uZXR3b3JrRGlyZWN0aXZlLmpzIiwibmV0d29yay9zbGlkZXJCYXIuanMiLCJvdmVydmlldy9vdmVydmlld0N0cmwuanMiLCJhbmFseXRpYy9jb250cm9sbGVyL2FuYWx5dGljc0N0cmwuanMiLCJjb250cm9sL2NvbnRyb2xsZXIvY29udHJvbEN0cmwuanMiLCJkZXRhaWwvY29udHJvbGxlci9kZXRhaWxzQ3RybC5qcyIsImVkaXQtZW50aXR5L2NvbnRyb2xsZXIvZWRpdEN0cmwuanMiLCJlZGl0LWVudGl0eS9zZXJ2aWNlL2NhdGVnb3J5U2VydmljZS5qcyIsImVkaXQtZW50aXR5L3NlcnZpY2UvY29ubmVjdGlvblNlcnZpY2UuanMiLCJlZGl0LWVudGl0eS9zZXJ2aWNlL2VudGl0eVNlcnZpY2UuanMiLCJlZGl0LWVudGl0eS9zZXJ2aWNlL2ZpbmFuY2VTZXJ2aWNlLmpzIiwiZWRpdC1lbnRpdHkvc2VydmljZS9mdW5kaW5nQ29ubmVjdGlvblNlcnZpY2UuanMiLCJlZGl0LWVudGl0eS9zZXJ2aWNlL2xvY2F0aW9uU2VydmljZS5qcyIsIm1hcC9jb250cm9sbGVyL21hcEN0cmwuanMiLCJuZXR3b3JrL2NvbnRyb2xsZXIvbmV0d29ya0N0cmwuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1haW5EZXBlbmRlbmNpZXMiLCJtb2R1bGUiLCJhbmFseXRpY3NEaXJlY3RpdmUiLCJ0ZW1wbGF0ZVVybCIsInJlc3RyaWN0Iiwic2NvcGUiLCJjb250cm9sbGVyIiwiYW5hbHl0aWNzRGVwZW5kZW5jaWVzIiwiZGlyZWN0aXZlIiwiY29udHJvbERpcmVjdGl2ZSIsInRvZ2dsZU5ldHdvcmsiLCJjb250cm9sbGVyQXMiLCJiaW5kVG9Db250cm9sbGVyIiwibWluQ29ubmVjdGlvbnMiLCJjb250cm9sRGVwZW5kZW5jaWVzIiwiZWRpdEVudGl0eURpcmVjdGl2ZSIsImVudGl0eSIsImVudGl0aWVzIiwiaXNPcGVuIiwiZWRpdEVudGl0eURlcGVuZGVuY2llcyIsIiQiLCJsaW5rRnVuY3Rpb24iLCJzY3JvbGwiLCJzZWxmIiwidGhpcyIsImNzcyIsImNsaWNrIiwid2luZG93IiwiaW5uZXJIZWlnaHQiLCJwYXJzZUludCIsImRldGFpbHNQYW5lbCIsIm1vYmlsZSIsInNjcm9sbFRvcCIsImFkZE1vYmlsZUV2ZW50cyIsImxpbmsiLCJtb2RhbEN0cmwiLCIkc2NvcGUiLCIkbW9kYWxJbnN0YW5jZSIsImNsb3NlV2luZG93IiwiY2xvc2UiLCJjb25zdGFudCIsIl8iLCJhcGlIb3N0IiwiY29uZmlnIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkaHR0cFByb3ZpZGVyIiwiJGNvbXBpbGVQcm92aWRlciIsImh0bWw1TW9kZSIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsImRlYnVnSW5mb0VuYWJsZWQiLCJmaWx0ZXIiLCJpbnB1dCIsImRlY2ltYWxzIiwiZXhwIiwic3VmZml4ZXMiLCJpc05hTiIsIk1hdGgiLCJmbG9vciIsImxvZyIsInBvdyIsInRvRml4ZWQiLCJob21lQ3RybCIsIiRodHRwIiwiZW50aXR5U2VydmljZSIsImNvbm5lY3Rpb25TZXJ2aWNlIiwicmFuZG9tIiwiRGF0ZSIsImdldFRpbWUiLCJzZWFyY2hJdGVtcyIsImNhdGVnb3JpZXMiLCJjdXJyZW50TG9jYXRpb24iLCJjbGlja2VkTG9jYXRpb24iLCJsb2NhdGlvbiIsImNsaWNrZWRFbnRpdHkiLCJlZGl0aW5nIiwiYWN0aW9ucyIsImludGVyYWN0ZWQiLCJzaG93c2VhcmNoTUIiLCJzaG93QW5hbHl0aWNzIiwiZW50aXR5VHlwZXMiLCJnZXRFbnRpdHlUeXBlcyIsImNvbm5lY3Rpb25UeXBlcyIsImdldENvbm5lY3Rpb25UeXBlcyIsInN0YXR1cyIsImlzTmV0d29ya1Nob3duIiwibGljZW5zZSIsIm5ldHdvcmtMb2FkaW5nIiwidG9nZ2xlQW5hbHl0aWNzIiwiJHdhdGNoIiwiJGJyb2FkY2FzdCIsImNvbm5lY3Rpb25DaGFuZ2UiLCJjb25zb2xlIiwiaHlkZVBhcnRpYWxzIiwiZXhjZXB0Iiwic2V0dGluZ3NFbmFibGVkIiwic2hvd1NlYXJjaCIsInRvZ2dsZVNldHRpbmdzIiwic3RhcnRFZGl0IiwiY3VycmVudEVudGl0eSIsInN3aXRjaFZpZXciLCJjaGFuZ2VWaWV3IiwibW9iaWxlY2hlY2siLCJjaGVjayIsInJlZ2V4IiwicmVnZXgyIiwiYSIsInRlc3QiLCJzdWJzdHIiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ2ZW5kb3IiLCJvcGVyYSIsInNldFRpbWVvdXQiLCJnZXQiLCJzdWNjZXNzIiwiZGF0YSIsIm5vZGVzIiwibG9jYXRpb25zIiwidW5pcSIsInBsdWNrIiwiZmxhdHRlbiIsImVudGl0aWVzQnlMb2NhdGlvbiIsIm1hcCIsImxvYyIsImZpbmRpbmdzIiwiZmxvdyIsInByb3BlcnR5IiwicGFydGlhbFJpZ2h0IiwiYW55IiwibG9jYWxpdHkiLCJuYW1lIiwidHlwZSIsImRpY3QiLCJ6aXBPYmplY3QiLCJjb25jYXQiLCJvdmVydmlld1VybCIsInNldEVudGl0eSIsInN0b3BFZGl0Iiwic2V0RW50aXR5SUQiLCJpZCIsImZpbmQiLCJzZXRMb2NhdGlvbiIsInNlbGVjdEl0ZW0iLCJpdGVtIiwiJG9uIiwiZXZlbnQiLCJhcmdzIiwidmFsdWUiLCJzZXRFbnRpdGllcyIsInJlc3BvbnNlIiwiYW5pbWF0aW9uc0VuYWJsZWQiLCJob21lRGVwZW5kZW5jaWVzIiwiZGVwZW5kZW5jaWVzIiwicmVzdGljdCIsInJlcXVpcmUiLCJlbGVtZW50IiwiYXR0cnMiLCJuZ01vZGVsIiwidG9Mb3dlckNhc2UiLCIkcGFyc2VycyIsInB1c2giLCJwYXJzZUZsb2F0Iiwib3ZlcnZpZXdDdHJsIiwiY2F0ZWdvcml6ZWRFbnRpdGllcyIsImZvckVhY2giLCJrZXlzIiwiYW5hbHl0aWNzQ3RybCIsImNvbnRyb2xDdHJsIiwiJHJvb3RTY29wZSIsIiRtb2RhbCIsInZtIiwic2l6ZUJ5TGlzdCIsInNpemVCeSIsInNob3dWaWV3IiwiTmV0d29yayIsIk1hcCIsInZpZXciLCJzaG93QWJvdXQiLCJvcGVuIiwiYW5pbWF0aW9uIiwidG9nZ2xlTm9kZSIsImVuYWJsZWQiLCJ0b2dnbGVMaW5rIiwiY2hhbmdlU2l6ZUJ5IiwiY29udHJvbERlcHMiLCJkZXRhaWxzQ3RybCIsIml0ZW1zU2hvd25EZWZhdWx0Iiwia2V5X3Blb3BsZSIsImdyYW50c19naXZlbiIsImdyYW50c19yZWNlaXZlZCIsImludmVzdG1lbnRzX21hZGUiLCJpbnZlc3RtZW50c19yZWNlaXZlZCIsImNvbGxhYm9yYXRpb25zIiwiZW1wbG95bWVudHMiLCJyZWxhdGlvbnMiLCJkYXRhX2dpdmVuIiwiZGF0YV9yZWNlaXZlZCIsInJldmVudWVzIiwiZXhwZW5zZXMiLCJpdGVtc1Nob3duIiwiY2xvbmUiLCJzaG93TW9yZSIsImxlbmd0aCIsInNob3dMZXNzIiwiaXNEZWYiLCJvYmoiLCJ1bmRlZmluZWQiLCJlZGl0Q3RybCIsIiR0aW1lb3V0IiwibG9jYXRpb25TZXJ2aWNlIiwiaW5pdENhdGVnb3J5QXJyYXkiLCJjYXRlZ29yeSIsImNhdGVnb3J5SW5kZXgiLCJlbnRpdHlDYXRlZ29yeUluZGV4IiwiZW50aXR5Q2F0ZWdvcnkiLCJoYXNPd25Qcm9wZXJ0eSIsImVkaXRFbnRpdHkiLCJpc0VkaXRpbmciLCJnZXRFbnRpdHlNb2RlbCIsImluZmx1ZW5jZVR5cGVzIiwiZ2V0SW5mbHVlbmNlVHlwZXMiLCJjYXRlZ29yeUJhY2t1cCIsImFkZHJlc3NTZWFyY2giLCJzZWFyY2giLCJqc29ucCIsInBhcmFtcyIsInF1ZXJ5Iiwia2V5IiwiaW5jbHVkZSIsInRoZW4iLCJyZXNvdXJjZVNldHMiLCJyZXNvdXJjZXMiLCJ0b2dnbGVDYXRlZ29yeSIsImZvdW5kIiwiaXNMYXN0IiwiZm9ybWF0dGVkQWRkcmVzcyIsImFwaUNhbGxSZXN1bHQiLCJyZXN1bHQiLCJhZGRyZXNzIiwicG9pbnQiLCJhZGRMb2NhdGlvbiIsImFkZHJlc3NfbGluZSIsImFkZHJlc3NMaW5lIiwiZGlzdHJpY3QiLCJhZG1pbkRpc3RyaWN0IiwiY291bnRyeSIsImNvdW50cnlSZWdpb24iLCJjb3VudHJ5X2NvZGUiLCJjb3VudHJ5UmVnaW9uSXNvMiIsImNvb3JkaW5hdGVzIiwicG9zdGFsX2NvZGUiLCJwb3N0YWxDb2RlIiwiZ2V0TG9jYXRpb25Nb2RlbCIsImFkZEtleVBlcnNvbiIsInNvbWUiLCJzZXRGdW5kaW5nQ29ubmVjdGlvbiIsImZ1bmRpbmciLCJlbnRpdHlfaWQiLCJhZGRGdW5kaW5nQ29ubmVjdGlvbiIsImFtb3VudCIsInllYXIiLCJzZXRDb25uZWN0aW9uIiwiY29ubmVjdGlvbiIsImFkZENvbm5lY3Rpb24iLCJjb25uZWN0aW9ucyIsImRldGFpbHMiLCJhZGRGaW5hbmNlIiwicmVjb3JkcyIsImV2ZXJ5IiwiciIsInNhdmUiLCJpc1NhdmluZyIsImdlbmVyYXRlREJNb2RlbCIsInBvc3QiLCIkZW1pdCIsImNhbmNlbEVkaXQiLCJlcnJvciIsImlzRXJyb3IiLCJuZXdWYWwiLCJvbGRWYWwiLCJlcXVhbHMiLCJjb3B5IiwiZWRpdENvbnRyb2xsZXJEZXBzIiwiQ2F0ZWdvcnlTZXJ2aWNlIiwibyIsIkNhdGVnb3J5IiwiZGVmT2JqIiwiZW5hYmxlIiwiZ2V0Q2F0ZWdvcnlNb2RlbCIsImNhdGVnb3J5U2VydmljZURlcGVuZGVuY2llcyIsInNlcnZpY2UiLCJDb25uZWN0aW9ucyIsIkNvbm5lY3Rpb24iLCJvYmpJc0RlZiIsImdldENvbm5lY3Rpb25Nb2RlbCIsIkZ1bmRpbmciLCJEYXRhIiwiRW1wbG95bWVudCIsIkNvbGxhYm9yYXRpb24iLCJFbnRpdHlTZXJ2aWNlIiwiZnVuZGluZ0Nvbm5lY3Rpb25TZXJ2aWNlIiwiZmluYW5jZVNlcnZpY2UiLCJjYXRlZ29yeVNlcnZpY2UiLCJsb29wQW5kSW5pdCIsIm1vZGVsQXJyYXkiLCJpbml0TW9kZWxGdW5jdGlvbiIsImlzQXJyYXkiLCJhcnJheUluZGV4IiwiYXJyYXlWYWx1ZSIsIm5ld01vZGVsQXJyYXkiLCJpc09iamVjdCIsIkVudGl0eSIsImluZmx1ZW5jZSIsImdldEZ1bmRpbmdDb25uZWN0aW9uTW9kZWwiLCJnZXRGaW5hbmNlTW9kZWwiLCJuaWNrbmFtZSIsInVybCIsInR3aXR0ZXJfaGFuZGxlIiwiZW1wbG95ZWVzIiwiZGJNb2RlbCIsInBvcCIsImRlc2NyaXB0aW9uIiwiR292ZXJubWVudCIsIkZvci1Qcm9maXQiLCJOb24tUHJvZml0IiwiSW5kaXZpZHVhbCIsImVudGl0eVNlcnZpY2VEZXBlbmRlbmNpZXMiLCJGaW5hbmNlU2VydmljZSIsIkZpbmFuY2UiLCJGdW5kaW5nQ29ubmVjdGlvbnMiLCJGdW5kaW5nQ29ubmVjdGlvbiIsImZ1bmRpbmdDb25uZWN0aW9uU2VydmljZURlcGVuZGVuY2llcyIsIkxvY2F0aW9uU2VydmljZSIsIkxvY2F0aW9uIiwidHJpbSIsImxvY2F0aW9uU2VydmljZURlcGVuZGVuY2llcyIsImQzIiwiTCIsIm1hcEN0cmwiLCJsZWFmbGV0RGF0YSIsIiRmaWx0ZXIiLCJvcHRpb25zIiwiY2VudGVyIiwibGF0IiwibG5nIiwiem9vbSIsInRpbGVMYXllciIsInRpbGVMYXllck9wdGlvbnMiLCJkZXRlY3RSZXRpbmEiLCJyZXVzZVRpbGVzIiwiem9vbUNvbnRyb2wiLCJhdHRyaWJ1dGlvbkNvbnRyb2wiLCJjcmVhdGVQaWVDaGFydCIsInBpZSIsImxheW91dCIsInNvcnQiLCJkIiwiYXJjIiwic3ZnIiwib3V0ZXJSYWRpdXMiLCJpbm5lclJhZGl1cyIsInN0cm9rZVdpZHRoIiwidyIsImgiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsIm5zIiwicHJlZml4IiwidmlzIiwic2VsZWN0IiwiYXR0ciIsImFyY3MiLCJzZWxlY3RBbGwiLCJlbnRlciIsImFwcGVuZCIsInRleHQiLCJpIiwiY291bnQiLCJ0b1N0cmluZyIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsInhtbCIsImdldE1hcCIsImNsdXN0ZXJJY29uIiwiY2x1c3RlciIsImNoaWxkcmVuIiwiZ2V0QWxsQ2hpbGRNYXJrZXJzIiwidG90YWwiLCJjbHVzdGVyTWFya2VycyIsImNvdW50cyIsImNvdW50QnkiLCJpY29uRGltIiwiaHRtbCIsIkRpdkljb24iLCJjbGFzc05hbWUiLCJpY29uU2l6ZSIsIm91dGVyTG9vcCIsImlubmVyTG9vcCIsIm0iLCJtYXJrZXIiLCJpY29uIiwibWFya2VySWNvbiIsInRpdGxlIiwibWVzc2FnZSIsIm1hcmtlcnMiLCJhZGRMYXllciIsIm9uTG9jYXRpb25FcnJvciIsImxlYWZsZXRFcnJvciIsImZpbHRlcmVkRW50aXRpZXMiLCJpbnZhbGlkYXRlU2l6ZSIsIkNvbnRyb2wiLCJab29tIiwicG9zaXRpb24iLCJhZGRUbyIsImNvbnRyb2wiLCJsb2NhdGUiLCJzaG93UG9wdXAiLCJpY29uVXJsIiwibWFya2VyQ2x1c3Rlckdyb3VwIiwic3BpZGVyZnlPbk1heFpvb20iLCJzaG93Q292ZXJhZ2VPbkhvdmVyIiwiaWNvbkNyZWF0ZUZ1bmN0aW9uIiwibWF4Q2x1c3RlclJhZGl1cyIsInNwaWRlcmZ5RGlzdGFuY2VNdWx0aXBsaWVyIiwib24iLCJsYXllciIsInNhZmVBcHBseSIsInNldFZpZXciLCJSVFAiLCJuZXR3b3JrQ3RybCIsImlzTG9hZGluZyIsImZuIiwicGhhc2UiLCIkcm9vdCIsIiQkcGhhc2UiLCIkYXBwbHkiLCJ0YXJnZXRTY29wZSIsImZpbHRlcmVkQ29ubmVjdGlvbnMiLCJzb3VyY2VOb2RlIiwic291cmNlIiwidGFyZ2V0Tm9kZSIsInRhcmdldCIsInRvcDUiLCJ0YWtlUmlnaHQiLCJzb3J0QnkiLCJ3ZWxsY29ubmVjdGVkIiwiZSIsImRyYXdOZXR3b3JrTW9iaWxlIiwiZHJhd05ldHdvcmsiLCJlbnRpdHlBcnJheSIsImxpbmtzIiwidmFsdWVzIiwiY29sb3JzIiwiZm9jdXNlZCIsInVuZm9jdXNlZCIsImNhbnZhc0ZvcmNlIiwid2lkdGgiLCJoZWlnaHQiLCJvZmZzZXRzIiwiaXNJbnNpZGVDaXJjbGUiLCJ4IiwieSIsImN4IiwiY3kiLCJyYWRpdXMiLCJkeCIsImR5Iiwic2NhbGUiLCJmb2xsb3dlcnMiLCJmIiwiY2FudmFzIiwiY29udGV4dCIsIm5vZGUiLCJnZXRDb250ZXh0IiwiZGV2aWNlUGl4ZWxSYXRpbyIsImJhY2tpbmdTdG9yZVJhdGlvIiwid2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJvQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsImJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJyYXRpbyIsImNhbnZhc0VsIiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImxvYWRpbmciLCJzY2FsZXpvb20iLCJvWCIsIm9mZnNldFgiLCJvWSIsIm9mZnNldFkiLCJzaG93TGljZW5zZSIsImVudGl0eUZvdW5kIiwiayIsImZvY3VzIiwidGljayIsInNob3dFbnRpdGllcyIsImluaXRpYWxMb2FkIiwiZHJhd09uVG9wIiwiYWxsTm9kZXMiLCJwaW5jaFpvb20iLCJmb3JjZSIsInN0b3AiLCJQaW5jaFpvb20iLCJjbGVhclJlY3QiLCJzdHJva2VTdHlsZSIsImlzQ29uVHlwZURlZmluZWQiLCJpc0VudGl0eVRhcmdldFR5cGVEZWZpbmVkIiwiaXNFbnRpdHlTb3VyY2VUeXBlRGVmaW5lZCIsImJlZ2luUGF0aCIsIm1vdmVUbyIsIm1heCIsIm1pbiIsImxpbmVUbyIsInN0cm9rZSIsImNsb3NlUGF0aCIsImVudGl0eU5hbWVzIiwiZmlsbFN0eWxlIiwiUEkiLCJmaWxsIiwibGluZVdpZHRoIiwiZm9udCIsInN0cm9rZVRleHQiLCJzaXplIiwiY2hhcmdlIiwibGlua1N0cmVuZ3RoIiwibGlua0Rpc3RhbmNlIiwic3RhcnQiLCJjb25uZWN0aW9uQXJyYXkiLCJyZW1vdmUiLCJib3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvZmZzZXRTY2FsZSIsImRlZmF1bHROb2RlU2l6ZSIsImxvd2VyQm91bmRSYWRpdXMiLCJ1cHBlckJvdW5kUmFkaXVzIiwibWF4RW1wbG95ZWVzIiwiZWwiLCJtYXhGb2xsb3dlcnMiLCJzcXJ0IiwiZG9tYWluIiwicmFuZ2UiLCJjYWxsIiwiZHJhZyIsImdldENvbXB1dGVkVGV4dExlbmd0aCIsInBhcmVudE5vZGUiLCJnZXRCQm94IiwiYWxwaGEiLCJzcGVlZEFuaW1hdGUiLCJ0aWNrcyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlbmRlciIsImxpbmtlZEJ5SW5kZXgiLCJsIiwiX19kYXRhX18iLCJpbmRleCIsImhvdmVyVGltZXIiLCJuZWlnaGJvcmluZyIsImIiLCJmb2N1c25laWdoYm9ycyIsImNsYXNzZWQiLCJuIiwidW5mb2N1cyIsImZpeGVkIiwicmVzdW1lIiwiaG92ZXIiLCJ1bmhvdmVyIiwiY2xlYXJUaW1lb3V0IiwiZm9jdXNMb2NhdGlvbiIsInVuZm9jdXNMb2NhdGlvbiIsImhpZ2hsaWdodExvY2F0aW9uIiwic3RvcFByb3BhZ2F0aW9uIiwiYmFja2dyb3VuZGNsaWNrIiwiZGJsY2xpY2siLCJweCIsInB5IiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwidmFsIiwidmlzaWJsZSIsImhpZGRlbiJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBVUEsR0FFTixZQUVBLElBQUlDLElBQ0EsZUFDQSxvQkFDQSxZQUdKRCxHQUFRRSxPQUFPLGNBQWVELElBRS9CRDtDQ1BILFNBQVdBLEdBRVAsWUFJQSxTQUFTRyxLQUNMLE9BQ0lDLFlBQWEsOEJBQ2JDLFNBQWEsSUFDYkMsU0FDQUMsV0FBZSxpQkFQdkIsR0FBSUMsSUFBeUJMLEVBVzdCSCxHQUFRRSxPQUFPLGVBQ1ZPLFVBQVUsWUFBYUQs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LE9BQ3pCakcsRUFBTzZDLFlBQVkwZCxFQUFFaEgsT0FBT3RULE9BRTlDaWMsT0FBVyxTQUFVM0IsR0FHakIsT0FBUXZnQixFQUFPK0MsZ0JBQWdCd2QsRUFBRXRhLFFBQ3JCakcsRUFBTzZDLFlBQVkwZCxFQUFFbEgsT0FBT3BULFFBQzdCakcsRUFBTzZDLFlBQVkwZCxFQUFFaEgsT0FBT3RULGFBTXBFakcsRUFBTzhHLElBQUksYUFBYyxTQUFVQyxFQUFPZCxHQUN0Q21PLEVBQ0tjLFVBQVUsSUFBTWpQLEVBQUtELEtBQU8sU0FDNUI4YSxTQUFTbUIsUUFBV2hjLEVBQUtrRCxRQUFTK1ksUUFBV2pjLEVBQUtrRCxVQUV2RGlMLEVBQ0tjLFVBQVUsSUFBTWpQLEVBQUtELEtBQU8sU0FDNUI4YSxTQUNZbUIsUUFBVyxTQUFVMUIsR0FHakIsTUFBT3ZnQixHQUFPK0MsZ0JBQWdCd2QsRUFBRXRhLE9BQ3JCakcsRUFBTzZDLFlBQVkwZCxFQUFFbEgsT0FBT3BULE9BQzdCakcsRUFBTzZDLFlBQVkwZCxFQUFFaEgsT0FBT3RULE9BRTFDaWMsT0FBVyxTQUFVM0IsR0FHakIsT0FBUXZnQixFQUFPK0MsZ0JBQWdCd2QsRUFBRXRhLFFBQ3JCakcsRUFBTzZDLFlBQVkwZCxFQUFFbEgsT0FBT3BULFFBQzdCakcsRUFBTzZDLFlBQVkwZCxFQUFFaEgsT0FBT3RULFdBTWhFakcsRUFBTzhHLElBQUksYUFBYyxTQUFVQyxFQUFPRixHQUNwQixhQUFkQSxFQUFLWixLQUNMdWIsRUFBa0J4aEIsRUFBT29DLGlCQUd6QjlDLEVBQU1VLEVBQU9nRSxrQkEveUI3QixHQUFJc0QsSUFDQSxTQUNBLFFBQ0EsSUFDQSxVQUNBLFNBQ0FxUixFQSt5QkpoYixHQUFRRSxPQUFPLGVBQ1ZLLFdBQVcsY0FBZW9KLElBRWhDM0osUUFBUythIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oYW5ndWxhcikge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIG1haW5EZXBlbmRlbmNpZXMgPSBbXG4gICAgICAgICd1aS5ib290c3RyYXAnLFxuICAgICAgICAnbGVhZmxldC1kaXJlY3RpdmUnLFxuICAgICAgICAnbmdBbmltYXRlJ1xuICAgIF07XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnLCBtYWluRGVwZW5kZW5jaWVzKTtcblxufSkoYW5ndWxhcik7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgYnJpYW5hdmVjY2hpb25lIG9uIDcvMS8xNi5cbiAqL1xuXG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGFuYWx5dGljc0RlcGVuZGVuY2llcyA9IFthbmFseXRpY3NEaXJlY3RpdmVdO1xuXG4gICAgZnVuY3Rpb24gYW5hbHl0aWNzRGlyZWN0aXZlKCl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9qcy9hbmFseXRpYy9hbmFseXRpY3MuaHRtbCcsXG4gICAgICAgICAgICByZXN0cmljdCAgIDogJ0UnLFxuICAgICAgICAgICAgc2NvcGUgICAgICA6IHt9LFxuICAgICAgICAgICAgY29udHJvbGxlciAgIDogJ2FuYWx5dGljc0N0cmwnXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgLmRpcmVjdGl2ZSgnYW5hbHl0aWNzJywgYW5hbHl0aWNzRGVwZW5kZW5jaWVzKTtcblxufSkoYW5ndWxhcik7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgYnJpYW5hdmVjY2hpb25lIG9uIDcvMTAvMTYuXG4gKi9cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgY29udHJvbERlcGVuZGVuY2llcyA9IFtjb250cm9sRGlyZWN0aXZlXTtcblxuICAgIGZ1bmN0aW9uIGNvbnRyb2xEaXJlY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9qcy9jb250cm9sL2NvbnRyb2xzLmh0bWwnLFxuICAgICAgICAgICAgcmVzdHJpY3QgICA6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlICAgICAgOiB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlTmV0d29yayA6ICc9JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250cm9sbGVyICAgOiAnY29udHJvbEN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzIDogJ2NvbnRyb2wnLFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlciA6IHtcbiAgICAgICAgICAgICAgICBtaW5Db25uZWN0aW9ucyA6IFwiPVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgLmRpcmVjdGl2ZSgnY29udHJvbCcsIGNvbnRyb2xEZXBlbmRlbmNpZXMpO1xuXG59KShhbmd1bGFyKTtcbiIsIi8qKlxuICpcbiAqIENyZWF0ZWQgYnkgYnJpYW5hdmVjY2hpb25lIG9uIDYvMjcvMTYuXG4gKi9cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgZWRpdEVudGl0eURlcGVuZGVuY2llcyA9IFtlZGl0RW50aXR5RGlyZWN0aXZlXTtcblxuICAgIGZ1bmN0aW9uIGVkaXRFbnRpdHlEaXJlY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9qcy9lZGl0LWVudGl0eS9lZGl0Lmh0bWwnLFxuICAgICAgICAgICAgcmVzdHJpY3QgICA6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlICAgICAgOiB7XG4gICAgICAgICAgICAgICAgJ2VudGl0eScgIDogXCI9XCIsXG4gICAgICAgICAgICAgICAgJ2VudGl0aWVzJzogXCI9XCIsXG4gICAgICAgICAgICAgICAgJ2lzT3BlbicgIDogXCI9XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250cm9sbGVyIDogJ2VkaXRDdHJsJ1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFuZ3VsYXIubW9kdWxlKCdjaXZpYy1ncmFwaCcpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2VkaXRFbnRpdHknLCBlZGl0RW50aXR5RGVwZW5kZW5jaWVzKTtcblxufSkoYW5ndWxhcik7XG5cblxuIiwiKGZ1bmN0aW9uIChhbmd1bGFyLCAkKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBsaW5rRnVuY3Rpb24oc2NvcGUpIHtcblxuICAgICAgICBmdW5jdGlvbiBzY3JvbGwoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9ICQodGhpcyk7XG4gICAgICAgICAgICBzZWxmLmNzcygnaGVpZ2h0JywgJzU1dmgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNsaWNrKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSAkKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5pbm5lckhlaWdodCAvIDMgPiBwYXJzZUludChzZWxmLmNzcygnaGVpZ2h0JykpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jc3MoJ2hlaWdodCcsICc1NXZoJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuY3NzKCdoZWlnaHQnLCAnMzB2aCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRldGFpbHNQYW5lbDtcbiAgICAgICAgaWYgKHNjb3BlLm1vYmlsZSkge1xuICAgICAgICAgICAgZGV0YWlsc1BhbmVsID0gJChcIiNkZXRhaWxzLXBhbmVsXCIpO1xuICAgICAgICAgICAgZGV0YWlsc1BhbmVsLmNzcyhcImhlaWdodFwiLCBcIjMwdmhcIik7XG4gICAgICAgICAgICBkZXRhaWxzUGFuZWwuc2Nyb2xsVG9wKDApO1xuICAgICAgICAgICAgZGV0YWlsc1BhbmVsLnNjcm9sbChzY3JvbGwpO1xuICAgICAgICAgICAgZGV0YWlsc1BhbmVsLmNsaWNrKGNsaWNrKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZE1vYmlsZUV2ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICBsaW5rOiBsaW5rRnVuY3Rpb25cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuZGlyZWN0aXZlKCdhZGRNb2JpbGVFdmVudHMnLCBbYWRkTW9iaWxlRXZlbnRzXSk7XG59KShhbmd1bGFyLCAkKTtcbiIsIihmdW5jdGlvbihhbmd1bGFyKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBtb2RhbEN0cmwoJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSkge1xuICAgICAgICAkc2NvcGUuY2xvc2VXaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFuZ3VsYXIubW9kdWxlKCdjaXZpYy1ncmFwaCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdtb2RhbEN0cmwnLCBbJyRzY29wZScsICckbW9kYWxJbnN0YW5jZScsIG1vZGFsQ3RybF0pO1xuXG59KShhbmd1bGFyKTsiLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdjaXZpYy1ncmFwaCcpXG4gICAgICAgIC5jb25zdGFudCgnXycsIHdpbmRvdy5fKVxuICAgICAgICAuY29uc3RhbnQoJ2NvbmZpZycsIHtcbiAgICAgICAgICAgIGFwaUhvc3Q6ICcvL2NpdmljZ3JhcGguaW8vJ1xuICAgICAgICB9KVxuICAgICAgICAuY29uZmlnKFsnJGxvY2F0aW9uUHJvdmlkZXInLCAnJGh0dHBQcm92aWRlcicsICckY29tcGlsZVByb3ZpZGVyJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkbG9jYXRpb25Qcm92aWRlciwgJGh0dHBQcm92aWRlciwgJGNvbXBpbGVQcm92aWRlcikge1xuICAgICAgICAgICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLVJlcXVlc3RlZC1XaXRoJ10gPSAnWE1MSHR0cFJlcXVlc3QnO1xuICAgICAgICAgICAgICAgIC8vICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0V2ZW50LU5hbWUnXSA9ICdUZXN0X0V2ZW50JztcbiAgICAgICAgICAgICAgICAkY29tcGlsZVByb3ZpZGVyLmRlYnVnSW5mb0VuYWJsZWQodHJ1ZSk7XG4gICAgICAgICAgICB9XSlcbiAgICAgICAgLmZpbHRlcigndGhvdXNhbmRTdWZmaXgnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0LCBkZWNpbWFscykge1xuICAgICAgICAgICAgICAgIHZhciBleHAsXG4gICAgICAgICAgICAgICAgICAgIHN1ZmZpeGVzID0gWydrJywgJ00nLCAnRycsICdUJywgJ1AnLCAnRSddO1xuXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pc05hTihpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0IDwgMTAwMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwID0gTWF0aC5mbG9vcihNYXRoLmxvZyhpbnB1dCkgLyBNYXRoLmxvZygxMDAwKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKGlucHV0IC8gTWF0aC5wb3coMTAwMCwgZXhwKSkudG9GaXhlZChkZWNpbWFscykgKyBzdWZmaXhlc1tleHAgLSAxXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG59KShhbmd1bGFyKTtcbiIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGhvbWVEZXBlbmRlbmNpZXMgPSBbXG4gICAgICAgICckc2NvcGUnLFxuICAgICAgICAnJGh0dHAnLFxuICAgICAgICAnXycsXG4gICAgICAgICdlbnRpdHlTZXJ2aWNlJyxcbiAgICAgICAgJ2Nvbm5lY3Rpb25TZXJ2aWNlJyxcbiAgICAgICAgJ2NvbmZpZycsXG4gICAgICAgIGhvbWVDdHJsXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIGhvbWVDdHJsKCRzY29wZSwgJGh0dHAsIF8sIGVudGl0eVNlcnZpY2UsIGNvbm5lY3Rpb25TZXJ2aWNlLCBjb25maWcpIHtcbiAgICAgICAgJHNjb3BlLnJhbmRvbSAgICAgICAgICAgICAgICAgICA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAkc2NvcGUuZW50aXRpZXMgICAgICAgICAgICAgICAgID0gW107XG4gICAgICAgICRzY29wZS5zZWFyY2hJdGVtcyAgICAgICAgICAgICAgPSBudWxsO1xuICAgICAgICAkc2NvcGUuY2F0ZWdvcmllcyAgICAgICAgICAgICAgID0gW107XG4gICAgICAgICRzY29wZS5jdXJyZW50TG9jYXRpb24gICAgICAgICAgPSBudWxsO1xuICAgICAgICAkc2NvcGUuY2xpY2tlZExvY2F0aW9uICAgICAgICAgID0ge307XG4gICAgICAgICRzY29wZS5jbGlja2VkTG9jYXRpb24ubG9jYXRpb24gPSBudWxsO1xuICAgICAgICAkc2NvcGUuY2xpY2tlZEVudGl0eSAgICAgICAgICAgID0ge307XG4gICAgICAgICRzY29wZS5jbGlja2VkRW50aXR5LmVudGl0eSAgICAgPSBudWxsO1xuICAgICAgICAkc2NvcGUuZWRpdGluZyAgICAgICAgICAgICAgICAgID0gZmFsc2U7XG4gICAgICAgICRzY29wZS5hY3Rpb25zICAgICAgICAgICAgICAgICAgPSB7J2ludGVyYWN0ZWQnOiBmYWxzZX07XG4gICAgICAgICRzY29wZS5zaG93c2VhcmNoTUIgICAgICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLnNob3dBbmFseXRpY3MgICAgICAgICAgICA9IGZhbHNlO1xuICAgICAgICAkc2NvcGUuZW50aXR5VHlwZXMgICAgICAgICAgICAgID0gZW50aXR5U2VydmljZS5nZXRFbnRpdHlUeXBlcygpO1xuICAgICAgICAkc2NvcGUuY29ubmVjdGlvblR5cGVzICAgICAgICAgID0gY29ubmVjdGlvblNlcnZpY2UuZ2V0Q29ubmVjdGlvblR5cGVzKCk7XG4gICAgICAgICRzY29wZS5zdGF0dXMgICAgICAgICAgICAgICAgICAgPSB7XG4gICAgICAgICAgICBcImlzTmV0d29ya1Nob3duXCI6IHRydWUsXG4gICAgICAgICAgICBcImxpY2Vuc2VcIiAgICAgICA6IHRydWUsXG4gICAgICAgICAgICBcIm5ldHdvcmtMb2FkaW5nXCI6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudG9nZ2xlQW5hbHl0aWNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLnNob3dBbmFseXRpY3MgPSAhJHNjb3BlLnNob3dBbmFseXRpY3M7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5taW5Db25uZWN0aW9ucyA9ICRzY29wZS5taW5Db25uZWN0aW9ucyA9IDI7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdtaW5Db25uZWN0aW9ucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2VudGl0aWVzTG9hZGVkJyk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgJHNjb3BlLmNvbm5lY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzZWxmLm1pbkNvbm5lY3Rpb25zKTtcbiAgICAgICAgICAgICRzY29wZS5taW5Db25uZWN0aW9ucyA9IHNlbGYubWluQ29ubmVjdGlvbnM7XG4gICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnZW50aXRpZXNMb2FkZWQnKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuaHlkZVBhcnRpYWxzID0gZnVuY3Rpb24gKGV4Y2VwdCkge1xuICAgICAgICAgICAgaWYgKGV4Y2VwdCA9PT0gXCJzZWFyY2hcIikge1xuICAgICAgICAgICAgICAgICRzY29wZS5lZGl0aW5nICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2V0dGluZ3NFbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV4Y2VwdCA9PT0gXCJzZXR0aW5nc1wiKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVkaXRpbmcgICAgICA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICRzY29wZS5zaG93c2VhcmNoTUIgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhjZXB0ID09PSBcImVkaXRcIikge1xuICAgICAgICAgICAgICAgICRzY29wZS5zZXR0aW5nc0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd3NlYXJjaE1CICAgID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRzY29wZS5lZGl0aW5nICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2V0dGluZ3NFbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dzZWFyY2hNQiAgICA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNob3dTZWFyY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuaHlkZVBhcnRpYWxzKFwic2VhcmNoXCIpO1xuICAgICAgICAgICAgJHNjb3BlLnNob3dzZWFyY2hNQiAgID0gJHNjb3BlLnNob3dzZWFyY2hNQiA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgICAgIC8vICRzY29wZS4kYnJvYWRjYXN0KCdoaWRlTGljZW5zZScpO1xuICAgICAgICAgICAgJHNjb3BlLnN0YXR1cy5saWNlbnNlID0gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnRvZ2dsZVNldHRpbmdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLmh5ZGVQYXJ0aWFscyhcInNldHRpbmdzXCIpO1xuICAgICAgICAgICAgJHNjb3BlLnNldHRpbmdzRW5hYmxlZCA9ICEkc2NvcGUuc2V0dGluZ3NFbmFibGVkO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zdGFydEVkaXQgPSBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICAgICAgICAkc2NvcGUuY3VycmVudEVudGl0eSA9IGVudGl0eTtcbiAgICAgICAgICAgIGlmICgkc2NvcGUubW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmh5ZGVQYXJ0aWFscyhcImVkaXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkc2NvcGUuZWRpdGluZyA9IHRydWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnN3aXRjaFZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuY2hhbmdlVmlldygkc2NvcGUuc3RhdHVzLmlzTmV0d29ya1Nob3duID8gJ01hcCcgOiAnTmV0d29yaycpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHdpbmRvdy5tb2JpbGVjaGVjayAgICAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2hlY2sgID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVnZXggID0gLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLFxuICAgICAgICAgICAgICAgIHJlZ2V4MiA9IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4LnRlc3QoYSkgfHwgcmVnZXgyLnRlc3QoYS5zdWJzdHIoMCwgNCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KShuYXZpZ2F0b3IudXNlckFnZW50IHx8IG5hdmlnYXRvci52ZW5kb3IgfHwgd2luZG93Lm9wZXJhKTtcbiAgICAgICAgICAgIHJldHVybiBjaGVjaztcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLm1vYmlsZSAgICAgICAgICA9IHdpbmRvdy5tb2JpbGVjaGVjaygpO1xuICAgICAgICAkc2NvcGUuc2V0dGluZ3NFbmFibGVkID0gISRzY29wZS5tb2JpbGU7XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkaHR0cC5nZXQoY29uZmlnLmFwaUhvc3QgKyAnYXBpL2VudGl0aWVzJylcbiAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZW50aXRpZXMgPSBkYXRhLm5vZGVzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb25zICAgPSBfLnVuaXEoXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBsdWNrKF8uZmxhdHRlbihfLnBsdWNrKCRzY29wZS5lbnRpdGllcywgJ2xvY2F0aW9ucycpKSwgJ2xvY2FsaXR5JykpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbnRpdGllc0J5TG9jYXRpb24gPSBfLm1hcChsb2NhdGlvbnMsIGZ1bmN0aW9uIChsb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaW5kaW5ncyA9IF8uZmlsdGVyKCRzY29wZS5lbnRpdGllcywgXy5mbG93KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucHJvcGVydHkoJ2xvY2F0aW9ucycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucGFydGlhbFJpZ2h0KF8uYW55LCB7bG9jYWxpdHk6IGxvY30pXG4gICAgICAgICAgICAgICAgICAgICAgICApKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lICAgIDogbG9jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgOiAnbG9jYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0aWVzOiBmaW5kaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWN0ICAgIDogXy56aXBPYmplY3QoXy5wbHVjayhmaW5kaW5ncywgJ25hbWUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5wbHVjayhmaW5kaW5ncywgJ2luZGV4JykpXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoSXRlbXMgPSBlbnRpdGllc0J5TG9jYXRpb24uY29uY2F0KCRzY29wZS5lbnRpdGllcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKCRzY29wZS5nZXRVUkxJRCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyBTZXQgdGhlIGVudGl0eSB0byB0aGUgSUQgaW4gdGhlIFVSTCBpZiBpdCBleGlzdHMuXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAkc2NvcGUuc2V0RW50aXR5SUQoJHNjb3BlLmdldFVSTElEKCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5vdmVydmlld1VybCA9ICdqcy9vdmVydmlldy9vdmVydmlldy5odG1sP2k9JyArICRzY29wZS5yYW5kb207XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdlbnRpdGllc0xvYWRlZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCAxMDApO1xuXG4gICAgICAgICRzY29wZS5vdmVydmlld1VybCA9IG51bGw7XG5cbiAgICAgICAgJHNjb3BlLnNldEVudGl0eSAgID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRMb2NhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAkc2NvcGUuY3VycmVudEVudGl0eSAgID0gZW50aXR5O1xuICAgICAgICAgICAgaWYgKCRzY29wZS5lZGl0aW5nKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0b3BFZGl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnZW50aXR5Q2hhbmdlJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNldEVudGl0eUlEID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAkc2NvcGUuc2V0RW50aXR5KF8uZmluZCgkc2NvcGUuZW50aXRpZXMsIHsnaWQnOiBpZH0pKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuc2V0TG9jYXRpb24gPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgICRzY29wZS5jdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgICAgIGlmICgkc2NvcGUuZWRpdGluZykge1xuICAgICAgICAgICAgICAgICRzY29wZS5zdG9wRWRpdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2l0ZW1DaGFuZ2UnKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuc2VsZWN0SXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnbG9jYXRpb24nKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNldExvY2F0aW9uKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlW2l0ZW0gJSAxID09PSAwID8gJ3NldEVudGl0eUlEJyA6ICdzZXRFbnRpdHknXShpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdzZWxlY3RJdGVtJywgaXRlbSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiRvbignc2V0Q3VycmVudEVudGl0eScsIGZ1bmN0aW9uIChldmVudCwgYXJncykge1xuICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRFbnRpdHkgPSBhcmdzLnZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCdzZXRDdXJyZW50TG9jYXRpb24nLCBmdW5jdGlvbiAoZXZlbnQsIGFyZ3MpIHtcbiAgICAgICAgICAgICRzY29wZS5jdXJyZW50TG9jYXRpb24gPSBhcmdzLnZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuc2V0RW50aXRpZXMgPSBmdW5jdGlvbiAoZW50aXRpZXMpIHtcbiAgICAgICAgICAgICRzY29wZS5lbnRpdGllcyA9IGVudGl0aWVzO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zdG9wRWRpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5lZGl0aW5nID0gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiRvbihcImVkaXRFbnRpdHlTdWNjZXNzXCIsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgJHNjb3BlLnNldEVudGl0aWVzKHJlc3BvbnNlLm5vZGVzKTtcbiAgICAgICAgICAgIC8vICRzY29wZS5zZXRFbnRpdHlJRCgkc2NvcGUuY3VycmVudEVudGl0eS5pZCk7XG4gICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnZW50aXRpZXNMb2FkZWQnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuY29udHJvbGxlcignaG9tZUN0cmwnLCBob21lRGVwZW5kZW5jaWVzKTtcblxufSkoYW5ndWxhcik7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgYnJpYW5hdmVjY2hpb25lIG9uIDcvMTQvMTYuXG4gKi9cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gW107XG5cbiAgICBmdW5jdGlvbiBkaXJlY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBcInJlc3RyaWN0XCI6IFwiRVwiLFxuICAgICAgICAgICAgXCJ0ZW1wbGF0ZVVybFwiOiBcIi9tYXAvbWFwLmh0bWxcIixcbiAgICAgICAgICAgIFwiY29udHJvbGxlclwiOiBcIm1hcEN0cmxcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoXCJjaXZpYy1ncmFwaFwiKVxuICAgICAgICAgICAgLmRpcmVjdGl2ZShcIm1hcFwiLCBkZXBlbmRlbmNpZXMpO1xuXG59KShhbmd1bGFyKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgYnJpYW5hdmVjY2hpb25lIG9uIDcvMTEvMTYuXG4gKi9cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gW1xuICAgICAgICBkaXJlY3RpdmVcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gZGlyZWN0aXZlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgXCJyZXN0cmljdFwiOiBcIkVcIixcbiAgICAgICAgICAgIFwidGVtcGxhdGVVcmxcIjogXCIvanMvbmV0d29yay9uZXR3b3JrLmh0bWxcIixcbiAgICAgICAgICAgIFwiY29udHJvbGxlclwiOiBcIm5ldHdvcmtDdHJsXCJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZShcImNpdmljLWdyYXBoXCIpXG4gICAgICAgIC5kaXJlY3RpdmUoXCJuZXR3b3JrXCIsIGRlcGVuZGVuY2llcyk7XG5cbn0pKGFuZ3VsYXIpO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGJyaWFuYXZlY2NoaW9uZSBvbiA2LzI2LzE2LlxuICovXG4oZnVuY3Rpb24oYW5ndWxhcikge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdjaXZpYy1ncmFwaCcpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2lucHV0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdGljdDogJ0UnLFxuICAgICAgICAgICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICAgICAgICAgICAgICAgIGlmICggJ3R5cGUnIGluIGF0dHJzICYmIGF0dHJzLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3JhbmdlJyApIHtcbiAgICAgICAgICAgICAgICAgICAgbmdNb2RlbC4kcGFyc2Vycy5wdXNoKHBhcnNlRmxvYXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn0pKGFuZ3VsYXIpOyIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gb3ZlcnZpZXdDdHJsKCRzY29wZSwgXykge1xuICAgICAgICAkc2NvcGUuY2F0ZWdvcml6ZWRFbnRpdGllcyA9IHt9O1xuICAgICAgICBfLmZvckVhY2goXy5rZXlzKCRzY29wZS5lbnRpdHlUeXBlcyksIGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY2F0ZWdvcml6ZWRFbnRpdGllc1t0eXBlXSA9IF8uZmlsdGVyKCRzY29wZS5lbnRpdGllcywgeyd0eXBlJzogdHlwZX0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuY29udHJvbGxlcignb3ZlcnZpZXdDdHJsJywgWyckc2NvcGUnLCAnXycsIG92ZXJ2aWV3Q3RybF0pO1xufSkoYW5ndWxhcik7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgYnJpYW5hdmVjY2hpb25lIG9uIDcvMS8xNi5cbiAqL1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGZ1bmN0aW9uIGFuYWx5dGljc0N0cmwoJHNjb3BlKSB7XG5cbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuY29udHJvbGxlcignYW5hbHl0aWNzQ3RybCcsIFsnJHNjb3BlJywgYW5hbHl0aWNzQ3RybF0pO1xufSkoYW5ndWxhcik7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGJyaWFuYXZlY2NoaW9uZSBvbiA3LzEwLzE2LlxuICovXG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGNvbnRyb2xEZXBzID0gW1xuICAgICAgICAnZW50aXR5U2VydmljZScsXG4gICAgICAgICdjb25uZWN0aW9uU2VydmljZScsXG4gICAgICAgICckcm9vdFNjb3BlJyxcbiAgICAgICAgJ18nLFxuICAgICAgICAnJG1vZGFsJyxcbiAgICAgICAgY29udHJvbEN0cmxcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gY29udHJvbEN0cmwoZW50aXR5U2VydmljZSwgY29ubmVjdGlvblNlcnZpY2UsICRyb290U2NvcGUsIF8sICRtb2RhbCkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICB2bS5lbnRpdHlUeXBlcyA9IGVudGl0eVNlcnZpY2UuZ2V0RW50aXR5VHlwZXMoKTtcbiAgICAgICAgdm0uY29ubmVjdGlvblR5cGVzID0gY29ubmVjdGlvblNlcnZpY2UuZ2V0Q29ubmVjdGlvblR5cGVzKCk7XG4gICAgICAgIHZtLnNpemVCeUxpc3QgPSBbXG4gICAgICAgICAgICB7J25hbWUnOiAnRW1wbG95ZWVzJywgJ3ZhbHVlJzogJ2VtcGxveWVlcyd9LFxuICAgICAgICAgICAgeyduYW1lJzogJ1R3aXR0ZXIgRm9sbG93ZXJzJywgJ3ZhbHVlJzogJ2ZvbGxvd2Vycyd9XG4gICAgICAgIF07XG4gICAgICAgIHZtLnNpemVCeSA9ICdlbXBsb3llZXMnO1xuICAgICAgICB2bS5zaG93VmlldyA9IHtcbiAgICAgICAgICAgICdOZXR3b3JrJzogdHJ1ZSxcbiAgICAgICAgICAgICdNYXAnOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICB2bS5jaGFuZ2VWaWV3ID0gZnVuY3Rpb24gKHZpZXcpIHtcbiAgICAgICAgICAgIF8uZm9yRWFjaChfLmtleXModm0uc2hvd1ZpZXcpLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgIHZtLnNob3dWaWV3W25hbWVdID0gdmlldyA9PT0gbmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd2aWV3Q2hhbmdlJyk7XG4gICAgICAgIH07XG4gICAgICAgIHZtLnNob3dBYm91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29udHJvbC9hYm91dC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbW9kYWxDdHJsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZtLnRvZ2dsZU5vZGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd0b2dnbGVOb2RlJywgeyduYW1lJzogdHlwZSwgJ2VuYWJsZWQnOiB2bS5lbnRpdHlUeXBlc1t0eXBlXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZtLnRvZ2dsZUxpbmsgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd0b2dnbGVMaW5rJywgeyduYW1lJzogdHlwZSwgJ2VuYWJsZWQnOiB2bS5jb25uZWN0aW9uVHlwZXNbdHlwZV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2bS5jaGFuZ2VTaXplQnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2NoYW5nZVNpemVCeScsIHZtLnNpemVCeSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ2NvbnRyb2xDdHJsJywgY29udHJvbERlcHMpO1xuXG59KShhbmd1bGFyKTtcbiIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gZGV0YWlsc0N0cmwoJHNjb3BlLCBfKSB7XG4gICAgICAgICRzY29wZS5pdGVtc1Nob3duRGVmYXVsdCA9IHtcbiAgICAgICAgICAgICdrZXlfcGVvcGxlJzogMyxcbiAgICAgICAgICAgICdncmFudHNfZ2l2ZW4nOiAzLFxuICAgICAgICAgICAgJ2dyYW50c19yZWNlaXZlZCc6IDMsXG4gICAgICAgICAgICAnaW52ZXN0bWVudHNfbWFkZSc6IDMsXG4gICAgICAgICAgICAnaW52ZXN0bWVudHNfcmVjZWl2ZWQnOiAzLFxuICAgICAgICAgICAgJ2NvbGxhYm9yYXRpb25zJzogMyxcbiAgICAgICAgICAgICdlbXBsb3ltZW50cyc6IDMsXG4gICAgICAgICAgICAncmVsYXRpb25zJzogMyxcbiAgICAgICAgICAgICdkYXRhX2dpdmVuJzogMyxcbiAgICAgICAgICAgICdkYXRhX3JlY2VpdmVkJzogMyxcbiAgICAgICAgICAgICdyZXZlbnVlcyc6IDMsXG4gICAgICAgICAgICAnZXhwZW5zZXMnOiAzXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLml0ZW1zU2hvd24gPSBfLmNsb25lKCRzY29wZS5pdGVtc1Nob3duRGVmYXVsdCk7XG5cbiAgICAgICAgJHNjb3BlLiRvbignZW50aXR5Q2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gUmVzZXQgaXRlbXMgc2hvd24gaW4gZGV0YWlscyBsaXN0LlxuICAgICAgICAgICAgJHNjb3BlLml0ZW1zU2hvd24gPSBfLmNsb25lKCRzY29wZS5pdGVtc1Nob3duRGVmYXVsdCk7XG4gICAgICAgIH0pO1xuICAgICAgICAkc2NvcGUuc2hvd01vcmUgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgJHNjb3BlLml0ZW1zU2hvd25bdHlwZV0gPSAkc2NvcGUuY3VycmVudEVudGl0eVt0eXBlXS5sZW5ndGg7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5zaG93TGVzcyA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgICAkc2NvcGUuaXRlbXNTaG93blt0eXBlXSA9ICRzY29wZS5pdGVtc1Nob3duRGVmYXVsdFt0eXBlXTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuY29udHJvbGxlcignZGV0YWlsc0N0cmwnLCBbJyRzY29wZScsIFwiX1wiLCBkZXRhaWxzQ3RybF0pO1xufSkoYW5ndWxhcik7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBlZGl0Q29udHJvbGxlckRlcHMgPSBbXG4gICAgICAgICckc2NvcGUnLFxuICAgICAgICAnJGh0dHAnLFxuICAgICAgICAnJHRpbWVvdXQnLFxuICAgICAgICAnXycsXG4gICAgICAgICdlbnRpdHlTZXJ2aWNlJyxcbiAgICAgICAgJ2xvY2F0aW9uU2VydmljZScsXG4gICAgICAgICdjb25maWcnLFxuICAgICAgICBlZGl0Q3RybFxuICAgIF07XG5cbiAgICBmdW5jdGlvbiBpc0RlZihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAhPT0gdW5kZWZpbmVkICYmIG9iaiAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlZGl0Q3RybCgkc2NvcGUsICRodHRwLCAkdGltZW91dCwgXywgZW50aXR5U2VydmljZSwgbG9jYXRpb25TZXJ2aWNlLCBjb25maWcpIHtcbiAgICAgICAgJHNjb3BlLmlzRWRpdGluZyA9IGZhbHNlO1xuICAgICAgICAkc2NvcGUuZWRpdEVudGl0eSA9IGVudGl0eVNlcnZpY2UuZ2V0RW50aXR5TW9kZWwoJHNjb3BlLmVudGl0eSk7XG4gICAgICAgICRzY29wZS5lbnRpdHlUeXBlcyA9IGVudGl0eVNlcnZpY2UuZ2V0RW50aXR5VHlwZXMoKTtcbiAgICAgICAgJHNjb3BlLmluZmx1ZW5jZVR5cGVzID0gZW50aXR5U2VydmljZS5nZXRJbmZsdWVuY2VUeXBlcygpO1xuXG4gICAgICAgIHZhciBjYXRlZ29yeUJhY2t1cDtcblxuICAgICAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IFtdO1xuXG4gICAgICAgICRzY29wZS5hZGRyZXNzU2VhcmNoID0gZnVuY3Rpb24gKHNlYXJjaCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmpzb25wKCdodHRwczovL2Rldi52aXJ0dWFsZWFydGgubmV0L1JFU1QvdjEvTG9jYXRpb25zJywge1xuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeTogc2VhcmNoLFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdBaTU4NTgxeUMtU3I3bWNGYllUdFVrUzNpeEU3ZjZadUpuYkZKQ1ZJNGhBdFcxWG9ERWVaeWlkUXoyZ0xDQ3lEJyxcbiAgICAgICAgICAgICAgICAgICAgJ2pzb25wJzogJ0pTT05fQ0FMTEJBQ0snLFxuICAgICAgICAgICAgICAgICAgICAnaW5jbHVkZSc6ICdjaXNvMidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEZWYocmVzcG9uc2UuZGF0YS5yZXNvdXJjZVNldHMpICYmIHJlc3BvbnNlLmRhdGEucmVzb3VyY2VTZXRzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXNvdXJjZVNldHNbMF0ucmVzb3VyY2VzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnRvZ2dsZUNhdGVnb3J5ID0gZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmVkaXRFbnRpdHkuY2F0ZWdvcmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZWRpdEVudGl0eS5jYXRlZ29yaWVzLnB1c2goY2F0ZWdvcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjYXRlZ29yeUluZGV4IGluICRzY29wZS5lZGl0RW50aXR5LmNhdGVnb3JpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUuZWRpdEVudGl0eS5jYXRlZ29yaWVzLmhhc093blByb3BlcnR5KGNhdGVnb3J5SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgZW50aXR5Q2F0ZWdvcnkgPSAkc2NvcGUuZWRpdEVudGl0eS5jYXRlZ29yaWVzW2NhdGVnb3J5SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50aXR5Q2F0ZWdvcnkuaWQgPT09IGNhdGVnb3J5LmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHlDYXRlZ29yeS5lbmFibGVkID0gY2F0ZWdvcnkuZW5hYmxlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVkaXRFbnRpdHkuY2F0ZWdvcmllcy5wdXNoKGNhdGVnb3J5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNldExvY2F0aW9uID0gZnVuY3Rpb24gKGxvY2F0aW9uLCBpc0xhc3QpIHtcbiAgICAgICAgICAgICRzY29wZS5hZGRyZXNzU2VhcmNoKGxvY2F0aW9uLmZvcm1hdHRlZEFkZHJlc3MpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGFwaUNhbGxSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGFwaUNhbGxSZXN1bHRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzID0gcmVzdWx0LmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludCA9IHJlc3VsdC5wb2ludDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZExvY2F0aW9uKGlzTGFzdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2VzIEFQSSBjYWxsIHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5hZGRyZXNzX2xpbmUgPSBpc0RlZihhZGRyZXNzLmFkZHJlc3NMaW5lKSA/IGFkZHJlc3MuYWRkcmVzc0xpbmUgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ubG9jYWxpdHkgPSBpc0RlZihhZGRyZXNzLmxvY2FsaXR5KSA/IGFkZHJlc3MubG9jYWxpdHkgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uZGlzdHJpY3QgPVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEZWYoYWRkcmVzcy5hZG1pbkRpc3RyaWN0KSA/IGFkZHJlc3MuYWRtaW5EaXN0cmljdCA6ICcnO1xuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5jb3VudHJ5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRGVmKGFkZHJlc3MuY291bnRyeVJlZ2lvbikgPyBhZGRyZXNzLmNvdW50cnlSZWdpb24gOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5jb3VudHJ5X2NvZGUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEZWYoYWRkcmVzcy5jb3VudHJ5UmVnaW9uSXNvMikgPyBhZGRyZXNzLmNvdW50cnlSZWdpb25Jc28yIDogJyc7XG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmNvb3JkaW5hdGVzID0gaXNEZWYocG9pbnQuY29vcmRpbmF0ZXMpID8gcG9pbnQuY29vcmRpbmF0ZXMgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5wb3N0YWxfY29kZSA9IGlzRGVmKGFkZHJlc3MucG9zdGFsQ29kZSkgPyBhZGRyZXNzLnBvc3RhbENvZGUgOiBudWxsO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5hZGRMb2NhdGlvbiA9IGZ1bmN0aW9uIChpc0xhc3QpIHtcbiAgICAgICAgICAgIGlmIChpc0xhc3QpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZWRpdEVudGl0eS5sb2NhdGlvbnMucHVzaChsb2NhdGlvblNlcnZpY2UuZ2V0TG9jYXRpb25Nb2RlbCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuYWRkS2V5UGVyc29uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQWRkIGJsYW5rIGZpZWxkIHRvIGVkaXQgaWYgdGhlcmUgYXJlIG5vbmUuXG4gICAgICAgICAgICAvLyBXQVRDSCBPVVQhIFRPRE86IElmIHNvbWVvbmUgZGVsZXRlcyBhbiBvbGQgcGVyc29uLCBkZWxldGUgdGhlaXIgaWQgdG9vLlxuICAgICAgICAgICAgLy8gaS5lLiBtYWtlIHN1cmUgb2xkL2NsZWFyZWQgZm9ybSBmaWVsZHMgYXJlbid0IGJlaW5nIGVkaXRlZCBpbnRvIG5ldyBwZW9wbGUuXG4gICAgICAgICAgICBpZiAoIShfLnNvbWUoJHNjb3BlLmVkaXRFbnRpdHkua2V5X3Blb3BsZSwgeyduYW1lJzogJycsICdpZCc6IG51bGx9KSkpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZWRpdEVudGl0eS5rZXlfcGVvcGxlLnB1c2goeyduYW1lJzogJycsICdpZCc6IG51bGx9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuc2V0RnVuZGluZ0Nvbm5lY3Rpb24gPSBmdW5jdGlvbiAoZW50aXR5LCBmdW5kaW5nKSB7XG4gICAgICAgICAgICAvLyBBZGQgb3RoZXIgZW50aXR5J3MgaWQgdG8gdGhpcyBmaW5hbmNlIGNvbm5lY3Rpb24uXG4gICAgICAgICAgICBmdW5kaW5nLmVudGl0eV9pZCA9IGVudGl0eS5pZDtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuYWRkRnVuZGluZ0Nvbm5lY3Rpb24gPSBmdW5jdGlvbiAoZnVuZGluZykge1xuICAgICAgICAgICAgaWYgKCFfLnNvbWUoZnVuZGluZywgeydlbnRpdHknOiAnJ30pKSB7XG4gICAgICAgICAgICAgICAgLy8gTWF5YmUgc2V0IGFtb3VudCB0byAwIGluc3RlYWQgb2YgbnVsbD9cbiAgICAgICAgICAgICAgICBmdW5kaW5nLnB1c2goeydlbnRpdHknOiAnJywgJ2Ftb3VudCc6IG51bGwsICd5ZWFyJzogbnVsbCwgJ2lkJzogbnVsbH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zZXRDb25uZWN0aW9uID0gZnVuY3Rpb24gKGVudGl0eSwgY29ubmVjdGlvbikge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5lbnRpdHlfaWQgPSBlbnRpdHkuaWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmFkZENvbm5lY3Rpb24gPSBmdW5jdGlvbiAoY29ubmVjdGlvbnMpIHtcbiAgICAgICAgICAgIC8vIEFkZCBhbiBlbXB0eSBjb25uZWN0aW9uIHRvIGVkaXQgaWYgbm9uZSBleGlzdC5cbiAgICAgICAgICAgIGlmICghXy5zb21lKGNvbm5lY3Rpb25zLCB7J2VudGl0eSc6ICcnLCAnaWQnOiBudWxsfSkpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9ucy5wdXNoKHsnZW50aXR5JzogJycsICdpZCc6IG51bGwsICdkZXRhaWxzJzogbnVsbH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5hZGRGaW5hbmNlID0gZnVuY3Rpb24gKHJlY29yZHMpIHtcbiAgICAgICAgICAgIC8vIEFkZCBuZXcgZmluYW5jZSBmaWVsZCBpZiBhbGwgY3VycmVudCBmaWVsZHMgYXJlIHZhbGlkLlxuICAgICAgICAgICAgaWYgKF8uZXZlcnkocmVjb3JkcywgZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuYW1vdW50ID4gMCAmJiByLnllYXIgPiAxNzUwO1xuICAgICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKHsnYW1vdW50JzogbnVsbCwgJ3llYXInOiBudWxsLCAnaWQnOiBudWxsfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuaXNTYXZpbmcgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLmVkaXRFbnRpdHkuZ2VuZXJhdGVEQk1vZGVsKCkpO1xuXG4gICAgICAgICAgICAkaHR0cC5wb3N0KGNvbmZpZy5hcGlIb3N0ICsgJ2FwaS9zYXZlJywgeydlbnRpdHknOiAkc2NvcGUuZWRpdEVudGl0eS5nZW5lcmF0ZURCTW9kZWwoKX0pXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1NhdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoXCJlZGl0RW50aXR5U3VjY2Vzc1wiLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdG8gaG9tZUN0cmwncyBwYXJlbnQgc3RvcEVkaXQoKSB0byBjaGFuZ2UgdmlldyBiYWNrIGFuZCBhbnkgb3RoZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGlnaC1sZXZlbCBjaGFuZ2VzLlxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuY2VsRWRpdCgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuY2FuY2VsRWRpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdlbnRpdHknLCBmdW5jdGlvbiAobmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmVxdWFscyhuZXdWYWwsIG9sZFZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5lbnRpdHkpO1xuXG4gICAgICAgICAgICAkc2NvcGUuZWRpdEVudGl0eSA9IGVudGl0eVNlcnZpY2UuZ2V0RW50aXR5TW9kZWwobmV3VmFsKTtcbiAgICAgICAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gYW5ndWxhci5jb3B5KGNhdGVnb3J5QmFja3VwKTtcblxuICAgICAgICAgICAgaW5pdENhdGVnb3J5QXJyYXkoKTtcblxuICAgICAgICAgICAgJHNjb3BlLmlzRWRpdGluZyA9IGlzRGVmKCRzY29wZS5lZGl0RW50aXR5LmlkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaXRpYWxpemVzIGNhdGVnb3J5IGZpZWxkcyB3aXRoIGVudGl0eSB2YWx1ZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIExvb3BzIHRocm91Z2ggY2F0ZWdvcnkgaW4gY2F0ZWdvcmllcyBhbmQgbG9vcHMgdGhyb3VnaCBjYXRlZ29yeSBpbiBlbnRpdHkuIElkZW50aWZpZXNcbiAgICAgICAgICogY2F0ZWdvcmllcyBlbmFibGVkIGluIHRoZSBlbnRpdHkgYW5kIHNldHMgbG9jYWwgZGlzcGxheSBkYXRhLiBUaGlzIGlzIGJlY2F1c2Ugd2UgY3JlYXRlZFxuICAgICAgICAgKiBhIGJhY2t1cCBvZiBlbnRpdHkgZGF0YSBzbyB0aGF0IHRoZSBhcGkgZGF0YSBpcyBub3QgdGFtcGVyZWQgd2l0aCBkaXJlY3RseS5cbiAgICAgICAgICpcbiAgICAgICAgICogVE9ETzogcmVwbGFjZSB3aXRoIGJldHRlciBkYXRhIHN0cnVjdHVyZSBmb3IgY2F0ZWdvcmllcy5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGluaXRDYXRlZ29yeUFycmF5KCkge1xuICAgICAgICAgICAgdmFyIGNhdGVnb3J5LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5SW5kZXgsXG4gICAgICAgICAgICAgICAgZW50aXR5Q2F0ZWdvcnlJbmRleCxcbiAgICAgICAgICAgICAgICBlbnRpdHlDYXRlZ29yeTtcblxuICAgICAgICAgICAgZm9yIChjYXRlZ29yeUluZGV4IGluICRzY29wZS5jYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUuY2F0ZWdvcmllcy5oYXNPd25Qcm9wZXJ0eShjYXRlZ29yeUluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnkgPSAkc2NvcGUuY2F0ZWdvcmllc1tjYXRlZ29yeUluZGV4XTtcbiAgICAgICAgICAgICAgICBmb3IgKGVudGl0eUNhdGVnb3J5SW5kZXggaW4gJHNjb3BlLmVkaXRFbnRpdHkuY2F0ZWdvcmllcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5lZGl0RW50aXR5LmNhdGVnb3JpZXMuaGFzT3duUHJvcGVydHkoZW50aXR5Q2F0ZWdvcnlJbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVudGl0eUNhdGVnb3J5ID0gJHNjb3BlLmVkaXRFbnRpdHkuY2F0ZWdvcmllc1tlbnRpdHlDYXRlZ29yeUluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhdGVnb3J5LmlkID09PSBlbnRpdHlDYXRlZ29yeS5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkuZW5hYmxlZCA9IGVudGl0eUNhdGVnb3J5LmVuYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXRyaWV2ZSBDYXRlZ29yaWVzIGZyb20gREJcbiAgICAgICAgJGh0dHAuZ2V0KGNvbmZpZy5hcGlIb3N0ICsgJ2FwaS9jYXRlZ29yaWVzJylcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlCYWNrdXAgPSBkYXRhLmNhdGVnb3JpZXM7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlcyBiYWNrdXAgb2YgZGF0YSB1c2luZyBBbmd1bGFyIHRvIHByZXZlbnQgYXBpIGRhdGEgZnJvbSBiZWluZyB0YW1wZXJlZFxuICAgICAgICAgICAgICAgIC8vIGRpcmVjdGx5XG4gICAgICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3JpZXMgPSBhbmd1bGFyLmNvcHkoY2F0ZWdvcnlCYWNrdXApO1xuICAgICAgICAgICAgICAgIC8vICRzY29wZS5jYXRlZ29yaWVzID0gZGF0YS5jYXRlZ29yaWVzO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ2VkaXRDdHJsJywgZWRpdENvbnRyb2xsZXJEZXBzKTtcblxufSkoYW5ndWxhcik7XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgYnJpYW5hdmVjY2hpb25lIG9uIDYvMjgvMTYuXG4gKi9cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgY2F0ZWdvcnlTZXJ2aWNlRGVwZW5kZW5jaWVzID0gW1xuICAgICAgICBDYXRlZ29yeVNlcnZpY2VcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gQ2F0ZWdvcnlTZXJ2aWNlKCkge1xuXG4gICAgICAgIGZ1bmN0aW9uIGlzRGVmKG8pIHsgcmV0dXJuIG8gIT09IHVuZGVmaW5lZCAmJiBvICE9PSBudWxsOyB9XG5cbiAgICAgICAgZnVuY3Rpb24gQ2F0ZWdvcnkob2JqKSB7XG4gICAgICAgICAgICB2YXIgZGVmT2JqID0gaXNEZWYob2JqKSA/IG9iaiA6IHt9O1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gKGlzRGVmKGRlZk9iai5uYW1lKSA/IGRlZk9iai5uYW1lIDogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZWQgPSAoaXNEZWYoZGVmT2JqLmVuYWJsZSkgPyBkZWZPYmouZW5hYmxlZCA6IHRydWUpO1xuICAgICAgICAgICAgdGhpcy5pZCA9IChpc0RlZihkZWZPYmouaWQpID8gZGVmT2JqLmlkIDogbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdldENhdGVnb3J5TW9kZWwgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2F0ZWdvcnkob2JqKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuc2VydmljZSgnY2F0ZWdvcnlTZXJ2aWNlJywgY2F0ZWdvcnlTZXJ2aWNlRGVwZW5kZW5jaWVzKTtcblxufSkoYW5ndWxhcik7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGJyaWFuYXZlY2NoaW9uZSBvbiA2LzI3LzE2LlxuICovXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBjb25uZWN0aW9uU2VydmljZSA9IFtDb25uZWN0aW9uc107XG4gICAgdmFyIGNvbm5lY3Rpb25UeXBlcyA9IHtcbiAgICAgICAgJ0Z1bmRpbmcnOiB0cnVlLFxuICAgICAgICAnRGF0YSc6IHRydWUsXG4gICAgICAgICdFbXBsb3ltZW50JzogdHJ1ZSxcbiAgICAgICAgJ0NvbGxhYm9yYXRpb24nOiB0cnVlXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzRGVmKG8pIHtcbiAgICAgICAgcmV0dXJuIG8gIT09IHVuZGVmaW5lZCAmJiBvICE9PSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb25zKCkge1xuICAgICAgICBmdW5jdGlvbiBDb25uZWN0aW9uKG9iaikge1xuICAgICAgICAgICAgdmFyIG9iaklzRGVmID0gaXNEZWYob2JqKTtcbiAgICAgICAgICAgIHRoaXMuZW50aXR5ID0gKG9iaklzRGVmICYmIGlzRGVmKG9iai5lbnRpdHkpID8gb2JqLmVudGl0eSA6IG51bGwpO1xuICAgICAgICAgICAgdGhpcy5pZCA9IChvYmpJc0RlZiAmJiBpc0RlZihvYmouaWQpID8gb2JqLmlkIDogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLmRldGFpbHMgPSAob2JqSXNEZWYgJiYgaXNEZWYob2JqLmRldGFpbHMpID8gb2JqLmRldGFpbHMgOiBudWxsKTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IChvYmpJc0RlZiAmJiBpc0RlZihvYmoubmFtZSkgPyBvYmoubmFtZTogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLmVudGl0eV9pZCA9IChvYmpJc0RlZiAmJiBpc0RlZihvYmouZW50aXR5X2lkKSA/IG9iai5lbnRpdHlfaWQ6IG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nZXRDb25uZWN0aW9uTW9kZWwgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbm5lY3Rpb24ob2JqKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldENvbm5lY3Rpb25UeXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uVHlwZXM7XG4gICAgICAgIH07XG4gICAgfVxuXG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuc2VydmljZSgnY29ubmVjdGlvblNlcnZpY2UnLCBjb25uZWN0aW9uU2VydmljZSk7XG5cbn0pKGFuZ3VsYXIpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBicmlhbmF2ZWNjaGlvbmUgb24gNi8yNy8xNi5cbiAqL1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBlbnRpdHlTZXJ2aWNlRGVwZW5kZW5jaWVzID0gW1xuICAgICAgICAnZnVuZGluZ0Nvbm5lY3Rpb25TZXJ2aWNlJyxcbiAgICAgICAgJ2Nvbm5lY3Rpb25TZXJ2aWNlJyxcbiAgICAgICAgJ2ZpbmFuY2VTZXJ2aWNlJyxcbiAgICAgICAgJ2xvY2F0aW9uU2VydmljZScsXG4gICAgICAgICdjYXRlZ29yeVNlcnZpY2UnLFxuICAgICAgICBFbnRpdHlTZXJ2aWNlXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIEVudGl0eVNlcnZpY2UoZnVuZGluZ0Nvbm5lY3Rpb25TZXJ2aWNlLCBjb25uZWN0aW9uU2VydmljZSwgZmluYW5jZVNlcnZpY2UsIGxvY2F0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5U2VydmljZVxuICAgICkge1xuXG4gICAgICAgIHZhciBlbnRpdHlUeXBlcyA9IHtcbiAgICAgICAgICAgICdHb3Zlcm5tZW50JzogdHJ1ZSxcbiAgICAgICAgICAgICdGb3ItUHJvZml0JzogdHJ1ZSxcbiAgICAgICAgICAgICdOb24tUHJvZml0JzogdHJ1ZSxcbiAgICAgICAgICAgICdJbmRpdmlkdWFsJzogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpbmZsdWVuY2VUeXBlcyA9IFtcbiAgICAgICAgICAgICdMb2NhbCcsXG4gICAgICAgICAgICAnTmF0aW9uYWwnLFxuICAgICAgICAgICAgJ0dsb2JhbCdcbiAgICAgICAgXTtcblxuICAgICAgICBmdW5jdGlvbiBpc0RlZihvKSB7XG4gICAgICAgICAgICByZXR1cm4gbyAhPT0gdW5kZWZpbmVkICYmIG8gIT09IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsb29wQW5kSW5pdChtb2RlbEFycmF5LCBpbml0TW9kZWxGdW5jdGlvbikge1xuICAgICAgICAgICAgaWYoICEoIGlzRGVmKG1vZGVsQXJyYXkpIHx8IGFuZ3VsYXIuaXNBcnJheShtb2RlbEFycmF5KSApICkgcmV0dXJuIFtpbml0TW9kZWxGdW5jdGlvbigpXTtcbiAgICAgICAgICAgIHZhciBhcnJheUluZGV4LFxuICAgICAgICAgICAgICAgIGFycmF5VmFsdWUsXG4gICAgICAgICAgICAgICAgbmV3TW9kZWxBcnJheSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKCBhcnJheUluZGV4IGluIG1vZGVsQXJyYXkgKSB7XG4gICAgICAgICAgICAgICAgaWYoIW1vZGVsQXJyYXkuaGFzT3duUHJvcGVydHkoYXJyYXlJbmRleCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGFycmF5VmFsdWUgPSBtb2RlbEFycmF5W2FycmF5SW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgaWYoIWFuZ3VsYXIuaXNPYmplY3QoYXJyYXlWYWx1ZSkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgbmV3TW9kZWxBcnJheS5wdXNoKGluaXRNb2RlbEZ1bmN0aW9uKGFycmF5VmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld01vZGVsQXJyYXkucHVzaChpbml0TW9kZWxGdW5jdGlvbigpKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ld01vZGVsQXJyYXk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBFbnRpdHkob2JqKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZGVmT2JqID0gaXNEZWYob2JqKSA/IG9iaiA6IHt9O1xuICAgICAgICAgICAgLy8gVE9ETzogRG8gYSBsb29wIHRvIGdlbmVyYXRlIHRoZXNlIGxvY2F0aW9ucyBhcyBtb2RlbHMsIGluIG9yZGVyIHRvIHVzZSB0aGUgZnVuY3Rpb25zIGluIG1vZGVsXG4gICAgICAgICAgICAvLyB0aGlzLmxvY2F0aW9ucyA9IChpc0RlZihkZWZPYmoubG9jYXRpb25zKSA/IGRlZk9iai5sb2NhdGlvbnMgOiBbbG9jYXRpb25TZXJ2aWNlLmdldExvY2F0aW9uTW9kZWwoKV0pO1xuICAgICAgICAgICAgLy8gVE9ETzogRG8gdGhpcyBmb3IgZXZlcnkgYXJyYXkgaW4gdGhpcyBtb2RlbFxuICAgICAgICAgICAgdGhpcy5pZCA9IChpc0RlZihkZWZPYmouaWQpID8gZGVmT2JqLmlkIDogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSAoaXNEZWYoZGVmT2JqLm5hbWUpID8gZGVmT2JqLm5hbWUgOiBudWxsKTtcbiAgICAgICAgICAgIHRoaXMubG9jYXRpb25zID0gbG9vcEFuZEluaXQoZGVmT2JqLmxvY2F0aW9ucywgbG9jYXRpb25TZXJ2aWNlLmdldExvY2F0aW9uTW9kZWwpO1xuICAgICAgICAgICAgdGhpcy5pbmZsdWVuY2UgPSAoaXNEZWYoZGVmT2JqLmluZmx1ZW5jZSkgPyBkZWZPYmouaW5mbHVlbmNlIDogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLmdyYW50c19yZWNlaXZlZCA9IGxvb3BBbmRJbml0KGRlZk9iai5ncmFudHNfcmVjZWl2ZWQsIGZ1bmRpbmdDb25uZWN0aW9uU2VydmljZS5nZXRGdW5kaW5nQ29ubmVjdGlvbk1vZGVsKTtcbiAgICAgICAgICAgIHRoaXMuaW52ZXN0bWVudHNfcmVjZWl2ZWQgPSBsb29wQW5kSW5pdChkZWZPYmouaW52ZXN0bWVudHNfcmVjZWl2ZWQsIGZ1bmRpbmdDb25uZWN0aW9uU2VydmljZS5nZXRGdW5kaW5nQ29ubmVjdGlvbk1vZGVsKTtcbiAgICAgICAgICAgIHRoaXMuZ3JhbnRzX2dpdmVuID0gbG9vcEFuZEluaXQoZGVmT2JqLmdyYW50c19naXZlbiwgZnVuZGluZ0Nvbm5lY3Rpb25TZXJ2aWNlLmdldEZ1bmRpbmdDb25uZWN0aW9uTW9kZWwpO1xuICAgICAgICAgICAgdGhpcy5pbnZlc3RtZW50c19tYWRlID0gbG9vcEFuZEluaXQoZGVmT2JqLmludmVzdG1lbnRzX21hZGUsIGZ1bmRpbmdDb25uZWN0aW9uU2VydmljZS5nZXRGdW5kaW5nQ29ubmVjdGlvbk1vZGVsKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YV9naXZlbiA9IGxvb3BBbmRJbml0KGRlZk9iai5kYXRhX2dpdmVuLCBjb25uZWN0aW9uU2VydmljZS5nZXRDb25uZWN0aW9uTW9kZWwpO1xuICAgICAgICAgICAgdGhpcy5kYXRhX3JlY2VpdmVkID0gbG9vcEFuZEluaXQoZGVmT2JqLmRhdGFfcmVjZWl2ZWQsIGNvbm5lY3Rpb25TZXJ2aWNlLmdldENvbm5lY3Rpb25Nb2RlbCk7XG4gICAgICAgICAgICB0aGlzLmNvbGxhYm9yYXRpb25zID0gbG9vcEFuZEluaXQoZGVmT2JqLmNvbGxhYm9yYXRpb25zLCBjb25uZWN0aW9uU2VydmljZS5nZXRDb25uZWN0aW9uTW9kZWwpO1xuICAgICAgICAgICAgdGhpcy5rZXlfcGVvcGxlID0gbG9vcEFuZEluaXQoZGVmT2JqLmtleV9wZW9wbGUsIGNvbm5lY3Rpb25TZXJ2aWNlLmdldENvbm5lY3Rpb25Nb2RlbCk7XG4gICAgICAgICAgICB0aGlzLmVtcGxveW1lbnRzID0gbG9vcEFuZEluaXQoZGVmT2JqLmVtcGxveW1lbnRzLCBjb25uZWN0aW9uU2VydmljZS5nZXRDb25uZWN0aW9uTW9kZWwpO1xuICAgICAgICAgICAgdGhpcy5yZXZlbnVlcyA9IGxvb3BBbmRJbml0KGRlZk9iai5yZXZlbnVlcywgZmluYW5jZVNlcnZpY2UuZ2V0RmluYW5jZU1vZGVsKTtcbiAgICAgICAgICAgIHRoaXMuZXhwZW5zZXMgPSBsb29wQW5kSW5pdChkZWZPYmouZXhwZW5zZXMsIGZpbmFuY2VTZXJ2aWNlLmdldEZpbmFuY2VNb2RlbCk7XG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpZXMgPSBsb29wQW5kSW5pdChkZWZPYmouY2F0ZWdvcmllcywgY2F0ZWdvcnlTZXJ2aWNlLmdldENhdGVnb3J5TW9kZWwpO1xuICAgICAgICAgICAgdGhpcy50eXBlID0gKGlzRGVmKGRlZk9iai50eXBlKSA/IGRlZk9iai50eXBlIDogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLm5pY2tuYW1lID0gKGlzRGVmKGRlZk9iai5uaWNrbmFtZSkgPyBkZWZPYmoubmlja25hbWUgOiBudWxsKTtcbiAgICAgICAgICAgIHRoaXMudXJsID0gKGlzRGVmKGRlZk9iai51cmwpID8gZGVmT2JqLnVybCA6IG51bGwpO1xuICAgICAgICAgICAgdGhpcy50d2l0dGVyX2hhbmRsZSA9IChpc0RlZihkZWZPYmoudHdpdHRlcl9oYW5kbGUpID8gZGVmT2JqLnR3aXR0ZXJfaGFuZGxlIDogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLmVtcGxveWVlcyA9IChpc0RlZihkZWZPYmouZW1wbG95ZWVzKSA/IGRlZk9iai5lbXBsb3llZXMgOiBudWxsKTtcbiAgICAgICAgICAgIC8vIHRoaXMucmVsYXRpb25zID0gbG9vcEFuZEluaXQoZGVmT2JqLnJlbGF0aW9ucywgY29ubmVjdGlvblNlcnZpY2UuZ2V0Q29ubmVjdGlvbk1vZGVsKTtcblxuXG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRlREJNb2RlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBkYk1vZGVsID0gbmV3IEVudGl0eShzZWxmKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmxvY2F0aW9ucy5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmxvY2F0aW9ucy5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmdyYW50c19yZWNlaXZlZC5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmdyYW50c19yZWNlaXZlZC5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmdyYW50c19naXZlbi5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmdyYW50c19naXZlbi5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmludmVzdG1lbnRzX3JlY2VpdmVkLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuaW52ZXN0bWVudHNfcmVjZWl2ZWQucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5pbnZlc3RtZW50c19tYWRlLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuaW52ZXN0bWVudHNfbWFkZS5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmRhdGFfZ2l2ZW4ucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5kYXRhX2dpdmVuLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuZGF0YV9yZWNlaXZlZC5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmRhdGFfcmVjZWl2ZWQucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5jb2xsYWJvcmF0aW9ucy5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmNvbGxhYm9yYXRpb25zLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwua2V5X3Blb3BsZS5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmtleV9wZW9wbGUucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5lbXBsb3ltZW50cy5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmVtcGxveW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwucmV2ZW51ZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5yZXZlbnVlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmV4cGVuc2VzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuZXhwZW5zZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgZGJNb2RlbC5jYXRlZ29yaWVzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRiTW9kZWwuY2F0ZWdvcmllcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBkYk1vZGVsLmRlc2NyaXB0aW9uID0gJyc7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGJNb2RlbCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGJNb2RlbDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2V0RW50aXR5TW9kZWwgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVudGl0eShvYmopO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZ2V0RW50aXR5VHlwZXMgPSBmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgIHJldHVybiBlbnRpdHlUeXBlcztcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldEluZmx1ZW5jZVR5cGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGluZmx1ZW5jZVR5cGVzO1xuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgLnNlcnZpY2UoJ2VudGl0eVNlcnZpY2UnLCBlbnRpdHlTZXJ2aWNlRGVwZW5kZW5jaWVzKTtcblxuXG59KShhbmd1bGFyKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSBicmlhbmF2ZWNjaGlvbmUgb24gNi8yNy8xNi5cbiAqL1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBmaW5hbmNlU2VydmljZSA9IFtGaW5hbmNlU2VydmljZV07XG5cbiAgICBmdW5jdGlvbiBpc0RlZihvKSB7XG4gICAgICAgIHJldHVybiBvICE9PSB1bmRlZmluZWQgJiYgbyAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBGaW5hbmNlU2VydmljZSgpIHtcbiAgICAgICAgZnVuY3Rpb24gRmluYW5jZShvYmopIHtcbiAgICAgICAgICAgIHZhciBkZWZPYmogPSBpc0RlZihvYmopID8gb2JqIDoge307XG4gICAgICAgICAgICB0aGlzLmFtb3VudCA9IChpc0RlZihkZWZPYmouYW1vdW50KSAmJiBkZWZPYmouYW1vdW50ID49IDAgPyBkZWZPYmouYW1vdW50IDogMCk7XG4gICAgICAgICAgICB0aGlzLnllYXIgPSAoaXNEZWYoZGVmT2JqLnllYXIpICYmIGRlZk9iai55ZWFyID49IDE3NTAgPyBkZWZPYmoueWVhciA6IG51bGwpO1xuICAgICAgICAgICAgdGhpcy5pZCA9IChpc0RlZihkZWZPYmouaWQpID8gZGVmT2JqLmlkIDogbnVsbCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2V0RmluYW5jZU1vZGVsID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGaW5hbmNlKG9iaik7XG4gICAgICAgIH07XG4gICAgfVxuXG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuc2VydmljZSgnZmluYW5jZVNlcnZpY2UnLCBmaW5hbmNlU2VydmljZSk7XG5cbn0pKGFuZ3VsYXIpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBicmlhbmF2ZWNjaGlvbmUgb24gNi8yNy8xNi5cbiAqL1xuXG4oZnVuY3Rpb24oYW5ndWxhcil7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgZnVuZGluZ0Nvbm5lY3Rpb25TZXJ2aWNlRGVwZW5kZW5jaWVzID0gW0Z1bmRpbmdDb25uZWN0aW9uc107XG5cbiAgICBmdW5jdGlvbiBpc0RlZihvKSB7IHJldHVybiBvICE9PSB1bmRlZmluZWQgJiYgbyAhPT0gbnVsbDsgfVxuXG4gICAgZnVuY3Rpb24gRnVuZGluZ0Nvbm5lY3Rpb25zKCkge1xuICAgICAgICBmdW5jdGlvbiBGdW5kaW5nQ29ubmVjdGlvbihvYmopIHtcbiAgICAgICAgICAgIHZhciBvYmpJc0RlZiA9IGlzRGVmKG9iaik7XG4gICAgICAgICAgICB0aGlzLmVudGl0eSA9IChvYmpJc0RlZiAmJiBpc0RlZihvYmouZW50aXR5KSA/IG9iai5lbnRpdHkgOiAnJyk7XG4gICAgICAgICAgICB0aGlzLmFtb3VudCA9IChvYmpJc0RlZiAmJiBpc0RlZihvYmouYW1vdW50KSA/IG9iai5hbW91bnQ6IG51bGwpO1xuICAgICAgICAgICAgdGhpcy55ZWFyID0gKG9iaklzRGVmICYmIGlzRGVmKG9iai55ZWFyKSA/IG9iai55ZWFyIDogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLmlkID0gKG9iaklzRGVmICYmIGlzRGVmKG9iai5pZCkgPyBvYmouaWQgOiBudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2V0RnVuZGluZ0Nvbm5lY3Rpb25Nb2RlbCA9IGZ1bmN0aW9uKG9iail7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZ1bmRpbmdDb25uZWN0aW9uKG9iaik7XG4gICAgICAgIH07XG5cblxuXG4gICAgfVxuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2NpdmljLWdyYXBoJylcbiAgICAgICAgLnNlcnZpY2UoJ2Z1bmRpbmdDb25uZWN0aW9uU2VydmljZScsIGZ1bmRpbmdDb25uZWN0aW9uU2VydmljZURlcGVuZGVuY2llcyk7XG5cblxuXG59KShhbmd1bGFyKTtcbiIsIi8qKlxuICogQ3JlYXRlZCBieSBicmlhbmF2ZWNjaGlvbmUgb24gNi8yNy8xNi5cbiAqL1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBsb2NhdGlvblNlcnZpY2VEZXBlbmRlbmNpZXMgPSBbTG9jYXRpb25TZXJ2aWNlXTtcblxuXG5cbiAgICBmdW5jdGlvbiBMb2NhdGlvblNlcnZpY2UoKXtcblxuICAgICAgICBmdW5jdGlvbiBpc0RlZihvKSB7XG4gICAgICAgICAgICByZXR1cm4gbyAhPT0gdW5kZWZpbmVkICYmIG8gIT09IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBMb2NhdGlvbihvYmopIHtcbiAgICAgICAgICAgIHZhciBkZWZPYmogPSBpc0RlZihvYmopID8gb2JqIDoge307XG4gICAgICAgICAgICB0aGlzLmFkZHJlc3NfbGluZSA9IChpc0RlZihkZWZPYmouYWRkcmVzc19saW5lKSA/IGRlZk9iai5hZGRyZXNzX2xpbmUgOiBudWxsKTtcbiAgICAgICAgICAgIHRoaXMubG9jYWxpdHkgPSAoaXNEZWYoZGVmT2JqLmxvY2FsaXR5KSA/IGRlZk9iai5sb2NhbGl0eSA6IG51bGwpO1xuICAgICAgICAgICAgdGhpcy5kaXN0cmljdCA9IChpc0RlZihkZWZPYmouZGlzdHJpY3QpID8gZGVmT2JqLmRpc3RyaWN0IDogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLnBvc3RhbF9jb2RlID0gKGlzRGVmKGRlZk9iai5wb3N0YWxfY29kZSkgPyBkZWZPYmoucG9zdGFsX2NvZGUgOiBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuY291bnRyeSA9IChpc0RlZihkZWZPYmouY291bnRyeSkgPyBkZWZPYmouY291bnRyeSA6IG51bGwpO1xuICAgICAgICAgICAgdGhpcy5jb3VudHJ5X2NvZGUgPSAoaXNEZWYoZGVmT2JqLmNvdW50cnlfY29kZSkgPyBkZWZPYmouY291bnRyeV9jb2RlIDogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLmNvb3JkaW5hdGVzID0gKGlzRGVmKGRlZk9iai5jb29yZGluYXRlcykgPyBkZWZPYmouY29vcmRpbmF0ZXMgOiBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuaWQgPSAoaXNEZWYoZGVmT2JqLmlkKSA/IGRlZk9iai5pZCA6IG51bGwpO1xuICAgICAgICAgICAgdGhpcy5mb3JtYXR0ZWRBZGRyZXNzID0gKGlzRGVmKHRoaXMuYWRkcmVzc19saW5lKSA/IHRoaXMuYWRkcmVzc19saW5lICsgICcgJyA6ICcnKVxuICAgICAgICAgICAgICAgICsgKGlzRGVmKHRoaXMubG9jYWxpdHkpID8gdGhpcy5sb2NhbGl0eSArICcsICcgOiAnJylcbiAgICAgICAgICAgICAgICArIChpc0RlZih0aGlzLmNvdW50cnlfY29kZSkgPyB0aGlzLmNvdW50cnlfY29kZSArICcgJyA6ICcnKVxuICAgICAgICAgICAgICAgICsgKGlzRGVmKHRoaXMucG9zdGFsX2NvZGUpID8gdGhpcy5wb3N0YWxfY29kZSA6ICcnKTtcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0dGVkQWRkcmVzcyA9IHRoaXMuZm9ybWF0dGVkQWRkcmVzcy50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdldExvY2F0aW9uTW9kZWwgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTG9jYXRpb24ob2JqKTtcbiAgICAgICAgfTtcblxuICAgIH1cblxuXG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuc2VydmljZSgnbG9jYXRpb25TZXJ2aWNlJywgbG9jYXRpb25TZXJ2aWNlRGVwZW5kZW5jaWVzKTtcblxufSkoYW5ndWxhcik7IiwiKGZ1bmN0aW9uIChhbmd1bGFyLCBkMywgTCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBkZXBlbmRlbmNpZXMgPSBbXG4gICAgICAgICckc2NvcGUnLFxuICAgICAgICAnJHRpbWVvdXQnLFxuICAgICAgICAnbGVhZmxldERhdGEnLFxuICAgICAgICAnXycsXG4gICAgICAgICckZmlsdGVyJyxcbiAgICAgICAgbWFwQ3RybFxuICAgIF07XG5cbiAgICBmdW5jdGlvbiBtYXBDdHJsKCRzY29wZSwgJHRpbWVvdXQsIGxlYWZsZXREYXRhLCBfLCAkZmlsdGVyKSB7XG5cbiAgICAgICAgJHNjb3BlLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBjZW50ZXIgIDoge1xuICAgICAgICAgICAgICAgIGxhdCA6IDIwLjAwLFxuICAgICAgICAgICAgICAgIGxuZyA6IC00MC4wMCxcbiAgICAgICAgICAgICAgICB6b29tOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgICAgICAgICB0aWxlTGF5ZXIgICAgICAgICA6ICdodHRwczovL2FwaS50aWxlcy5tYXBib3guY29tL3Y0L21hcGJveC5saWdodC97en0ve3h9L3t5fS5wbmc/YWNjZXNzX3Rva2VuPXBrLmV5SjFJam9pWkdGMmFXUnNjbTUwSWl3aVlTSTZJakEwTTJSa056TXpaV0ptTnpFek5HWXpNVGRoWVRFeFl6QXlabVU0WlRFMUluMC5UTllsRnRhMlZJdHJrbjRMMFo5QkpRJyxcbiAgICAgICAgICAgICAgICB0aWxlTGF5ZXJPcHRpb25zICA6IHtcbiAgICAgICAgICAgICAgICAgICAgZGV0ZWN0UmV0aW5hOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICByZXVzZVRpbGVzICA6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6b29tQ29udHJvbCAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uQ29udHJvbDogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY3JlYXRlUGllQ2hhcnQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhICAgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgICAgICAgICAgdmFyIHBpZSAgICA9IGQzLmxheW91dC5waWUoKS5zb3J0KG51bGwpLnZhbHVlKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBhcmMgICAgPSBkMy5zdmcuYXJjKCkub3V0ZXJSYWRpdXMob3B0aW9ucy5yKS5pbm5lclJhZGl1cyhvcHRpb25zLnIgLSAxMCk7XG4gICAgICAgICAgICAgICAgdmFyIGNlbnRlciA9IG9wdGlvbnMuciArIG9wdGlvbnMuc3Ryb2tlV2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIHcgICAgICA9IGNlbnRlciAqIDI7XG4gICAgICAgICAgICAgICAgdmFyIGggICAgICA9IHc7XG4gICAgICAgICAgICAgICAgdmFyIHN2ZyAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhkMy5ucy5wcmVmaXguc3ZnLCAnc3ZnJyk7XG4gICAgICAgICAgICAgICAgdmFyIHZpcyAgICA9IGQzLnNlbGVjdChzdmcpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdwaWVjaGFydCcpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHcpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBoKTtcblxuICAgICAgICAgICAgICAgIHZhciBhcmNzID0gdmlzLnNlbGVjdEFsbCgnLmFyYycpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHBpZShkYXRhKSlcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKCdnJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2FyYycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBjZW50ZXIgKyAnLCcgKyBjZW50ZXIgKyAnKScpO1xuXG4gICAgICAgICAgICAgICAgLy8gdmFyIG1hcCA9IEwubWFwYm94Lm1hcCgnbWFwJywgJ2V4YW1wbGVzLm1hcC05aWp1azI0eScsIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgbWluWm9vbTogMSxcbiAgICAgICAgICAgICAgICAvLyAgICAgbWF4Wm9vbTogMlxuICAgICAgICAgICAgICAgIC8vIH0pLnNldFZpZXcoWzQwLCAtNzQuNTBdLCA5KTtcblxuICAgICAgICAgICAgICAgIGFyY3MuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBhcmMpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5kYXRhLnR5cGUgKyAnLWFyYyc7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgYXJjcy5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuICAgICAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIC00ICogb3B0aW9ucy5jb3VudC50b1N0cmluZygpLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCA1KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYXJjVGV4dFwiKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuWE1MU2VyaWFsaXplciA/IChuZXcgd2luZG93LlhNTFNlcmlhbGl6ZXIoKSkuc2VyaWFsaXplVG9TdHJpbmcoc3ZnKVxuICAgICAgICAgICAgICAgICAgICA6IHN2Zy54bWwgPyBzdmcueG1sIDogJyc7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uIChtYXApIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRFbnRpdGllcyA9ICRmaWx0ZXIoJ2ZpbHRlcicpKCRzY29wZS5lbnRpdGllcyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50aXR5LmNvbGxhYm9yYXRpb25zLmxlbmd0aCA+IDQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgbWFwLmludmFsaWRhdGVTaXplKCk7XG5cbiAgICAgICAgICAgICAgICBuZXcgTC5Db250cm9sLlpvb20oe3Bvc2l0aW9uOiAndG9wcmlnaHQnfSkuYWRkVG8obWFwKTtcbiAgICAgICAgICAgICAgICBMLmNvbnRyb2wubG9jYXRlKFxuICAgICAgICAgICAgICAgICAgICB7cG9zaXRpb246ICd0b3ByaWdodCcsIHNob3dQb3B1cDogZmFsc2UsIGljb246ICdmYSBmYS1sb2NhdGlvbi1hcnJvdyd9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVG8obWFwKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNsdXN0ZXJJY29uKGNsdXN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuICAgICAgID0gY2x1c3Rlci5nZXRBbGxDaGlsZE1hcmtlcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsICAgICAgICAgID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2x1c3Rlck1hcmtlcnMgPSBfLnBsdWNrKGNoaWxkcmVuLCAnb3B0aW9ucycpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRzICAgICAgICAgPSBfLm1hcChfLmNvdW50QnkoY2x1c3Rlck1hcmtlcnMsICd0eXBlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChjb3VudCwgdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsndHlwZSc6IHR5cGUsICd2YWx1ZSc6IGNvdW50fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByICAgICAgICAgICAgICA9IDI4O1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3Ryb2tlV2lkdGggICAgPSAxO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWNvbkRpbSAgICAgICAgPSAociArIHN0cm9rZVdpZHRoKSAqIDI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBodG1sICAgICAgICAgICA9IGNyZWF0ZVBpZUNoYXJ0KFxuICAgICAgICAgICAgICAgICAgICAgICAge2RhdGE6IGNvdW50cywgcjogciwgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLCBjb3VudDogdG90YWx9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMLkRpdkljb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCAgICAgOiBodG1sLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbWFya2VyLWNsdXN0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemUgOiBuZXcgTC5wb2ludChpY29uRGltLCBpY29uRGltKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG1hcmtlckljb24gID0ge1xuICAgICAgICAgICAgICAgICAgICAnTm9uLVByb2ZpdCc6IEwuaWNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uVXJsIDogJ2ltZy9tYXJrZXItbm9ucHJvZi5zdmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFs2MCwgNjBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAnRm9yLVByb2ZpdCc6IEwuaWNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uVXJsIDogJ2ltZy9tYXJrZXItcHJvZi5zdmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFs2MCwgNjBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAnSW5kaXZpZHVhbCc6IEwuaWNvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uVXJsIDogJ2ltZy9tYXJrZXItaW5kLnN2ZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzYwLCA2MF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICdHb3Zlcm5tZW50JzogTC5pY29uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25VcmwgOiAnaW1nL21hcmtlci1nb3Yuc3ZnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbNjAsIDYwXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgbWFya2VycyA9IEwubWFya2VyQ2x1c3Rlckdyb3VwKHtcblxuICAgICAgICAgICAgICAgICAgICBzcGlkZXJmeU9uTWF4Wm9vbTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2hvd0NvdmVyYWdlT25Ib3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGljb25DcmVhdGVGdW5jdGlvbjogY2x1c3Rlckljb24sXG4gICAgICAgICAgICAgICAgICAgIG1heENsdXN0ZXJSYWRpdXM6IDMwLFxuICAgICAgICAgICAgICAgICAgICBzcGlkZXJmeURpc3RhbmNlTXVsdGlwbGllcjogMS4zXG4gICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG91dGVyTG9vcChlbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5uZXJMb29wKGxvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfLmV2ZXJ5KGxvYy5jb29yZGluYXRlcykpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2MuY29vcmRpbmF0ZXNbMF0udG9GaXhlZCg1KSA9PT0gJzQwLjc4MjAwJyAmJiBsb2MuY29vcmRpbmF0ZXNbMV0udG9GaXhlZCg1KSA9PT0gJy03My44MzE3MCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2MuY29vcmRpbmF0ZXNbMF0gPSA0MC43NzA2NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2MuY29vcmRpbmF0ZXNbMV0gPSAtNzMuOTc0MDY7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IEwubWFya2VyKGxvYy5jb29yZGluYXRlcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG1hcmtlckljb25bZW50aXR5LnR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6IGVudGl0eS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbnRpdHlfaWQnOiBlbnRpdHkuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnOiBlbnRpdHkubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6IGVudGl0eS50eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcnMuYWRkTGF5ZXIobSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goZW50aXR5LmxvY2F0aW9ucywgaW5uZXJMb29wKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk9yaWdpbmFsOiAlT1wiLCAkc2NvcGUuZW50aXRpZXMpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRmlsdGVyZWQ6ICVPXCIsIGZpbHRlcmVkRW50aXRpZXMpO1xuXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKGZpbHRlcmVkRW50aXRpZXMsIG91dGVyTG9vcCk7XG4gICAgICAgICAgICAgICAgbWFwLmFkZExheWVyKG1hcmtlcnMpO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gb25Mb2NhdGlvbkVycm9yKGxlYWZsZXRFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGxlYWZsZXRFcnJvci5tZXNzYWdlICsgXCIgICVPXCIsIGxlYWZsZXRFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbWFwLm9uKCdsb2NhdGlvbmVycm9yJywgb25Mb2NhdGlvbkVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBtYXAubG9jYXRlKHtzZXRWaWV3OiB0cnVlLCBtYXhab29tOiAxMX0pO1xuICAgICAgICAgICAgICAgIG1hcmtlcnMub24oJ2NsaWNrJywgZnVuY3Rpb24gKG1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0RW50aXR5SUQobWFya2VyLmxheWVyLm9wdGlvbnMuZW50aXR5X2lkKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsaWNrZWRFbnRpdHkuZW50aXR5ID0gJHNjb3BlLmN1cnJlbnRFbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hY3Rpb25zLmludGVyYWN0ZWQgICA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2V0dGluZ3NFbmFibGVkICYmICRzY29wZS5tb2JpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b2dnbGVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zYWZlQXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG1hcC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jbGlja2VkRW50aXR5LmVudGl0eSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hY3Rpb25zLmludGVyYWN0ZWQgICA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zYWZlQXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKCdzZWxlY3RJdGVtJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmRpbmF0ZXMgPSAkc2NvcGUuY3VycmVudEVudGl0eS5sb2NhdGlvbnMubGVuZ3RoID4gMCA/IF8ucGx1Y2soXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudEVudGl0eS5sb2NhdGlvbnMsICdjb29yZGluYXRlcycpIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvb3JkaW5hdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5zZXRWaWV3KGNvb3JkaW5hdGVzWzBdLCAxMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFjdGlvbnMuaW50ZXJhY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zYWZlQXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuXG4gICAgICAgIC5jb250cm9sbGVyKCdtYXBDdHJsJywgZGVwZW5kZW5jaWVzKTtcbn0pKGFuZ3VsYXIsIGQzLCBMKTtcbiIsIihmdW5jdGlvbiAoYW5ndWxhciwgUlRQKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gW1xuICAgICAgICAnJHNjb3BlJyxcbiAgICAgICAgJyRodHRwJyxcbiAgICAgICAgJ18nLFxuICAgICAgICAnJGZpbHRlcicsXG4gICAgICAgICdjb25maWcnLFxuICAgICAgICBuZXR3b3JrQ3RybFxuICAgIF07XG5cbiAgICBmdW5jdGlvbiBpc0RlZihvKSB7XG4gICAgICAgIHJldHVybiBvICE9PSB1bmRlZmluZWQgJiYgbyAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXR3b3JrQ3RybCgkc2NvcGUsICRodHRwLCBfLCAkZmlsdGVyLCBjb25maWcpIHtcbiAgICAgICAgLy8gVE9ETzogTWFrZSBhIGhhc2htYXAgb24gdGhlIGJhY2tlbmQgb2YgaWQgLT4gcG9zaXRpb24sIHRoZW4gdXNlIHNvdXJjZTpcbiAgICAgICAgLy8gZW50aXRpZXNbbWFwW3NvdXJjZWlkXV0gdG8gZ2V0IG5vZGVzLiBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTY4MjQzMDhcbiAgICAgICAgJHNjb3BlLmlzTG9hZGluZyAgID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLmNvbm5lY3Rpb25zID0ge307XG5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vY29kZXJ3YWxsLmNvbS9wL25naXNtYS9zYWZlLWFwcGx5LWluLWFuZ3VsYXItanNcbiAgICAgICAgJHNjb3BlLnNhZmVBcHBseSA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgdmFyIHBoYXNlID0gdGhpcy4kcm9vdC4kJHBoYXNlO1xuICAgICAgICAgICAgaWYgKHBoYXNlID09PSAnJGFwcGx5JyB8fCBwaGFzZSA9PT0gJyRkaWdlc3QnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZuICYmICh0eXBlb2YoZm4pID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kYXBwbHkoZm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kb24oJ2VudGl0aWVzTG9hZGVkJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0U2NvcGUgPSBldmVudC50YXJnZXRTY29wZTtcbiAgICAgICAgICAgICRodHRwLmdldChjb25maWcuYXBpSG9zdCArICdhcGkvY29ubmVjdGlvbnMnKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkRW50aXRpZXMgICAgPSAkZmlsdGVyKCdmaWx0ZXInKSgkc2NvcGUuZW50aXRpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudGl0eS5jb2xsYWJvcmF0aW9ucy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPj0gJHNjb3BlLm1pbkNvbm5lY3Rpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkQ29ubmVjdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICBfLmZvckVhY2goXy5rZXlzKGRhdGEuY29ubmVjdGlvbnMpLCBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAkc2NvcGUuY29ubmVjdGlvbnNbdHlwZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRDb25uZWN0aW9uc1t0eXBlXSA9IFtdO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChkYXRhLmNvbm5lY3Rpb25zLCBmdW5jdGlvbiAoY29ubmVjdGlvbnMsIHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGNvbm5lY3Rpb25zLCBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZU5vZGUgPSBfLmZpbmQoZmlsdGVyZWRFbnRpdGllcywgeydpZCc6IGNvbm5lY3Rpb24uc291cmNlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0Tm9kZSA9IF8uZmluZChmaWx0ZXJlZEVudGl0aWVzLCB7J2lkJzogY29ubmVjdGlvbi50YXJnZXR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKCBpc0RlZihzb3VyY2VOb2RlKSAmJiBpc0RlZih0YXJnZXROb2RlKSApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZENvbm5lY3Rpb25zW3R5cGVdLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeydzb3VyY2UnOiBzb3VyY2VOb2RlLCAndGFyZ2V0JzogdGFyZ2V0Tm9kZX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJHNjb3BlLmNvbm5lY3Rpb25zW3R5cGVdLnB1c2goeydzb3VyY2UnOiBzb3VyY2VOb2RlLCAndGFyZ2V0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRhcmdldE5vZGV9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gT25seSBzaG93IGxhYmVscyBvbiB0b3AgNSBtb3N0IGNvbm5lY3RlZCBlbnRpdGllcyBpbml0aWFsbHkuXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKF8ua2V5cygkc2NvcGUuZW50aXR5VHlwZXMpLCBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSB0b3AgNSBtb3N0LWNvbm5lY3RlZCBlbnRpdGllcy5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvcDUgPSBfLnRha2VSaWdodChfLnNvcnRCeShfLmZpbHRlcigkc2NvcGUuZW50aXRpZXMsIHsndHlwZSc6IHR5cGV9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sbGFib3JhdGlvbnMubGVuZ3RoJyksIDUpO1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2godG9wNSwgZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5LndlbGxjb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGZpbHRlcmVkRW50aXRpZXMgPSBfLnNvcnRCeShmaWx0ZXJlZEVudGl0aWVzLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGUud2VsbGNvbm5lY3RlZCkgPyAxIDogMDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdOZXR3b3JrTW9iaWxlKGZpbHRlcmVkRW50aXRpZXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdOZXR3b3JrKGZpbHRlcmVkRW50aXRpZXMsIGZpbHRlcmVkQ29ubmVjdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZHJhd05ldHdvcmtNb2JpbGUgPSBmdW5jdGlvbiAoZW50aXR5QXJyYXkpIHtcbiAgICAgICAgICAgIHZhciBkYXRhICAgICAgICA9IHtcbiAgICAgICAgICAgICAgICBub2RlczogJHNjb3BlLmVudGl0aWVzLFxuICAgICAgICAgICAgICAgIGxpbmtzOiBfLmZsYXR0ZW4oXy52YWx1ZXMoJHNjb3BlLmNvbm5lY3Rpb25zKSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgY29sb3JzICAgICAgPSB7XG4gICAgICAgICAgICAgICAgJ0dvdmVybm1lbnQnICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICdmb2N1c2VkJyAgOiAncmdiYSgyNDIsIDgwLCAzNCwgMSknLFxuICAgICAgICAgICAgICAgICAgICAndW5mb2N1c2VkJzogJ3JnYmEoMjQyLCA4MCwgMzQsIDAuMSknXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnTm9uLVByb2ZpdCcgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2ZvY3VzZWQnICA6ICdyZ2JhKDMwLCAxNDQsIDI1NSwgMSknLFxuICAgICAgICAgICAgICAgICAgICAndW5mb2N1c2VkJzogJ3JnYmEoMzAsIDE0NCwgMjU1LCAwLjEpJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ0Zvci1Qcm9maXQnICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICdmb2N1c2VkJyAgOiAncmdiYSgxMjcsIDE4NiwgMCwgMSknLFxuICAgICAgICAgICAgICAgICAgICAndW5mb2N1c2VkJzogJ3JnYmEoMTI3LCAxODYsIDAsIDAuMSknXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnSW5kaXZpZHVhbCcgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2ZvY3VzZWQnICA6ICdyZ2JhKDI1NSwgMTc1LCA0NCwgMSknLFxuICAgICAgICAgICAgICAgICAgICAndW5mb2N1c2VkJzogJ3JnYmEoMjU1LCAxNzUsIDQ0LCAwLjEpJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ0Z1bmRpbmcnICAgICAgOiB7J2ZvY3VzZWQnOiAnI0ZGNzQ2MCcsICd1bmZvY3VzZWQnOiAnI0UzREZFNCd9LFxuICAgICAgICAgICAgICAgICdEYXRhJyAgICAgICAgIDogeydmb2N1c2VkJzogJyM4NEMyRkYnLCAndW5mb2N1c2VkJzogJyNFM0RGRTQnfSxcbiAgICAgICAgICAgICAgICAnRW1wbG95bWVudCcgICA6IHsnZm9jdXNlZCc6ICcjRUU3M0ZGJywgJ3VuZm9jdXNlZCc6ICcjRTNERkU0J30sXG4gICAgICAgICAgICAgICAgJ0NvbGxhYm9yYXRpb24nOiB7J2ZvY3VzZWQnOiAnI0ZGRDk1NScsICd1bmZvY3VzZWQnOiAnI0UzREZFNCd9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGNhbnZhc0ZvcmNlID0gJCgnI2NhbnZhcy1mb3JjZScpLFxuICAgICAgICAgICAgICAgIHdpZHRoICAgICAgID0gY2FudmFzRm9yY2Uud2lkdGgoKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQgICAgICA9IGNhbnZhc0ZvcmNlLmhlaWdodCgpO1xuXG4gICAgICAgICAgICB2YXIgb2Zmc2V0cyAgICAgICAgPSB7XG4gICAgICAgICAgICAgICAgJ0dvdmVybm1lbnQnOiBbLTkwLCAtOTAgLSAoaGVpZ2h0IC8gNyldLFxuICAgICAgICAgICAgICAgICdOb24tUHJvZml0JzogWy05MCwgOTAgLSAoaGVpZ2h0IC8gNyldLFxuICAgICAgICAgICAgICAgICdGb3ItUHJvZml0JzogWzkwLCAtOTAgLSAoaGVpZ2h0IC8gNyldLFxuICAgICAgICAgICAgICAgICdJbmRpdmlkdWFsJzogWzkwLCA5MCAtIChoZWlnaHQgLyA3KV1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgaXNJbnNpZGVDaXJjbGUgPSBmdW5jdGlvbiAoeCwgeSwgY3gsIGN5LCByYWRpdXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHggPSB4IC0gY3gsXG4gICAgICAgICAgICAgICAgICAgIGR5ID0geSAtIGN5O1xuICAgICAgICAgICAgICAgIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeSA8PSByYWRpdXMgKiByYWRpdXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHNjYWxlICAgICAgICAgID0ge1xuICAgICAgICAgICAgICAgICdlbXBsb3llZXMnOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZSA+IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5sb2coZSkgLyAzO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEuNTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2ZvbGxvd2Vycyc6IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmID4gMCAmJiBmIDw9IDUwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEuNTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChmID4gNTAwICYmIGYgPD0gNTAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEuODtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChmID4gNTAwMCAmJiBmIDw9IDEwMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChmID4gMTAwMDAgJiYgZiA8PSAyNTAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIuNTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChmID4gMjUwMDAgJiYgZiA8PSA5MDAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGYgPiA5MDAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA1O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgY2FudmFzICAgICAgICAgICAgPSBkMy5zZWxlY3QoJ2RpdiNjYW52YXMtZm9yY2UnKS5hcHBlbmQoJ2NhbnZhcycpO1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgICAgICAgICAgID0gY2FudmFzLm5vZGUoKS5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgdmFyIGRldmljZVBpeGVsUmF0aW8gID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSxcbiAgICAgICAgICAgICAgICBiYWNraW5nU3RvcmVSYXRpbyA9IGNvbnRleHQud2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5vQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5iYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8IDEsXG4gICAgICAgICAgICAgICAgcmF0aW8gICAgICAgICAgICAgPSBkZXZpY2VQaXhlbFJhdGlvIC8gYmFja2luZ1N0b3JlUmF0aW87XG5cbiAgICAgICAgICAgIGNhbnZhc1xuICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoICogcmF0aW8pXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCAqIHJhdGlvKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdpZCcsICduZXR3b3JrQ2FudmFzJyk7XG5cbiAgICAgICAgICAgIHZhciBjYW52YXNFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXR3b3JrQ2FudmFzJyk7XG5cbiAgICAgICAgICAgIGNhbnZhc0VsLnN0eWxlLndpZHRoICA9IHdpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIGNhbnZhc0VsLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gICAgICAgICAgICBjb250ZXh0LnNjYWxlKHJhdGlvLCByYXRpbyk7XG4gICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHNjYWxlem9vbSAgPSAxO1xuICAgICAgICAgICAgJCgnI25ldHdvcmtDYW52YXMnKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciBvWCAgICAgICAgICAgICAgICAgICAgICA9IGUub2Zmc2V0WCAvIHNjYWxlem9vbSxcbiAgICAgICAgICAgICAgICAgICAgb1kgICAgICAgICAgICAgICAgICAgICAgPSBlLm9mZnNldFkgLyBzY2FsZXpvb207XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dMaWNlbnNlICAgICAgICAgID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmNsaWNrZWRFbnRpdHkuZW50aXR5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgZW50aXR5Rm91bmQgICAgICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBkYXRhLm5vZGVzLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGsgPSBzY2FsZVskc2NvcGUuc2l6ZUJ5XShkWyRzY29wZS5zaXplQnldKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW5zaWRlQ2lyY2xlKG9YLCBvWSwgZC54ICsgb2Zmc2V0c1tkLnR5cGVdWzBdLCBkLnkgKyBvZmZzZXRzW2QudHlwZV1bMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0LjUgKiBrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh5ZGVQYXJ0aWFscygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdzZXRDdXJyZW50RW50aXR5Jywge3ZhbHVlOiBkfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHlGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0RW50aXR5KGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsaWNrZWRFbnRpdHkuZW50aXR5ID0gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzKGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKCFlbnRpdHlGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3NldEN1cnJlbnRMb2NhdGlvbicsIHt2YWx1ZTogbnVsbH0pO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ3NldEN1cnJlbnRFbnRpdHknLCB7dmFsdWU6IG51bGx9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGljaygpO1xuICAgICAgICAgICAgICAgICRzY29wZS5hY3Rpb25zLmludGVyYWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICRzY29wZS5zYWZlQXBwbHkoKTtcbiAgICAgICAgICAgICAgICAkKFwiI2RldGFpbHMtcGFuZWxcIikuc2Nyb2xsVG9wKDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgY291bnQgICAgICAgPSAwO1xuICAgICAgICAgICAgdmFyIGluaXRpYWxMb2FkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBkcmF3T25Ub3AgICA9IFtdO1xuICAgICAgICAgICAgdmFyIGFsbE5vZGVzICAgID0gW107XG4gICAgICAgICAgICB2YXIgc2hvd0VudGl0aWVzO1xuICAgICAgICAgICAgZGF0YS5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRGVmKGVudGl0eUFycmF5W2QudHlwZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY3VycmVudExvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5uYW1lIGluICRzY29wZS5jdXJyZW50TG9jYXRpb24uZGljdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdPblRvcC5wdXNoKGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEkc2NvcGUuY3VycmVudEVudGl0eSB8fCBzaG93RW50aXRpZXNbZC5pZF0gfHwgZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT09ICRzY29wZS5jdXJyZW50RW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmN1cnJlbnRFbnRpdHkgfHwgZC53ZWxsY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhd09uVG9wLnB1c2goZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbE5vZGVzLnB1c2goZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYWxsTm9kZXMgID0gYWxsTm9kZXMuY29uY2F0KGRyYXdPblRvcCk7XG4gICAgICAgICAgICB2YXIgdGljayAgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGluY2hab29tO1xuXG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPiA3MCAmJiBpbml0aWFsTG9hZCkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsTG9hZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmb3JjZS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHBpbmNoWm9vbSA9IG5ldyBSVFAuUGluY2hab29tKCQoJyNuZXR3b3JrQ2FudmFzJyksIHt9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgc2hvd0VudGl0aWVzICAgICAgICA9IHt9O1xuICAgICAgICAgICAgICAgIC8vIERyYXcgbGlua3MuXG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICcjY2NjJztcbiAgICAgICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLmNvbm5lY3Rpb25zLCBmdW5jdGlvbiAoY29ubmVjdGlvbnMsIHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ29uVHlwZURlZmluZWQgICAgICAgICAgPSBpc0RlZigkc2NvcGUuY29ubmVjdGlvblR5cGVzW3R5cGVdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VudGl0eVRhcmdldFR5cGVEZWZpbmVkID0gaXNEZWYoJHNjb3BlLmVudGl0eVR5cGVzW2QudGFyZ2V0LnR5cGVdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VudGl0eVNvdXJjZVR5cGVEZWZpbmVkID0gaXNEZWYoJHNjb3BlLmVudGl0eVR5cGVzW2Quc291cmNlLnR5cGVdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShpc0NvblR5cGVEZWZpbmVkICYmIGlzRW50aXR5VGFyZ2V0VHlwZURlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGlzRW50aXR5U291cmNlVHlwZURlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNEZWYoJHNjb3BlLmN1cnJlbnRMb2NhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5zb3VyY2UubmFtZSBpbiAkc2NvcGUuY3VycmVudExvY2F0aW9uLmRpY3QgJiYgZC50YXJnZXQubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiAkc2NvcGUuY3VycmVudExvY2F0aW9uLmRpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgTW9kaWZpY2F0aW9uIC0gQm91bmRhcmllcyAgICAgIHZhciBrID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2NhbGVbJHNjb3BlLnNpemVCeV0oZFskc2NvcGUuc2l6ZUJ5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBzY2FsZVskc2NvcGUuc2l6ZUJ5XSgoZC5zb3VyY2UpWyRzY29wZS5zaXplQnldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oTWF0aC5tYXgoNC41ICogaywgTWF0aC5taW4od2lkdGggLSA0LjUgKiBrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNvdXJjZS54XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgb2Zmc2V0c1tkLnNvdXJjZS50eXBlXVswXSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1heCg0LjUgKiBrLCBNYXRoLm1pbihoZWlnaHQgLSA0LjUgKiBrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNvdXJjZS55XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgb2Zmc2V0c1tkLnNvdXJjZS50eXBlXVsxXSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oTWF0aC5tYXgoNC41ICogaywgTWF0aC5taW4od2lkdGggLSA0LjUgKiBrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnRhcmdldC54XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgb2Zmc2V0c1tkLnRhcmdldC50eXBlXVswXSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1heCg0LjUgKiBrLCBNYXRoLm1pbihoZWlnaHQgLSA0LjUgKiBrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnRhcmdldC55XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgb2Zmc2V0c1tkLnRhcmdldC50eXBlXVsxXSkpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gY29sb3JzW3R5cGVdWydmb2N1c2VkJ107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0RlZigkc2NvcGUuY3VycmVudEVudGl0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgZC5zb3VyY2UgPT09ICRzY29wZS5jdXJyZW50RW50aXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGQudGFyZ2V0ID09PSAkc2NvcGUuY3VycmVudEVudGl0eSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gIE1vZGlmaWNhdGlvbiAtIEJvdW5kYXJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IHNjYWxlWyRzY29wZS5zaXplQnldKChkLnNvdXJjZSlbJHNjb3BlLnNpemVCeV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhNYXRoLm1heCg0LjUgKiBrLCBNYXRoLm1pbih3aWR0aCAtIDQuNSAqIGssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuc291cmNlLnhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBvZmZzZXRzW2Quc291cmNlLnR5cGVdWzBdKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KDQuNSAqIGssIE1hdGgubWluKGhlaWdodCAtIDQuNSAqIGssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuc291cmNlLnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBvZmZzZXRzW2Quc291cmNlLnR5cGVdWzFdKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhNYXRoLm1heCg0LjUgKiBrLCBNYXRoLm1pbih3aWR0aCAtIDQuNSAqIGssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQudGFyZ2V0LnhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBvZmZzZXRzW2QudGFyZ2V0LnR5cGVdWzBdKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KDQuNSAqIGssIE1hdGgubWluKGhlaWdodCAtIDQuNSAqIGssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQudGFyZ2V0LnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBvZmZzZXRzW2QudGFyZ2V0LnR5cGVdWzFdKSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBjb2xvcnNbdHlwZV1bJ2ZvY3VzZWQnXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0VudGl0aWVzW2Quc291cmNlLmlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dFbnRpdGllc1tkLnRhcmdldC5pZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGVudGl0eU5hbWVzID0gW107XG4gICAgICAgICAgICAgICAgYWxsTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmVudGl0eVR5cGVzW2QudHlwZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb2N1cztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jdXJyZW50TG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5uYW1lIGluICRzY29wZS5jdXJyZW50TG9jYXRpb24uZGljdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1cyAgICAgICAgICAgICAgID0gJ2ZvY3VzZWQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gJ3doaXRlJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5TmFtZXMucHVzaChkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXMgICAgICAgICAgICAgICA9ICd1bmZvY3VzZWQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmN1cnJlbnRFbnRpdHkgfHwgc2hvd0VudGl0aWVzW2QuaWRdIHx8IGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PT0gJHNjb3BlLmN1cnJlbnRFbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXMgICAgICAgICAgICAgICA9ICdmb2N1c2VkJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY3VycmVudEVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5TmFtZXMucHVzaChkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLndlbGxjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHlOYW1lcy5wdXNoKGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1cyAgICAgICAgICAgICAgID0gJ3VuZm9jdXNlZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGsgPSBzY2FsZVskc2NvcGUuc2l6ZUJ5XShkWyRzY29wZS5zaXplQnldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGNvbG9yc1tkLnR5cGVdW2ZvY3VzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KDQuNSAqIGssIE1hdGgubWluKHdpZHRoIC0gNC41ICogaywgZC54ICsgb2Zmc2V0c1tkLnR5cGVdWzBdKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgoNC41ICogaywgTWF0aC5taW4oaGVpZ2h0IC0gNC41ICogaywgZC55ICsgb2Zmc2V0c1tkLnR5cGVdWzFdKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNC41ICogaywgMCwgMiAqIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChlbnRpdHlOYW1lcywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGsgICAgICAgICAgICAgICA9IHNjYWxlWyRzY29wZS5zaXplQnldKGRbJHNjb3BlLnNpemVCeV0pO1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gJyMzMzMzMzMnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSAgICAgICAgICAgID0gZC5uaWNrbmFtZSA/IGQubmlja25hbWUgOiBkLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZm9udCAgICAgICAgPVxuICAgICAgICAgICAgICAgICAgICAgICAgJ2xpZ2h0ZXIgMTFweCBTZWdvZSBVSSwgSGVsdmV0aWNhTmV1ZS1MaWdodCwgc2Fucy1zZXJpZi1saWdodCwgc2Fucy1zZXJpZic7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dChuYW1lLCBNYXRoLm1heCg0LjUgKiBrLCBNYXRoLm1pbih3aWR0aCAtIDQuNSAqIGssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnggKyBvZmZzZXRzW2QudHlwZV1bMF0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBuYW1lLmxlbmd0aCAqIDIsIE1hdGgubWF4KDQuNSAqIGssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oaGVpZ2h0IC0gNC41ICogayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnkgKyBvZmZzZXRzW2QudHlwZV1bMV0pKSArIDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZm9yY2UgPSBkMy5sYXlvdXQuZm9yY2UoKVxuICAgICAgICAgICAgICAgIC5zaXplKFt3aWR0aCwgaGVpZ2h0XSlcbiAgICAgICAgICAgICAgICAubm9kZXMoZGF0YS5ub2RlcylcbiAgICAgICAgICAgICAgICAubGlua3MoZGF0YS5saW5rcylcbiAgICAgICAgICAgICAgICAub24oXCJ0aWNrXCIsIHRpY2spXG4gICAgICAgICAgICAgICAgLmNoYXJnZSgtMilcbiAgICAgICAgICAgICAgICAubGlua1N0cmVuZ3RoKDAuMSlcbiAgICAgICAgICAgICAgICAubGlua0Rpc3RhbmNlKDUwKVxuICAgICAgICAgICAgICAgIC5zdGFydCgpO1xuXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCd0b2dnbGVOb2RlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRpY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJHNjb3BlLiRvbigndG9nZ2xlTGluaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aWNrKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ25ldHdvcmsgZm91bmQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJHNjb3BlLiRvbignY2hhbmdlU2l6ZUJ5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRpY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJHNjb3BlLiRvbignc2VsZWN0SXRlbScsIGZ1bmN0aW9uIChldmVudCwgaXRlbSkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdsb2NhdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsaWNrZWRMb2NhdGlvbi5sb2NhdGlvbiA9ICRzY29wZS5jdXJyZW50TG9jYXRpb247XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnc2V0Q3VycmVudEVudGl0eScsIHt2YWx1ZTogbnVsbH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsaWNrZWRFbnRpdHkuZW50aXR5ID0gJHNjb3BlLmN1cnJlbnRFbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnc2V0Q3VycmVudExvY2F0aW9uJywge3ZhbHVlOiBudWxsfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5hY3Rpb25zLmludGVyYWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICRzY29wZS5zYWZlQXBwbHkoKTtcbiAgICAgICAgICAgICAgICB0aWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZHJhd05ldHdvcmsgPSBmdW5jdGlvbiAoZW50aXR5QXJyYXksIGNvbm5lY3Rpb25BcnJheSkge1xuICAgICAgICAgICAgJHNjb3BlLmlzTG9hZGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KCcjbmV0d29yaycpO1xuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbChcIipcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICB2YXIgYm91bmRzICAgICAgICAgICA9IHN2Zy5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ICAgICAgICAgICA9IGJvdW5kcy5oZWlnaHQ7XG4gICAgICAgICAgICB2YXIgd2lkdGggICAgICAgICAgICA9IGJvdW5kcy53aWR0aDtcbiAgICAgICAgICAgIHZhciBvZmZzZXRTY2FsZSAgICAgID0gNjtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0Tm9kZVNpemUgID0gNztcbiAgICAgICAgICAgIHZhciBvZmZzZXRzICAgICAgICAgID0ge1xuICAgICAgICAgICAgICAgICdJbmRpdmlkdWFsJzogeyd4JzogMSwgJ3knOiAxfSxcbiAgICAgICAgICAgICAgICAnRm9yLVByb2ZpdCc6IHsneCc6IDEsICd5JzogLTF9LFxuICAgICAgICAgICAgICAgICdOb24tUHJvZml0Jzogeyd4JzogLTEsICd5JzogMX0sXG4gICAgICAgICAgICAgICAgJ0dvdmVybm1lbnQnOiB7J3gnOiAtMSwgJ3knOiAtMX1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgbG93ZXJCb3VuZFJhZGl1cyA9IDEwO1xuICAgICAgICAgICAgdmFyIHVwcGVyQm91bmRSYWRpdXMgPSA1MDtcbiAgICAgICAgICAgIHZhciBtYXhFbXBsb3llZXMgICAgID0gZDMubWF4KGVudGl0eUFycmF5LCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoZWwuZW1wbG95ZWVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIG1heEZvbGxvd2VycyAgICAgPSBkMy5tYXgoZW50aXR5QXJyYXksIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChlbC5mb2xsb3dlcnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgc2NhbGUgICAgICAgICAgICA9IHtcbiAgICAgICAgICAgICAgICAnZW1wbG95ZWVzJzogZDMuc2NhbGUuc3FydCgpLmRvbWFpbihbMTAsIG1heEVtcGxveWVlc10pXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZShbbG93ZXJCb3VuZFJhZGl1cywgdXBwZXJCb3VuZFJhZGl1c10pLFxuICAgICAgICAgICAgICAgICdmb2xsb3dlcnMnOiBkMy5zY2FsZS5zcXJ0KCkuZG9tYWluKFsxMCwgbWF4Rm9sbG93ZXJzXSlcbiAgICAgICAgICAgICAgICAgICAgLnJhbmdlKFtsb3dlckJvdW5kUmFkaXVzLCB1cHBlckJvdW5kUmFkaXVzXSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgbGlua3MgICAgICAgICAgICA9IHt9O1xuICAgICAgICAgICAgdmFyIGZvcmNlICAgICAgICAgICAgPSBkMy5sYXlvdXQuZm9yY2UoKVxuICAgICAgICAgICAgICAgIC5zaXplKFt3aWR0aCwgaGVpZ2h0XSlcbiAgICAgICAgICAgICAgICAubm9kZXMoZW50aXR5QXJyYXkpXG4gICAgICAgICAgICAgICAgLmxpbmtzKF8uZmxhdHRlbihfLnZhbHVlcyhjb25uZWN0aW9uQXJyYXkpKSlcbiAgICAgICAgICAgICAgICAuY2hhcmdlKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmVtcGxveWVlcyA/IC0yICogc2NhbGUuZW1wbG95ZWVzKGQuZW1wbG95ZWVzKSA6IC0yMDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5saW5rU3RyZW5ndGgoMClcbiAgICAgICAgICAgICAgICAubGlua0Rpc3RhbmNlKDUwKTtcblxuICAgICAgICAgICAgXy5mb3JFYWNoKGNvbm5lY3Rpb25BcnJheSwgZnVuY3Rpb24gKGNvbm5lY3Rpb25zLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgbGlua3NbdHlwZV0gPSBzdmcuc2VsZWN0QWxsKCcubGluayAuJyArIHR5cGUgKyAnLWxpbmsnKVxuICAgICAgICAgICAgICAgICAgICAuZGF0YShjb25uZWN0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKCdsaW5lJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNEZWYoZC5zb3VyY2UpIHx8ICFpc0RlZihkLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGQudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2xpbmsgJyArIHR5cGUgKyAnLWxpbmsgJyArIGQuc291cmNlLnR5cGUgKyAnLWxpbmsgJyArIGQudGFyZ2V0LnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICctbGluayc7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBub2RlID0gc3ZnLnNlbGVjdEFsbCgnLm5vZGUnKVxuICAgICAgICAgICAgICAgIC5kYXRhKGVudGl0eUFycmF5KVxuICAgICAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdub2RlICcgKyBkLnR5cGUgKyAnLW5vZGUnO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhbGwoZm9yY2UuZHJhZyk7XG5cbiAgICAgICAgICAgIG5vZGUuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdyJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuZW1wbG95ZWVzID8gc2NhbGVbJ2VtcGxveWVlcyddKGQuZW1wbG95ZWVzKSA6IGRlZmF1bHROb2RlU2l6ZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbm9kZS5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLm5pY2tuYW1lID8gZC5uaWNrbmFtZSA6IGQubmFtZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyKCdkeCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgtMC4wNjUgKiB0aGlzLmdldENvbXB1dGVkVGV4dExlbmd0aCgpIC8gMikgKyAnZW0nO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2R5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAuMDggKiB0aGlzLnBhcmVudE5vZGUuZ2V0QkJveCgpLmhlaWdodCAvIDIgKyAwLjUpICsgJ2VtJztcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZm9yY2Uub24oJ3RpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIC8vIENsdXN0ZXIgaW4gZm91ciBjb3JuZXJzIGJhc2VkIG9uIG9mZnNldC5cbiAgICAgICAgICAgICAgICB2YXIgayA9IG9mZnNldFNjYWxlICogZS5hbHBoYTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlLmFscGhhKVxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChlbnRpdHlBcnJheSwgZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW50aXR5LnggJiYgb2Zmc2V0c1tlbnRpdHkudHlwZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eS54ICs9IG9mZnNldHNbZW50aXR5LnR5cGVdLnggKiBrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5LnkgKz0gb2Zmc2V0c1tlbnRpdHkudHlwZV0ueSAqIGs7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkueCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgodXBwZXJCb3VuZFJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbih3aWR0aCAtIHVwcGVyQm91bmRSYWRpdXMsIGVudGl0eS54KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkueSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgodXBwZXJCb3VuZFJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihoZWlnaHQgLSB1cHBlckJvdW5kUmFkaXVzLCBlbnRpdHkueSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBfLmZvckVhY2gobGlua3MsIGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmtcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc291cmNlLng7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zb3VyY2UueTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneDInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnRhcmdldC54O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQudGFyZ2V0Lnk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBub2RlLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBkLnggKyAnLCcgKyBkLnkgKyAnKSc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBzcGVlZEFuaW1hdGUgPSBmdW5jdGlvbiAodGlja3MpIHtcbiAgICAgICAgICAgICAgICAvLyBTcGVlZCB1cCB0aGUgaW5pdGlhbCBhbmltYXRpb24uXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2MTg5MTEwXG4gICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aWNrczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZS50aWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcmNlLmFscGhhKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghJHNjb3BlLm1vYmlsZSkge1xuICAgICAgICAgICAgICAgIHNwZWVkQW5pbWF0ZSg3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcmNlLnN0YXJ0KCk7XG5cbiAgICAgICAgICAgIC8vIEhhc2ggbGlua2VkIG5laWdoYm9ycyBmb3IgZWFzeSBob3ZlcmluZyBlZmZlY3RzLlxuICAgICAgICAgICAgLy8gU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzg3ODAyNzdcbiAgICAgICAgICAgIHZhciBsaW5rZWRCeUluZGV4ID0ge307XG4gICAgICAgICAgICBfLmZvckVhY2gobGlua3MsIGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKGxbMF0sIGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IGNvbm5lY3Rpb24uX19kYXRhX18uc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBjb25uZWN0aW9uLl9fZGF0YV9fLnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgbGlua2VkQnlJbmRleFtzb3VyY2UuaW5kZXggKyAnLCcgKyB0YXJnZXQuaW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbGlua2VkQnlJbmRleFt0YXJnZXQuaW5kZXggKyAnLCcgKyBzb3VyY2UuaW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgbmVpZ2hib3JpbmcgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaW5rZWRCeUluZGV4W2EuaW5kZXggKyAnLCcgKyBiLmluZGV4XSB8fCBhLmluZGV4ID09PSBiLmluZGV4O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGZvY3VzbmVpZ2hib3JzID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgICAgIC8vIEFwcGx5ICd1bmZvY3VzZWQnIGNsYXNzIHRvIGFsbCBub24tbmVpZ2hib3JzLlxuICAgICAgICAgICAgICAgIC8vIEFwcGx5ICdmb2N1c2VkJyBjbGFzcyB0byBhbGwgbmVpZ2hib3JzLlxuICAgICAgICAgICAgICAgIC8vIFRPRE86IFNlZSBpZiBpdCBjYW4gYmUgZG9uZSB3aXRoIGp1c3Qgb25lIGNsYXNzIGFuZCA6bm90KC5mb2N1c2VkKSBDU1Mgc2VsZWN0b3JzLlxuICAgICAgICAgICAgICAgIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2ZvY3VzZWQnLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5laWdoYm9yaW5nKGVudGl0eSwgbik7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCd1bmZvY3VzZWQnLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFuZWlnaGJvcmluZyhlbnRpdHksIG4pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChsaW5rcywgZnVuY3Rpb24gKGxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgbGlua1xuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2ZvY3VzZWQnLCBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbnRpdHkuaW5kZXggPT09IG8uc291cmNlLmluZGV4IHx8IGVudGl0eS5pbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID09PSBvLnRhcmdldC5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgndW5mb2N1c2VkJywgZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIShlbnRpdHkuaW5kZXggPT09IG8uc291cmNlLmluZGV4IHx8IGVudGl0eS5pbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT09IG8udGFyZ2V0LmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGZvY3VzID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY3VycmVudEVudGl0eSAhPT0gZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXRFbnRpdHkoZW50aXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhZmVBcHBseSgpO1xuICAgICAgICAgICAgICAgIGZvY3VzbmVpZ2hib3JzKGVudGl0eSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgdW5mb2N1cyAgICAgICA9IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAvL3ZhciB0cmFuc2l0aW9uZGVsYXkgPSA3NTtcbiAgICAgICAgICAgICAgICBub2RlXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdmb2N1c2VkJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCd1bmZvY3VzZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKGxpbmtzLCBmdW5jdGlvbiAobGluaykge1xuICAgICAgICAgICAgICAgICAgICBsaW5rXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnZm9jdXNlZCcsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ3VuZm9jdXNlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBlbnRpdHkuZml4ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBSZXN0YXJ0IGQzIGFuaW1hdGlvbnMuXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jbGlja2VkRW50aXR5LmVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZS5yZXN1bWUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9UT0RPOiBTaG93IGdlbmVyaWMgZGV0YWlscyBhbmQgbm90IGluZGl2aWR1YWwgZW50aXR5IGRldGFpbHM/XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGhvdmVyVGltZXI7XG4gICAgICAgICAgICB2YXIgaG92ZXIgICAgICAgICA9IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5jbGlja2VkRW50aXR5LmVudGl0eSAmJiAhJHNjb3BlLmVkaXRpbmcgJiYgISRzY29wZS5jdXJyZW50TG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaG92ZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXMoZW50aXR5KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFjdGlvbnMuaW50ZXJhY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhZmVBcHBseSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciB1bmhvdmVyICAgICAgID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmNsaWNrZWRFbnRpdHkuZW50aXR5ICYmICEkc2NvcGUuY3VycmVudExvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuZm9jdXMoZW50aXR5KTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGhvdmVyVGltZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUuYWN0aW9ucy5pbnRlcmFjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2FmZUFwcGx5KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGZvY3VzTG9jYXRpb24gPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAvLyAgSWYgdGhlIGN1cnJlbnQgZW50aXR5IGlzIHNob3duIGFuZCBpdCBkb2Vzbid0IG1hdGNoIHRoZSBjbGlja2VkIG5vZGUsIHRoZW4gc2V0XG4gICAgICAgICAgICAgICAgLy8gdGhlIG5ldyBub2RlIHRvIGNsaWNrZWQuXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhZmVBcHBseSgpO1xuXG4gICAgICAgICAgICAgICAgbm9kZS5jbGFzc2VkKCdmb2N1c2VkJywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLm5hbWUgaW4gbG9jYXRpb24uZGljdDtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ3VuZm9jdXNlZCcsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIShuLm5hbWUgaW4gbG9jYXRpb24uZGljdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKGxpbmtzLCBmdW5jdGlvbiAobGluaykge1xuICAgICAgICAgICAgICAgICAgICBsaW5rXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnZm9jdXNlZCcsIGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChvLnNvdXJjZS5uYW1lIGluIGxvY2F0aW9uLmRpY3QgJiYgby50YXJnZXQubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIGxvY2F0aW9uLmRpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCd1bmZvY3VzZWQnLCBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhKG8uc291cmNlLm5hbWUgaW4gbG9jYXRpb24uZGljdCkgfHwgIShvLnRhcmdldC5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIGxvY2F0aW9uLmRpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgdW5mb2N1c0xvY2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2ZvY3VzZWQnLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ3VuZm9jdXNlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBfLmZvckVhY2gobGlua3MsIGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmtcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKCdmb2N1c2VkJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgndW5mb2N1c2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jbGlja2VkTG9jYXRpb24ubG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yY2UucmVzdW1lKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGhpZ2hsaWdodExvY2F0aW9uID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dMaWNlbnNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jbGlja2VkRW50aXR5LmVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICB1bmZvY3VzKCRzY29wZS5jbGlja2VkRW50aXR5LmVudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jbGlja2VkRW50aXR5LmVudGl0eSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY2xpY2tlZExvY2F0aW9uLmxvY2F0aW9uICE9PSBsb2NhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB1bmZvY3VzTG9jYXRpb24oJHNjb3BlLmNsaWNrZWRMb2NhdGlvbi5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jbGlja2VkTG9jYXRpb24ubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNMb2NhdGlvbihsb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkMy5ldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBkMy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFjdGlvbnMuaW50ZXJhY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhZmVBcHBseSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBjbGljayAgICAgICAgICAgICA9IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0xpY2Vuc2UgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0RlZigkc2NvcGUuY2xpY2tlZExvY2F0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEZWYoJHNjb3BlLmNsaWNrZWRMb2NhdGlvbi5sb2NhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZm9jdXNMb2NhdGlvbigkc2NvcGUuY2xpY2tlZExvY2F0aW9uLmVudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xpY2tlZExvY2F0aW9uLmxvY2F0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyAgSWYgdGhlIHByZXZpb3VzIG5vZGUgaXMgZXF1YWwgdG8gdGhlIG5ldyBub2RlLCBkbyBub3RoaW5nLlxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNsaWNrZWRFbnRpdHkuZW50aXR5ID09PSBlbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jbGlja2VkRW50aXR5LmVudGl0eSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgVW5mb2N1cyBvbiBwcmV2aW91cyBub2RlIGFuZCBmb2N1cyBvbiBuZXcgbm9kZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY2xpY2tlZEVudGl0eS5lbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmZvY3VzKCRzY29wZS5jbGlja2VkRW50aXR5LmVudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xpY2tlZEVudGl0eS5lbnRpdHkgPSBlbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1cyhlbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU3RvcCBldmVudCBzbyB3ZSBkb24ndCBkZXRlY3QgYSBjbGljayBvbiB0aGUgYmFja2dyb3VuZC5cbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMjI5NDE3OTZcbiAgICAgICAgICAgICAgICBpZiAoZDMuZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5hY3Rpb25zLmludGVyYWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICRzY29wZS5zYWZlQXBwbHkoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBiYWNrZ3JvdW5kY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRGVmKCRzY29wZS5jbGlja2VkTG9jYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RlZigkc2NvcGUuY2xpY2tlZExvY2F0aW9uLmxvY2F0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5mb2N1cygkc2NvcGUuY2xpY2tlZExvY2F0aW9uLmxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jbGlja2VkTG9jYXRpb24ubG9jYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RlZigkc2NvcGUuY2xpY2tlZEVudGl0eS5lbnRpdHkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmZvY3VzKCRzY29wZS5jbGlja2VkRW50aXR5LmVudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xpY2tlZEVudGl0eS5lbnRpdHkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5zYWZlQXBwbHkoKTtcbiAgICAgICAgICAgICAgICAvL1RPRE86IFNob3cgZ2VuZXJpYyBkZXRhaWxzIGFuZCBub3QgaW5kaXZpZHVhbCBlbnRpdHkgZGV0YWlscy5cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZGJsY2xpY2sgICAgICAgID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgICAgIGlmICghZW50aXR5LmZpeGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudGl0eS54ICAgICAgICAgICAgICAgICAgICA9IHdpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5LnkgICAgICAgICAgICAgICAgICAgID0gaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5LnB4ICAgICAgICAgICAgICAgICAgID0gd2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgICBlbnRpdHkucHkgICAgICAgICAgICAgICAgICAgPSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICBlbnRpdHkuZml4ZWQgICAgICAgICAgICAgICAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2xpY2tlZEVudGl0eS5lbnRpdHkgPSBlbnRpdHk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdW5mb2N1cyhlbnRpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUuYWN0aW9ucy5pbnRlcmFjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2FmZUFwcGx5KCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBub2RlLm9uKCdtb3VzZW92ZXInLCBob3Zlcik7XG4gICAgICAgICAgICBub2RlLm9uKCdtb3VzZW91dCcsIHVuaG92ZXIpO1xuICAgICAgICAgICAgbm9kZS5vbignY2xpY2snLCBjbGljayk7XG4gICAgICAgICAgICBub2RlLm9uKCdkYmxjbGljaycsIGRibGNsaWNrKTtcbiAgICAgICAgICAgIHN2Zy5vbignY2xpY2snLCBiYWNrZ3JvdW5kY2xpY2spO1xuXG4gICAgICAgICAgICBub2RlXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ3dlbGxjb25uZWN0ZWQnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5oYXNPd25Qcm9wZXJ0eSgnd2VsbGNvbm5lY3RlZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCdjaGFuZ2VTaXplQnknLCBmdW5jdGlvbiAoZXZlbnQsIHNpemVCeSkge1xuICAgICAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2NpcmNsZScpXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDI1MClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3InLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbc2l6ZUJ5XSA/IHNjYWxlW3NpemVCeV0oZFtzaXplQnldKSA6IGRlZmF1bHROb2RlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRzY29wZS4kb24oJ3RvZ2dsZUxpbmsnLCBmdW5jdGlvbiAoZXZlbnQsIGxpbmspIHtcbiAgICAgICAgICAgICAgICAvLyBsaW5rc1tsaW5rLm5hbWVdXG4gICAgICAgICAgICAgICAgLy8gLmNsYXNzZWQoeyd2aXNpYmxlJzogbGluay5lbmFibGVkLCAnaGlkZGVuJzogIWxpbmsuZW5hYmxlZH0pO1xuICAgICAgICAgICAgICAgIF8ubWFwKCRzY29wZS5lbnRpdHlUeXBlcywgZnVuY3Rpb24gKHZhbCwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHN2Z1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgnLicgKyBrZXkgKyAnLWxpbmsnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2aXNpYmxlJzogZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29ubmVjdGlvblR5cGUgZW5hYmxlZCwgY29ubmVjdGlvbiBzb3VyY2UgZW50aXR5IHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXMgZW5hYmxlZCwgY29ubmVjdGlvbiB0YXJnZXQgZW50aXR5IHR5cGUgaXMgZW5hYmxlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEkc2NvcGUuY29ubmVjdGlvblR5cGVzW2wudHlwZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8ICgkc2NvcGUuZW50aXR5VHlwZXNbbC5zb3VyY2UudHlwZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAkc2NvcGUuZW50aXR5VHlwZXNbbC50YXJnZXQudHlwZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hpZGRlbicgOiBmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBhbnkgb2YgQ29ubmVjdGlvblR5cGUsIHNvdXJjZSBlbnRpdHkgdHlwZSwgb3IgdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVudGl0eSB0eXBlIGFyZSBkaXNhYmxlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEkc2NvcGUuY29ubmVjdGlvblR5cGVzW2wudHlwZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8ICghJHNjb3BlLmVudGl0eVR5cGVzW2wuc291cmNlLnR5cGVdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAhJHNjb3BlLmVudGl0eVR5cGVzW2wudGFyZ2V0LnR5cGVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkc2NvcGUuJG9uKCd0b2dnbGVOb2RlJywgZnVuY3Rpb24gKGV2ZW50LCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgc3ZnXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJy4nICsgdHlwZS5uYW1lICsgJy1ub2RlJylcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoeyd2aXNpYmxlJzogdHlwZS5lbmFibGVkLCAnaGlkZGVuJzogIXR5cGUuZW5hYmxlZH0pO1xuXG4gICAgICAgICAgICAgICAgc3ZnXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJy4nICsgdHlwZS5uYW1lICsgJy1saW5rJylcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Zpc2libGUnOiBmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbm5lY3Rpb25UeXBlIGVuYWJsZWQsIGNvbm5lY3Rpb24gc291cmNlIGVudGl0eSB0eXBlIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5hYmxlZCwgY29ubmVjdGlvbiB0YXJnZXQgZW50aXR5IHR5cGUgaXMgZW5hYmxlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmNvbm5lY3Rpb25UeXBlc1tsLnR5cGVdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmICgkc2NvcGUuZW50aXR5VHlwZXNbbC5zb3VyY2UudHlwZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgJHNjb3BlLmVudGl0eVR5cGVzW2wudGFyZ2V0LnR5cGVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGlkZGVuJyA6IGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgYW55IG9mIENvbm5lY3Rpb25UeXBlLCBzb3VyY2UgZW50aXR5IHR5cGUsIG9yIHRhcmdldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVudGl0eSB0eXBlIGFyZSBkaXNhYmxlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gISRzY29wZS5jb25uZWN0aW9uVHlwZXNbbC50eXBlXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAoISRzY29wZS5lbnRpdHlUeXBlc1tsLnNvdXJjZS50eXBlXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAhJHNjb3BlLmVudGl0eVR5cGVzW2wudGFyZ2V0LnR5cGVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCdzZWxlY3RJdGVtJywgZnVuY3Rpb24gKGV2ZW50LCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2xvY2F0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRMb2NhdGlvbigkc2NvcGUuY3VycmVudExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrKCRzY29wZS5jdXJyZW50RW50aXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnY2l2aWMtZ3JhcGgnKVxuICAgICAgICAuY29udHJvbGxlcignbmV0d29ya0N0cmwnLCBkZXBlbmRlbmNpZXMpO1xuXG59KShhbmd1bGFyLCBSVFApO1xuIl19
