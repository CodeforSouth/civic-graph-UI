!function(e){"use strict";var t=["ui.bootstrap","leaflet-directive","ngAnimate","templateCache"];e.module("civic-graph",t)}(angular);
!function(t){"use strict";function a(){return{templateUrl:"js/analytic/analytics.html",restrict:"E",scope:{},controller:"analyticsCtrl"}}var c=[a];t.module("civic-graph").directive("analytics",c)}(angular);
!function(o){"use strict";function r(){return{templateUrl:"js/control/controls.html",restrict:"E",scope:{toggleNetwork:"="},controller:"controlCtrl",controllerAs:"control",bindToController:{minConnections:"="}}}var t=[r];o.module("civic-graph").directive("control",t)}(angular);
!function(i,t){"use strict";function s(i){function s(){var i=t(this);i.css("height","55vh")}function c(){var i=t(this);window.innerHeight/3>parseInt(i.css("height"))?i.css("height","55vh"):i.css("height","30vh")}var e;i.mobile&&(e=t("#details-panel"),e.css("height","30vh"),e.scrollTop(0),e.scroll(s),e.click(c))}function c(){return{restrict:"A",link:s}}i.module("civic-graph").directive("addMobileEvents",[c])}(angular,$);
!function(o){"use strict";function c(o,c){o.closeWindow=function(){c.close()}}o.module("civic-graph").controller("modalCtrl",["$scope","$modalInstance",c])}(angular);
!function(t){"use strict";function e(){return{templateUrl:"js/edit-entity/edit.html",restrict:"E",scope:{entity:"=",entities:"=",isOpen:"="},controller:"editCtrl"}}var i=[e];t.module("civic-graph").directive("editEntity",i)}(angular);
!function(t){"use strict";t.module("civic-graph").constant("_",window._).constant("config",{apiHost:"https://api.civicgraph.io/"}).config(["$locationProvider","$httpProvider","$compileProvider",function(t,o,i){t.html5Mode(!0),o.defaults.headers.common["X-Requested-With"]="XMLHttpRequest",i.debugInfoEnabled(!0)}]).filter("thousandSuffix",function(){return function(t,o){var i,n=["k","M","G","T","P","E"];return window.isNaN(t)?null:t<1e3?t:(i=Math.floor(Math.log(t)/Math.log(1e3)),(t/Math.pow(1e3,i)).toFixed(o)+n[i-1])}})}(angular);
!function(t){"use strict";function i(t,i,e,n,o,a){t.entities=[],t.searchItems=null,t.categories=[],t.currentLocation=null,t.clickedLocation={},t.clickedLocation.location=null,t.clickedEntity={},t.clickedEntity.entity=null,t.editing=!1,t.actions={interacted:!1},t.showsearchMB=!1,t.showAnalytics=!1,t.entityTypes=n.getEntityTypes(),t.connectionTypes=o.getConnectionTypes(),t.status={isNetworkShown:!0,license:!0,networkLoading:!0},t.toggleAnalytics=function(){t.showAnalytics=!t.showAnalytics},this.minConnections=t.minConnections=2;var s=this;t.$watch("minConnections",function(){t.$broadcast("entitiesLoaded")}),t.connectionChange=function(){console.log(s.minConnections),t.minConnections=s.minConnections,t.$broadcast("entitiesLoaded")},t.hydePartials=function(i){"search"===i?(t.editing=!1,t.settingsEnabled=!1):"settings"===i?(t.editing=!1,t.showsearchMB=!1):"edit"===i?(t.settingsEnabled=!1,t.showsearchMB=!1):(t.editing=!1,t.settingsEnabled=!1,t.showsearchMB=!1)},t.showSearch=function(){t.hydePartials("search"),t.showsearchMB=!t.showsearchMB,t.status.license=!1},t.toggleSettings=function(){t.hydePartials("settings"),t.settingsEnabled=!t.settingsEnabled},t.startEdit=function(i){t.currentEntity=i,t.mobile&&t.hydePartials("edit"),t.editing=!0},t.switchView=function(){t.changeView(t.status.isNetworkShown?"Map":"Network")},window.mobilecheck=function(){var t=!1,i=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,e=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i;return function(n){(i.test(n)||e.test(n.substr(0,4)))&&(t=!0)}(navigator.userAgent||navigator.vendor||window.opera),t},t.mobile=window.mobilecheck(),t.settingsEnabled=!t.mobile,setTimeout(function(){i.get(a.apiHost+"api/entities").success(function(i){t.entities=i.nodes;var n=e.uniq(e.pluck(e.flatten(e.pluck(t.entities,"locations")),"locality")),o=e.map(n,function(i){var n=e.filter(t.entities,e.flow(e.property("locations"),e.partialRight(e.any,{locality:i})));return{name:i,type:"location",entities:n,dict:e.zipObject(e.pluck(n,"name"),e.pluck(n,"index"))}});t.searchItems=o.concat(t.entities),t.overviewUrl="js/overview/overview.html",t.$broadcast("entitiesLoaded")})},100),t.overviewUrl=null,t.setEntity=function(i){t.currentLocation=null,t.currentEntity=i,t.editing&&t.stopEdit(),t.$broadcast("entityChange")},t.setEntityID=function(i){t.setEntity(e.find(t.entities,{id:i}))},t.setLocation=function(i){t.currentLocation=i,t.editing&&t.stopEdit(),t.$broadcast("itemChange")},t.selectItem=function(i){"location"===i.type?t.setLocation(i):t[i%1===0?"setEntityID":"setEntity"](i),t.$broadcast("selectItem",i)},t.$on("setCurrentEntity",function(i,e){t.currentEntity=e.value}),t.$on("setCurrentLocation",function(i,e){t.currentLocation=e.value}),t.setEntities=function(i){t.entities=i},t.stopEdit=function(){t.editing=!1},t.$on("editEntitySuccess",function(i){t.setEntities(i.nodes),t.$broadcast("entitiesLoaded")}),t.animationsEnabled=!0}var e=["$scope","$http","_","entityService","connectionService","config",i];t.module("civic-graph").controller("homeCtrl",e)}(angular);
!function(i){"use strict";var a=[];i.module("civic-graph").directive("map",a)}(angular);
!function(r){"use strict";function t(){return{restrict:"E",templateUrl:"js/network/network.html",controller:"networkCtrl"}}var e=[t];r.module("civic-graph").directive("network",e)}(angular);
!function(e){"use strict";e.module("civic-graph").directive("input",function(){return{restict:"E",require:"?ngModel",link:function(e,r,t,i){"type"in t&&"range"===t.type.toLowerCase()&&i.$parsers.push(parseFloat)}}})}(angular);
!function(e){"use strict";function t(e,t){e.categorizedEntities={},t.forEach(t.keys(e.entityTypes),function(i){e.categorizedEntities[i]=t.filter(e.entities,{type:i})})}e.module("civic-graph").controller("overviewCtrl",["$scope","_",t])}(angular);
!function(c){"use strict";function n(c){}c.module("civic-graph").controller("analyticsCtrl",["$scope",n])}(angular);
!function(e){"use strict";function n(e,n){e.itemsShownDefault={key_people:3,grants_given:3,grants_received:3,investments_made:3,investments_received:3,collaborations:3,employments:3,relations:3,data_given:3,data_received:3,revenues:3,expenses:3},e.itemsShown=n.clone(e.itemsShownDefault),e.$on("entityChange",function(){e.itemsShown=n.clone(e.itemsShownDefault)}),e.showMore=function(n){e.itemsShown[n]=e.currentEntity[n].length},e.showLess=function(n){e.itemsShown[n]=e.itemsShownDefault[n]}}e.module("civic-graph").controller("detailsCtrl",["$scope","_",n])}(angular);
!function(e){"use strict";function o(e,o,n,t,i){function c(){a.changeView(a.toggleNetwork?"Network":"Map")}var a=this;a.entityTypes=e.getEntityTypes(),a.connectionTypes=o.getConnectionTypes(),a.sizeByList=[{name:"Employees",value:"employees"},{name:"Twitter Followers",value:"followers"}],a.sizeBy="employees",a.showView={Network:!0,Map:!1},a.switchView=c,a.changeView=function(e){t.forEach(t.keys(a.showView),function(o){a.showView[o]=e===o}),console.log("this happened"),n.$broadcast("viewChange",a.showView)},a.showAbout=function(){i.open({animation:!1,templateUrl:"control/about.html",controller:"modalCtrl"})},a.toggleNode=function(e){n.$broadcast("toggleNode",{name:e,enabled:a.entityTypes[e]})},a.toggleLink=function(e){n.$broadcast("toggleLink",{name:e,enabled:a.connectionTypes[e]})},a.changeSizeBy=function(){n.$broadcast("changeSizeBy",a.sizeBy)},a.changeSizeBy()}var n=["entityService","connectionService","$rootScope","_","$modal",o];e.module("civic-graph").controller("controlCtrl",n)}(angular);
!function(t){"use strict";function e(t){return void 0!==t&&null!==t}function i(i,n,o,s,c,a,r){function d(){var t,e,n,o;for(e in i.categories)if(i.categories.hasOwnProperty(e)){t=i.categories[e];for(n in i.editEntity.categories)i.editEntity.categories.hasOwnProperty(n)&&(o=i.editEntity.categories[n],t.id===o.id&&(t.enabled=o.enabled))}}i.isEditing=!1,i.editEntity=c.getEntityModel(i.entity),i.entityTypes=c.getEntityTypes(),i.influenceTypes=c.getInfluenceTypes();var u;i.categories=[],i.addressSearch=function(t){return n.jsonp("https://dev.virtualearth.net/REST/v1/Locations",{params:{query:t,key:"Ai58581yC-Sr7mcFbYTtUkS3ixE7f6ZuJnbFJCVI4hAtW1XoDEeZyidQz2gLCCyD",jsonp:"JSON_CALLBACK",include:"ciso2"}}).then(function(t){if(e(t.data.resourceSets)&&t.data.resourceSets.length>0)return t.data.resourceSets[0].resources})},i.toggleCategory=function(t){if(0===i.editEntity.categories.length)i.editEntity.categories.push(t);else{var e=!1;for(var n in i.editEntity.categories)if(i.editEntity.categories.hasOwnProperty(n)){var o=i.editEntity.categories[n];if(o.id===t.id){e=!0,o.enabled=t.enabled;break}}e||i.editEntity.categories.push(t)}},i.setLocation=function(t,n){i.addressSearch(t.formattedAddress).then(function(o){var s=o[0],c=s.address,a=s.point;i.addLocation(n),t.address_line=e(c.addressLine)?c.addressLine:"",t.locality=e(c.locality)?c.locality:"",t.district=e(c.adminDistrict)?c.adminDistrict:"",t.country=e(c.countryRegion)?c.countryRegion:null,t.country_code=e(c.countryRegionIso2)?c.countryRegionIso2:"",t.coordinates=e(a.coordinates)?a.coordinates:null,t.postal_code=e(c.postalCode)?c.postalCode:null})},i.addLocation=function(t){t&&i.editEntity.locations.push(a.getLocationModel())},i.addKeyPerson=function(){s.some(i.editEntity.key_people,{name:"",id:null})||i.editEntity.key_people.push({name:"",id:null})},i.setFundingConnection=function(t,e){e.entity_id=t.id},i.addFundingConnection=function(t){s.some(t,{entity:""})||t.push({entity:"",amount:null,year:null,id:null})},i.setConnection=function(t,e){e.entity_id=t.id},i.addConnection=function(t){s.some(t,{entity:"",id:null})||t.push({entity:"",id:null,details:null})},i.addFinance=function(t){s.every(t,function(t){return t.amount>0&&t.year>1750})&&t.push({amount:null,year:null,id:null})},i.save=function(){i.isSaving=!0,console.log(i.editEntity.generateDBModel()),n.post(r.apiHost+"api/save",{entity:i.editEntity.generateDBModel()}).success(function(t){i.isSaving=!1,i.$emit("editEntitySuccess",t),i.cancelEdit()}).error(function(){i.isError=!0,o(function(){i.isError=!1},2e3)})},i.cancelEdit=function(){i.isOpen=!1},i.$watch("entity",function(n,o){t.equals(n,o)||(console.log(i.entity),i.editEntity=c.getEntityModel(n),i.categories=t.copy(u),d(),i.isEditing=e(i.editEntity.id))}),n.get(r.apiHost+"api/categories").success(function(e){u=e.categories,i.categories=t.copy(u)})}var n=["$scope","$http","$timeout","_","entityService","locationService","config",i];t.module("civic-graph").controller("editCtrl",n)}(angular);
!function(n){"use strict";function e(){function n(n){return void 0!==n&&null!==n}function e(e){var i=n(e)?e:{};this.name=n(i.name)?i.name:null,this.enabled=!n(i.enable)||i.enabled,this.id=n(i.id)?i.id:null}this.getCategoryModel=function(n){return new e(n)}}var i=[e];n.module("civic-graph").service("categoryService",i)}(angular);
!function(n){"use strict";function t(n){return void 0!==n&&null!==n}function i(){function n(n){var i=t(n);this.entity=i&&t(n.entity)?n.entity:null,this.id=i&&t(n.id)?n.id:null,this.details=i&&t(n.details)?n.details:null,this.name=i&&t(n.name)?n.name:null,this.entity_id=i&&t(n.entity_id)?n.entity_id:null}this.getConnectionModel=function(t){return new n(t)},this.getConnectionTypes=function(){return l}}var e=[i],l={Funding:!0,Data:!0,Employment:!0,Collaboration:!0};n.module("civic-graph").service("connectionService",e)}(angular);
!function(e){"use strict";function n(n,t,i,o,s){function p(e){return void 0!==e&&null!==e}function r(n,t){if(!p(n)&&!e.isArray(n))return[t()];var i,o,s=[];for(i in n)n.hasOwnProperty(i)&&(o=n[i],e.isObject(o)&&s.push(t(o)));return s.push(t()),s}function a(e){var l=this,c=p(e)?e:{};this.id=p(c.id)?c.id:null,this.name=p(c.name)?c.name:null,this.locations=r(c.locations,o.getLocationModel),this.influence=p(c.influence)?c.influence:null,this.grants_received=r(c.grants_received,n.getFundingConnectionModel),this.investments_received=r(c.investments_received,n.getFundingConnectionModel),this.grants_given=r(c.grants_given,n.getFundingConnectionModel),this.investments_made=r(c.investments_made,n.getFundingConnectionModel),this.data_given=r(c.data_given,t.getConnectionModel),this.data_received=r(c.data_received,t.getConnectionModel),this.collaborations=r(c.collaborations,t.getConnectionModel),this.key_people=r(c.key_people,t.getConnectionModel),this.employments=r(c.employments,t.getConnectionModel),this.revenues=r(c.revenues,i.getFinanceModel),this.expenses=r(c.expenses,i.getFinanceModel),this.categories=r(c.categories,s.getCategoryModel),this.type=p(c.type)?c.type:null,this.nickname=p(c.nickname)?c.nickname:null,this.url=p(c.url)?c.url:null,this.twitter_handle=p(c.twitter_handle)?c.twitter_handle:null,this.employees=p(c.employees)?c.employees:null,this.generateDBModel=function(){var e=new a(l);return e.locations.pop(),e.locations.pop(),e.grants_received.pop(),e.grants_received.pop(),e.grants_given.pop(),e.grants_given.pop(),e.investments_received.pop(),e.investments_received.pop(),e.investments_made.pop(),e.investments_made.pop(),e.data_given.pop(),e.data_given.pop(),e.data_received.pop(),e.data_received.pop(),e.collaborations.pop(),e.collaborations.pop(),e.key_people.pop(),e.key_people.pop(),e.employments.pop(),e.employments.pop(),e.revenues.pop(),e.revenues.pop(),e.expenses.pop(),e.expenses.pop(),e.categories.pop(),e.categories.pop(),e.description="",console.log(e),e}}var l={Government:!0,"For-Profit":!0,"Non-Profit":!0,Individual:!0},c=["Local","National","Global"];this.getEntityModel=function(e){return new a(e)},this.getEntityTypes=function(){return l},this.getInfluenceTypes=function(){return c}}var t=["fundingConnectionService","connectionService","financeService","locationService","categoryService",n];e.module("civic-graph").service("entityService",t)}(angular);
!function(n){"use strict";function i(n){return void 0!==n&&null!==n}function t(){function n(n){var t=i(n)?n:{};this.amount=i(t.amount)&&t.amount>=0?t.amount:0,this.year=i(t.year)&&t.year>=1750?t.year:null,this.id=i(t.id)?t.id:null}this.getFinanceModel=function(i){return new n(i)}}var e=[t];n.module("civic-graph").service("financeService",e)}(angular);
!function(n){"use strict";function i(n){return void 0!==n&&null!==n}function t(){function n(n){var t=i(n);this.entity=t&&i(n.entity)?n.entity:"",this.amount=t&&i(n.amount)?n.amount:null,this.year=t&&i(n.year)?n.year:null,this.id=t&&i(n.id)?n.id:null}this.getFundingConnectionModel=function(i){return new n(i)}}var e=[t];n.module("civic-graph").service("fundingConnectionService",e)}(angular);
!function(t){"use strict";function i(){function t(t){return void 0!==t&&null!==t}function i(i){var s=t(i)?i:{};this.address_line=t(s.address_line)?s.address_line:null,this.locality=t(s.locality)?s.locality:null,this.district=t(s.district)?s.district:null,this.postal_code=t(s.postal_code)?s.postal_code:null,this.country=t(s.country)?s.country:null,this.country_code=t(s.country_code)?s.country_code:null,this.coordinates=t(s.coordinates)?s.coordinates:null,this.id=t(s.id)?s.id:null,this.formattedAddress=(t(this.address_line)?this.address_line+" ":"")+(t(this.locality)?this.locality+", ":"")+(t(this.country_code)?this.country_code+" ":"")+(t(this.postal_code)?this.postal_code:""),this.formattedAddress=this.formattedAddress.trim()}this.getLocationModel=function(t){return new i(t)}}var s=[i];t.module("civic-graph").service("locationService",s)}(angular);
!function(t,e,n){"use strict";function i(t,i,o,r,a){t.options={center:{lat:20,lng:-40,zoom:3},defaults:{tileLayer:"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZGF2aWRscm50IiwiYSI6IjA0M2RkNzMzZWJmNzEzNGYzMTdhYTExYzAyZmU4ZTE1In0.TNYlFta2VItrkn4L0Z9BJQ",tileLayerOptions:{detectRetina:!0,reuseTiles:!1},zoomControl:!1,attributionControl:!1}},i(function(){var i=function(t){var n=t.data,i=e.layout.pie().sort(null).value(function(t){return t.value}),o=e.svg.arc().outerRadius(t.r).innerRadius(t.r-10),r=t.r+t.strokeWidth,a=2*r,c=a,l=document.createElementNS(e.ns.prefix.svg,"svg"),s=e.select(l).data(n).attr("class","piechart").attr("width",a).attr("height",c),u=s.selectAll(".arc").data(i(n)).enter().append("g").attr("class","arc").attr("transform","translate("+r+","+r+")");return u.append("path").attr("d",o).attr("class",function(t){return t.data.type+"-arc"}),u.append("svg:text").text(function(e,n){if(0===n)return t.count}).attr("x",-4*t.count.toString().length).attr("dy",5).attr("class","arcText"),window.XMLSerializer?(new window.XMLSerializer).serializeToString(l):l.xml?l.xml:""};o.getMap().then(function(e){function o(t){var e=t.getAllChildMarkers(),o=e.length,a=r.pluck(e,"options"),c=r.map(r.countBy(a,"type"),function(t,e){return{type:e,value:t}}),l=28,s=1,u=2*(l+s),d=i({data:c,r:l,strokeWidth:s,count:o});return new n.DivIcon({html:d,className:"marker-cluster",iconSize:new n.point(u,u)})}function c(t){function e(e){if(r.every(e.coordinates)){"40.78200"===e.coordinates[0].toFixed(5)&&"-73.83170"===e.coordinates[1].toFixed(5)&&(e.coordinates[0]=40.77065,e.coordinates[1]=-73.97406);var i=n.marker(e.coordinates,{icon:u[t.type],title:t.name,entity_id:t.id,message:t.name,type:t.type});d.addLayer(i)}}r.forEach(t.locations,e)}function l(t){console.error(t.message+"  %O",t)}var s=a("filter")(t.entities,function(t){return t.collaborations.length>0});e.invalidateSize(),new n.Control.Zoom({position:"topright"}).addTo(e),n.control.locate({position:"topright",showPopup:!1,icon:"fa fa-location-arrow"}).addTo(e);var u={"Non-Profit":n.icon({iconUrl:"img/marker-nonprof.svg",iconSize:[60,60]}),"For-Profit":n.icon({iconUrl:"img/marker-prof.svg",iconSize:[60,60]}),Individual:n.icon({iconUrl:"img/marker-ind.svg",iconSize:[60,60]}),Government:n.icon({iconUrl:"img/marker-gov.svg",iconSize:[60,60]})},d=n.markerClusterGroup({spiderfyOnMaxZoom:!0,showCoverageOnHover:!1,iconCreateFunction:o,maxClusterRadius:30,spiderfyDistanceMultiplier:1.3});console.log("Original: %O",t.entities),console.log("Filtered: %O",s),r.forEach(s,c),e.addLayer(d),e.on("locationerror",l),d.on("click",function(e){t.setEntityID(e.layer.options.entity_id),t.clickedEntity.entity=t.currentEntity,t.actions.interacted=!0,t.settingsEnabled&&t.mobile&&t.toggleSettings(),t.safeApply()}),e.on("click",function(){t.clickedEntity.entity=null,t.actions.interacted=!0,t.safeApply()}),t.$on("selectItem",function(){var n=t.currentEntity.locations.length>0?r.pluck(t.currentEntity.locations,"coordinates"):null;n.length>0&&e.setView(n[0],11),t.actions.interacted=!0,t.safeApply()})})})}var o=["$scope","$timeout","leafletData","_","$filter",i];t.module("civic-graph").controller("mapCtrl",o)}(angular,d3,L);
!function(t,e){"use strict";function n(t){return void 0!==t&&null!==t}function i(t,i,o,c,a){t.isLoading=!0,t.connections={},t.safeApply=function(t){var e=this.$root.$$phase;"$apply"===e||"$digest"===e?t&&"function"==typeof t&&t():this.$apply(t)},t.$on("entitiesLoaded",function(e){e.targetScope;i.get(a.apiHost+"api/connections").success(function(e){var i=c("filter")(t.entities,function(e){return e.collaborations.length>=t.minConnections}),a={};o.forEach(o.keys(e.connections),function(t){a[t]=[]}),o.forEach(e.connections,function(t,e){o.forEach(t,function(t){var c=o.find(i,{id:t.source}),r=o.find(i,{id:t.target});n(c)&&n(r)&&a[e].push({source:c,target:r})})}),o.forEach(o.keys(t.entityTypes),function(e){var n=o.takeRight(o.sortBy(o.filter(t.entities,{type:e}),"collaborations.length"),5);o.forEach(n,function(t){t.wellconnected=!0})}),i=o.sortBy(i,function(t){return t.wellconnected?1:0}),t.mobile?r(i):s(i,a)})}),t.$on("viewChange",function(t){console.log(t)});var r=function(i){var c={nodes:t.entities,links:o.flatten(o.values(t.connections))},a={Government:{focused:"rgba(242, 80, 34, 1)",unfocused:"rgba(242, 80, 34, 0.1)"},"Non-Profit":{focused:"rgba(30, 144, 255, 1)",unfocused:"rgba(30, 144, 255, 0.1)"},"For-Profit":{focused:"rgba(127, 186, 0, 1)",unfocused:"rgba(127, 186, 0, 0.1)"},Individual:{focused:"rgba(255, 175, 44, 1)",unfocused:"rgba(255, 175, 44, 0.1)"},Funding:{focused:"#FF7460",unfocused:"#E3DFE4"},Data:{focused:"#84C2FF",unfocused:"#E3DFE4"},Employment:{focused:"#EE73FF",unfocused:"#E3DFE4"},Collaboration:{focused:"#FFD955",unfocused:"#E3DFE4"}},r=$("#canvas-force"),s=r.width(),u=r.height(),l={Government:[-90,-90-u/7],"Non-Profit":[-90,90-u/7],"For-Profit":[90,-90-u/7],Individual:[90,90-u/7]},d=function(t,e,n,i,o){var c=t-n,a=e-i;return c*c+a*a<=o*o},y={employees:function(t){return t>10?Math.log(t)/3:1.5},followers:function(t){return t>0&&t<=500?1.5:t>500&&t<=5e3?1.8:t>5e3&&t<=1e4?2:t>1e4&&t<=25e3?2.5:t>25e3&&t<=9e5?3:t>9e5?5:1}},f=d3.select("div#canvas-force").append("canvas"),p=f.node().getContext("2d"),h=window.devicePixelRatio||1,g=p.webkitBackingStorePixelRatio||p.mozBackingStorePixelRatio||p.msBackingStorePixelRatio||p.oBackingStorePixelRatio||p.backingStorePixelRatio||1,m=h/g;f.attr("width",s*m).attr("height",u*m).attr("id","networkCanvas");var k=document.getElementById("networkCanvas");k.style.width=s+"px",k.style.height=u+"px",p.scale(m,m),t.loading=!1;var x=1;$("#networkCanvas").click(function(e){var n=e.offsetX/x,i=e.offsetY/x;t.showLicense=!1,t.clickedEntity.entity=null;var o=!1;c.nodes.forEach(function(e){var c=y[t.sizeBy](e[t.sizeBy]);d(n,i,e.x+l[e.type][0],e.y+l[e.type][1],4.5*c)&&(t.hydePartials(),t.$emit("setCurrentEntity",{value:e}),o=!0,t.setEntity(e),t.clickedEntity.entity=e,focus(e))}),o||(t.$emit("setCurrentLocation",{value:null}),t.$emit("setCurrentEntity",{value:null})),T(),t.actions.interacted=!0,t.safeApply(),$("#details-panel").scrollTop(0)});var v,E=0,L=!0,w=[],M=[];c.nodes.forEach(function(e){n(i[e.type])&&(t.currentLocation?e.name in t.currentLocation.dict&&w.push(e):t.currentEntity&&!v[e.id]&&e!==t.currentEntity||(t.currentEntity||e.wellconnected?w.push(e):M.push(e)))}),M=M.concat(w);var T=function(){var i;E++,E>70&&L&&(L=!1,b.stop(),i=new e.PinchZoom($("#networkCanvas"),{})),p.clearRect(0,0,s,u),v={},p.strokeStyle="#ccc",o.forEach(t.connections,function(e,i){e.forEach(function(e){var o,c=n(t.connectionTypes[i]),r=n(t.entityTypes[e.target.type]),d=n(t.entityTypes[e.source.type]);c&&r&&d&&(n(t.currentLocation)?e.source.name in t.currentLocation.dict&&e.target.name in t.currentLocation.dict&&(p.beginPath(),o=y[t.sizeBy](e.source[t.sizeBy]),p.moveTo(Math.max(4.5*o,Math.min(s-4.5*o,e.source.x+l[e.source.type][0])),Math.max(4.5*o,Math.min(u-4.5*o,e.source.y+l[e.source.type][1]))),p.lineTo(Math.max(4.5*o,Math.min(s-4.5*o,e.target.x+l[e.target.type][0])),Math.max(4.5*o,Math.min(u-4.5*o,e.target.y+l[e.target.type][1]))),p.strokeStyle=a[i].focused,p.stroke(),p.closePath()):n(t.currentEntity)&&e.source!==t.currentEntity&&e.target!==t.currentEntity||(p.beginPath(),o=y[t.sizeBy](e.source[t.sizeBy]),p.moveTo(Math.max(4.5*o,Math.min(s-4.5*o,e.source.x+l[e.source.type][0])),Math.max(4.5*o,Math.min(u-4.5*o,e.source.y+l[e.source.type][1]))),p.lineTo(Math.max(4.5*o,Math.min(s-4.5*o,e.target.x+l[e.target.type][0])),Math.max(4.5*o,Math.min(u-4.5*o,e.target.y+l[e.target.type][1]))),p.strokeStyle=a[i].focused,p.stroke(),p.closePath(),v[e.source.id]=!0,v[e.target.id]=!0))})});var c=[];M.forEach(function(e){if(t.entityTypes[e.type]){var n;t.currentLocation?e.name in t.currentLocation.dict?(n="focused",p.strokeStyle="white",c.push(e)):(p.strokeStyle="rgba(255, 255, 255, 0.1)",n="unfocused"):!t.currentEntity||v[e.id]||e===t.currentEntity?(n="focused",p.strokeStyle="white",t.currentEntity?c.push(e):e.wellconnected&&c.push(e)):(p.strokeStyle="rgba(255, 255, 255, 0.1)",n="unfocused");var i=y[t.sizeBy](e[t.sizeBy]);p.beginPath(),p.fillStyle=a[e.type][n],p.arc(Math.max(4.5*i,Math.min(s-4.5*i,e.x+l[e.type][0])),Math.max(4.5*i,Math.min(u-4.5*i,e.y+l[e.type][1])),4.5*i,0,2*Math.PI),p.fill(),p.lineWidth=1,p.stroke(),p.closePath()}}),o.forEach(c,function(e){var n=y[t.sizeBy](e[t.sizeBy]);p.strokeStyle="#333333";var i=e.nickname?e.nickname:e.name;p.font="lighter 11px Segoe UI, HelveticaNeue-Light, sans-serif-light, sans-serif",p.strokeText(i,Math.max(4.5*n,Math.min(s-4.5*n,e.x+l[e.type][0]))-2*i.length,Math.max(4.5*n,Math.min(u-4.5*n,e.y+l[e.type][1]))+10,100)})},b=d3.layout.force().size([s,u]).nodes(c.nodes).links(c.links).on("tick",T).charge(-2).linkStrength(.1).linkDistance(50).start();t.$on("toggleNode",function(){T()}),t.$on("toggleLink",function(){T(),console.log("network found")}),t.$on("changeSizeBy",function(){T()}),t.$on("selectItem",function(e,n){"location"===n.type?(t.clickedLocation.location=t.currentLocation,t.$emit("setCurrentEntity",{value:null})):(t.clickedEntity.entity=t.currentEntity,t.$emit("setCurrentLocation",{value:null})),t.actions.interacted=!0,t.safeApply(),T()})},s=function(e,i){t.isLoading=!1;var c=d3.select("#network");c.selectAll("*").remove();var a=c.node().getBoundingClientRect(),r=a.height,s=a.width,u=6,l=7,d={Individual:{x:1,y:1},"For-Profit":{x:1,y:-1},"Non-Profit":{x:-1,y:1},Government:{x:-1,y:-1}},y=10,f=50,p=d3.max(e,function(t){return parseInt(t.employees)}),h=d3.max(e,function(t){return parseInt(t.followers)}),g={employees:d3.scale.sqrt().domain([10,p]).range([y,f]),followers:d3.scale.sqrt().domain([10,h]).range([y,f])},m={},k=d3.layout.force().size([s,r]).nodes(e).links(o.flatten(o.values(i))).charge(function(t){return t.employees?-2*g.employees(t.employees):-20}).linkStrength(0).linkDistance(50);o.forEach(i,function(t,e){m[e]=c.selectAll(".link ."+e+"-link").data(t).enter().append("line").attr("class",function(t){return n(t.source)&&n(t.target)?(t.type=e,"link "+e+"-link "+t.source.type+"-link "+t.target.type+"-link"):""})});var x=c.selectAll(".node").data(e).enter().append("g").attr("class",function(t){return"node "+t.type+"-node"}).call(k.drag);x.append("circle").attr("r",function(t){return t.employees?g.employees(t.employees):l}),x.append("text").text(function(t){return t.nickname?t.nickname:t.name}).attr("dx",function(){return-.065*this.getComputedTextLength()/2+"em"}).attr("dy",function(){return.08*this.parentNode.getBBox().height/2+.5+"em"}),k.on("tick",function(t){var n=u*t.alpha;o.forEach(e,function(t){t.x&&d[t.type]&&(t.x+=d[t.type].x*n,t.y+=d[t.type].y*n,t.x=Math.max(f,Math.min(s-f,t.x)),t.y=Math.max(f,Math.min(r-f,t.y)))}),o.forEach(m,function(t){t.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}),x.attr("transform",function(t){return"translate("+t.x+","+t.y+")"})});var v=function(t){requestAnimationFrame(function e(){for(var n=0;n<t;n++)k.tick();k.alpha()>0&&requestAnimationFrame(e)})};t.mobile||v(7),k.start();var E={};o.forEach(m,function(t){o.forEach(t[0],function(t){var e=t.__data__.source,n=t.__data__.target;E[e.index+","+n.index]=!0,E[n.index+","+e.index]=!0})});var L,w=function(t,e){return E[t.index+","+e.index]||t.index===e.index},M=function(t){x.classed("focused",function(e){return w(t,e)}).classed("unfocused",function(e){return!w(t,e)}),o.forEach(m,function(e){e.classed("focused",function(e){return t.index===e.source.index||t.index===e.target.index}).classed("unfocused",function(e){return!(t.index===e.source.index||t.index===e.target.index)})})},T=function(e){t.currentEntity!==e&&t.setEntity(e),t.safeApply(),M(e)},$=function(e){x.classed("focused",!1).classed("unfocused",!1),o.forEach(m,function(t){t.classed("focused",!1).classed("unfocused",!1)}),e.fixed=!1,t.clickedEntity.entity&&k.resume()},b=function(e){t.clickedEntity.entity||t.editing||t.currentLocation||(L=setTimeout(function(){T(e)},500)),t.actions.interacted=!0,t.safeApply()},P=function(e){t.clickedEntity.entity||t.currentLocation||($(e),clearTimeout(L)),t.actions.interacted=!0,t.safeApply()},B=function(e){t.safeApply(),x.classed("focused",function(t){return t.name in e.dict}).classed("unfocused",function(t){return!(t.name in e.dict)}),o.forEach(m,function(t){t.classed("focused",function(t){return t.source.name in e.dict&&t.target.name in e.dict}).classed("unfocused",function(t){return!(t.source.name in e.dict&&t.target.name in e.dict)})})},A=function(){x.classed("focused",!1).classed("unfocused",!1),o.forEach(m,function(t){t.classed("focused",!1).classed("unfocused",!1)}),t.clickedLocation.location&&k.resume()},S=function(e){t.showLicense=!1,t.clickedEntity.entity&&($(t.clickedEntity.entity),t.clickedEntity.entity=null),t.clickedLocation.location!==e&&(A(t.clickedLocation.location),t.clickedLocation.location=e,B(e)),d3.event&&d3.event.stopPropagation(),t.actions.interacted=!0,t.safeApply()},F=function(e){t.showLicense=!1,n(t.clickedLocation)&&(n(t.clickedLocation.location)&&(A(t.clickedLocation.entity),t.clickedLocation.location=null),t.clickedEntity.entity===e?t.clickedEntity.entity=null:(t.clickedEntity.entity&&$(t.clickedEntity.entity),t.clickedEntity.entity=e,T(e))),d3.event&&d3.event.stopPropagation(),t.actions.interacted=!0,t.safeApply()},C=function(){n(t.clickedLocation)&&(n(t.clickedLocation.location)&&($(t.clickedLocation.location),t.clickedLocation.location=null),n(t.clickedEntity.entity)&&($(t.clickedEntity.entity),t.clickedEntity.entity=null)),t.safeApply()},z=function(e){e.fixed?$(e):(e.x=s/2,e.y=r/2,e.px=s/2,e.py=r/2,e.fixed=!0,t.clickedEntity.entity=e),t.actions.interacted=!0,t.safeApply()};x.on("mouseover",b),x.on("mouseout",P),x.on("click",F),x.on("dblclick",z),c.on("click",C),x.classed("wellconnected",function(t){return t.hasOwnProperty("wellconnected")}),t.$on("changeSizeBy",function(t,e){c.selectAll("circle").transition().duration(250).attr("r",function(t){return t[e]?g[e](t[e]):l})}),t.$on("toggleLink",function(e,n){o.map(t.entityTypes,function(e,n){c.selectAll("."+n+"-link").classed({visible:function(e){return!t.connectionTypes[e.type]||t.entityTypes[e.source.type]&&t.entityTypes[e.target.type]},hidden:function(e){return!t.connectionTypes[e.type]||!t.entityTypes[e.source.type]||!t.entityTypes[e.target.type]}})})}),t.$on("toggleNode",function(e,n){c.selectAll("."+n.name+"-node").classed({visible:n.enabled,hidden:!n.enabled}),c.selectAll("."+n.name+"-link").classed({visible:function(e){return t.connectionTypes[e.type]&&t.entityTypes[e.source.type]&&t.entityTypes[e.target.type]},hidden:function(e){return!t.connectionTypes[e.type]||!t.entityTypes[e.source.type]||!t.entityTypes[e.target.type]}})}),t.$on("selectItem",function(e,n){"location"===n.type?S(t.currentLocation):F(t.currentEntity)})}}var o=["$scope","$http","_","$filter","config",i];t.module("civic-graph").controller("networkCtrl",o)}(angular,RTP);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
