!function(i){"use strict";var a=["ui.bootstrap","leaflet-directive","ngAnimate","templateCache","civic-graph.api","civic-graph.util"],c=["civic-graph.util"];i.module("civic-graph.util",[]),i.module("civic-graph.api",c),i.module("civic-graph",a)}(angular);
!function(e){"use strict";function t(e,t){function i(e){var i=t.getPropertyFromObj(e);this.id=i("id"),this.name=i("name"),this.enabled=i("enable",!0)}function n(e){return new i(e)}function r(){return e.get("/categories")}return{getCategoryModel:n,getAll:r}}t.$inject=["cgApiCaller","cgUtilService"],e.module("civic-graph.api").factory("categoryService",t)}(angular);
!function(t){"use strict";function n(){return{Funding:!0,Data:!0,Employment:!0,Collaboration:!0}}function i(t,i){function o(t){var n=i.getPropertyFromObj(t);this.id=n("id"),this.name=n("name"),this.details=n("details"),this.entity=n("entity"),this.entity_id=n("entity_id")}function c(t){return new o(t)}function r(){return t.get(e)}return{getAll:r,getConnectionTypes:n,getConnectionModel:c}}var e="/connections";i.$inject=["cgApiCaller","cgUtilService"],t.module("civic-graph.api").factory("connectionService",i)}(angular);
!function(i){"use strict";function n(i){function n(n){var t=i.getPropertyFromObj(n);this.id=t("id"),this.year=t("year"),this.amount=t("amount",0)}function t(i){return new n(i)}return{getFinanceModel:t}}n.$inject=["cgUtilService"],i.module("civic-graph.api").factory("financeService",n)}(angular);
!function(n){"use strict";function t(n){function t(t){var i=n.getPropertyFromObj(t);this.id=i("id"),this.year=i("year"),this.amount=i("amount"),this.entity=i("entity","")}function i(n){return new t(n)}return{getFundingConnectionModel:i}}t.$inject=["cgUtilService"],n.module("civic-graph.api").factory("fundingConnectionService",t)}(angular);
!function(t){"use strict";function a(){return{templateUrl:"js/analytic/analytics.html",restrict:"E",scope:{},controller:"analyticsCtrl"}}var c=[a];t.module("civic-graph").directive("analytics",c)}(angular);
!function(o){"use strict";function r(){return{templateUrl:"js/control/controls.html",restrict:"E",scope:{toggleNetwork:"="},controller:"controlCtrl",controllerAs:"control",bindToController:{minConnections:"="}}}var t=[r];o.module("civic-graph").directive("control",t)}(angular);
!function(i,t){"use strict";function s(i){function s(){var i=t(this);i.css("height","55vh")}function c(){var i=t(this);window.innerHeight/3>parseInt(i.css("height"))?i.css("height","55vh"):i.css("height","30vh")}var e;i.mobile&&(e=t("#details-panel"),e.css("height","30vh"),e.scrollTop(0),e.scroll(s),e.click(c))}function c(){return{restrict:"A",link:s}}i.module("civic-graph").directive("addMobileEvents",[c])}(angular,$);
!function(o){"use strict";function c(o,c){o.closeWindow=function(){c.close()}}o.module("civic-graph").controller("modalCtrl",["$scope","$modalInstance",c])}(angular);
!function(e){"use strict";function t(t,i,n,o,s,d,c,a){function r(){var e,i,n,o;for(i in t.categories)if(t.categories.hasOwnProperty(i)){e=t.categories[i];for(n in t.editEntity.categories)t.editEntity.categories.hasOwnProperty(n)&&(o=t.editEntity.categories[n],e.id===o.id&&(e.enabled=o.enabled))}}t.isEditing=!1,t.editEntity=s.getEntityModel(t.entity),t.entityTypes=s.getEntityTypes(),t.influenceTypes=s.getInfluenceTypes();var u;t.categories=[],t.addressSearch=function(e){return i.jsonp("https://dev.virtualearth.net/REST/v1/Locations",{params:{query:e,key:"Ai58581yC-Sr7mcFbYTtUkS3ixE7f6ZuJnbFJCVI4hAtW1XoDEeZyidQz2gLCCyD",jsonp:"JSON_CALLBACK",include:"ciso2"}}).then(function(e){if(a.isDefined(e.data.resourceSets)&&e.data.resourceSets.length>0)return e.data.resourceSets[0].resources})},t.toggleCategory=function(e){if(0===t.editEntity.categories.length)t.editEntity.categories.push(e);else{var i=!1;for(var n in t.editEntity.categories)if(t.editEntity.categories.hasOwnProperty(n)){var o=t.editEntity.categories[n];if(o.id===e.id){i=!0,o.enabled=e.enabled;break}}i||t.editEntity.categories.push(e)}},t.setLocation=function(e,i){t.addressSearch(e.formattedAddress).then(function(n){if(a.isDefined(n[0])){var o=n[0],s=o.address,d=o.point;t.addLocation(i),e.address_line=a.isDefined(s.addressLine)?s.addressLine:"",e.locality=a.isDefined(s.locality)?s.locality:"",e.district=a.isDefined(s.adminDistrict)?s.adminDistrict:"",e.country=a.isDefined(s.countryRegion)?s.countryRegion:null,e.country_code=a.isDefined(s.countryRegionIso2)?s.countryRegionIso2:"",e.coordinates=a.isDefined(d.coordinates)?d.coordinates:null,e.postal_code=a.isDefined(s.postalCode)?s.postalCode:null}})},t.addLocation=function(e){e&&t.editEntity.locations.push(c.getLocationModel())},t.addKeyPerson=function(){o.some(t.editEntity.key_people,{name:"",id:null})||t.editEntity.key_people.push({name:"",id:null})},t.setFundingConnection=function(e,t){t.entity_id=e.id},t.addFundingConnection=function(e){o.some(e,{entity:""})||e.push({entity:"",amount:null,year:null,id:null})},t.setConnection=function(e,t){t.entity_id=e.id},t.addConnection=function(e){o.some(e,{entity:"",id:null})||e.push({entity:"",id:null,details:null})},t.addFinance=function(e){o.every(e,function(e){return e.amount>0&&e.year>1750})&&e.push({amount:null,year:null,id:null})},t.save=function(){function e(e){t.isSaving=!1,t.$emit("editEntitySuccess",e),t.cancelEdit()}function i(){t.isError=!0,n(function(){t.isError=!1},2e3)}t.isSaving=!0,s.saveEntity(t.editEntity.generateDBModel()).then(e,i)},t.cancelEdit=function(){t.isOpen=!1},t.$watch("entity",function(i,n){e.equals(i,n)||(t.editEntity=s.getEntityModel(i),t.categories=e.copy(u),r(),t.isEditing=a.isDefined(t.editEntity.id))}),d.getAll().then(function(i){u=i.categories,t.categories=e.copy(u)})}t.$inject=["$scope","$http","$timeout","_","entityService","categoryService","locationService","cgUtilService"],e.module("civic-graph").controller("editCtrl",t)}(angular);
!function(t){"use strict";function e(){return{templateUrl:"js/edit-entity/edit.html",restrict:"E",scope:{entity:"=",entities:"=",isOpen:"="},controller:"editCtrl"}}var i=[e];t.module("civic-graph").directive("editEntity",i)}(angular);
!function(o){"use strict";o.module("civic-graph").constant("_",window._).config(["$locationProvider","$compileProvider",function(o,n){o.html5Mode(!0),n.debugInfoEnabled(!0)}]).filter("thousandSuffix",function(){return function(o,n){var t,i=["k","M","G","T","P","E"];return window.isNaN(o)?null:o<1e3?o:(t=Math.floor(Math.log(o)/Math.log(1e3)),(o/Math.pow(1e3,t)).toFixed(n)+i[t-1])}})}(angular);
!function(t){"use strict";function e(t,e,i,n,o){function a(){t.$broadcast("triggerNetworkDraw")}t.entities=[],t.searchItems=null,t.categories=[],t.currentLocation=null,t.clickedLocation={},t.clickedLocation.location=null,t.clickedEntity={},t.clickedEntity.entity=null,t.editing=!1,t.actions={interacted:!1},t.showsearchMB=!1,t.showAnalytics=!1,t.entityTypes=n.getEntityTypes(),t.connectionTypes=o.getConnectionTypes(),t.status={isNetworkShown:!0,license:!0,networkLoading:!0},t.toggleAnalytics=function(){t.showAnalytics=!t.showAnalytics},this.minConnections=t.minConnections=2;var c=this;t.$watch("minConnections",a),t.connectionChange=function(){console.log(c.minConnections),t.minConnections=c.minConnections,t.$broadcast("triggerNetworkDraw")},t.hydePartials=function(e){"search"===e?(t.editing=!1,t.settingsEnabled=!1):"settings"===e?(t.editing=!1,t.showsearchMB=!1):"edit"===e?(t.settingsEnabled=!1,t.showsearchMB=!1):(t.editing=!1,t.settingsEnabled=!1,t.showsearchMB=!1)},t.showSearch=function(){t.hydePartials("search"),t.showsearchMB=!t.showsearchMB,t.status.license=!1},t.toggleSettings=function(){t.hydePartials("settings"),t.settingsEnabled=!t.settingsEnabled},t.startEdit=function(e){t.currentEntity=e,t.mobile&&t.hydePartials("edit"),t.editing=!0},t.switchView=function(){t.status.isNetworkShown=!t.status.isNetworkShown,t.status.isNetworkShown&&t.$broadcast("triggerNetworkDraw")},window.mobilecheck=function(){var t=!1,e=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,i=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i;return function(n){(e.test(n)||i.test(n.substr(0,4)))&&(t=!0)}(navigator.userAgent||navigator.vendor||window.opera),t},t.mobile=window.mobilecheck(),t.settingsEnabled=!t.mobile,e(function(){n.getAll().then(function(e){t.entities=e.nodes;var n=i.uniq(i.pluck(i.flatten(i.pluck(t.entities,"locations")),"locality")),o=i.map(n,function(e){var n=i.filter(t.entities,i.flow(i.property("locations"),i.partialRight(i.any,{locality:e})));return{name:e,type:"location",entities:n,dict:i.zipObject(i.pluck(n,"name"),i.pluck(n,"index"))}});t.searchItems=o.concat(t.entities),t.overviewUrl="js/overview/overview.html",t.$broadcast("triggerNetworkDraw")})},100),t.overviewUrl=null,t.setEntity=function(e){t.currentLocation=null,t.currentEntity=e,t.editing&&t.stopEdit(),t.$broadcast("entityChange")},t.setEntityID=function(e){t.setEntity(i.find(t.entities,{id:e}))},t.setLocation=function(e){t.currentLocation=e,t.editing&&t.stopEdit(),t.$broadcast("itemChange")},t.selectItem=function(e){"location"===e.type?t.setLocation(e):t[e%1===0?"setEntityID":"setEntity"](e),t.$broadcast("selectItem",e)},t.$on("setCurrentEntity",function(e,i){t.currentEntity=i.value}),t.$on("setCurrentLocation",function(e,i){t.currentLocation=i.value}),t.setEntities=function(e){t.entities=e},t.stopEdit=function(){t.editing=!1},t.$on("editEntitySuccess",function(e){t.setEntities(e.nodes),t.$broadcast("triggerNetworkDraw")}),t.animationsEnabled=!0,t.toggleNode=function(e){console.log("Inside the controlCtrl toggleNode"),t.$broadcast("toggleNode",{name:e,enabled:t.entityTypes[e]})},t.toggleLink=function(e){t.$broadcast("toggleLink",{name:e,enabled:t.connectionTypes[e]})}}var i=["$scope","$timeout","_","entityService","connectionService",e];t.module("civic-graph").controller("homeCtrl",i)}(angular);
!function(i){"use strict";var a=[];i.module("civic-graph").directive("map",a)}(angular);
!function(e){"use strict";function n(e,n,t,i,c){function o(){function o(i){var o=n("filter")(e.entities,function(n){return n.collaborations.length>=e.minConnections}),a={};t.forEach(t.keys(i.connections),function(e){a[e]=[]}),t.forEach(i.connections,function(e,n){t.forEach(e,function(e){var i=t.find(o,{id:e.source}),r=t.find(o,{id:e.target});c.isDefined(i)&&c.isDefined(r)&&a[n].push({source:i,target:r})})}),t.forEach(t.keys(e.entityTypes),function(n){var i=t.takeRight(t.sortBy(t.filter(e.entities,{type:n}),"collaborations.length"),5);t.forEach(i,function(e){e.wellconnected=!0})}),o=t.sortBy(o,function(e){return e.wellconnected?1:0}),r(o,a)}i.getAll().then(o)}e.isLoading=!0,e.connections={},o(),e.safeApply=function(e){var n=this.$root.$$phase;"$apply"===n||"$digest"===n?e&&"function"==typeof e&&e():this.$apply(e)},e.$on("triggerNetworkDraw",o),e.$on("viewChange",function(e){console.log(e)});var a,r=function(n,i){e.isLoading=!1;var o=d3.select("#network");o.selectAll("*").remove();var r=o.node().getBoundingClientRect(),s=r.height,l=r.width;a=6;var u=7,d={Individual:{x:1,y:1},"For-Profit":{x:1,y:-1},"Non-Profit":{x:-1,y:1},Government:{x:-1,y:-1}},f=10,y=50,p=d3.max(n,function(e){return parseInt(e.employees)}),k=d3.max(n,function(e){return parseInt(e.followers)}),g={employees:d3.scale.sqrt().domain([10,p]).range([f,y]),followers:d3.scale.sqrt().domain([10,k]).range([f,y])},m={},h=d3.layout.force().size([l,s]).nodes(n).links(t.flatten(t.values(i))).charge(function(e){return e.employees?-2*g.employees(e.employees):-20}).linkStrength(0).linkDistance(50);t.forEach(i,function(e,n){m[n]=o.selectAll(".link ."+n+"-link").data(e).enter().append("line").attr("class",function(e){return c.isDefined(e.source)&&c.isDefined(e.target)?(e.type=n,"link "+n+"-link "+e.source.type+"-link "+e.target.type+"-link"):""})});var x=o.selectAll(".node").data(n).enter().append("g").attr("class",function(e){return"node "+e.type+"-node"}).call(h.drag);x.append("circle").attr("r",function(e){return e.employees?g.employees(e.employees):u}),x.append("text").text(function(e){return e.nickname?e.nickname:e.name}).attr("dx",function(){return-.065*this.getComputedTextLength()/2+"em"}).attr("dy",function(){return.08*this.parentNode.getBBox().height/2+.5+"em"}),h.on("tick",function(e){var i=a*e.alpha;t.forEach(n,function(e){e.x&&d[e.type]&&(e.x+=d[e.type].x*i,e.y+=d[e.type].y*i,e.x=Math.max(y,Math.min(l-y,e.x)),e.y=Math.max(y,Math.min(s-y,e.y)))}),t.forEach(m,function(e){e.attr("x1",function(e){return e.source.x}).attr("y1",function(e){return e.source.y}).attr("x2",function(e){return e.target.x}).attr("y2",function(e){return e.target.y})}),x.attr("transform",function(e){return"translate("+e.x+","+e.y+")"})});var E=function(e){requestAnimationFrame(function n(){for(var t=0;t<e;t++)h.tick();h.alpha()>0&&requestAnimationFrame(n)})};e.mobile&&(a=2,console.log("in mobile")),E(7),h.start();var v={};t.forEach(m,function(e){t.forEach(e[0],function(e){var n=e.__data__.source,t=e.__data__.target;v[n.index+","+t.index]=!0,v[t.index+","+n.index]=!0})});var L,T=function(e,n){return v[e.index+","+n.index]||e.index===n.index},A=function(e){x.classed("focused",function(n){return T(e,n)}).classed("unfocused",function(n){return!T(e,n)}),t.forEach(m,function(n){n.classed("focused",function(n){return e.index===n.source.index||e.index===n.target.index}).classed("unfocused",function(n){return!(e.index===n.source.index||e.index===n.target.index)})})},w=function(n){e.currentEntity!==n&&e.setEntity(n),e.safeApply(),A(n)},$=function(n){x.classed("focused",!1).classed("unfocused",!1),t.forEach(m,function(e){e.classed("focused",!1).classed("unfocused",!1)}),n.fixed=!1,e.clickedEntity.entity&&h.resume()},b=function(n){e.clickedEntity.entity||e.editing||e.currentLocation||(L=setTimeout(function(){w(n)},500)),e.actions.interacted=!0,e.safeApply()},D=function(n){e.clickedEntity.entity||e.currentLocation||($(n),clearTimeout(L)),e.actions.interacted=!0,e.safeApply()},_=function(n){e.safeApply(),x.classed("focused",function(e){return e.name in n.dict}).classed("unfocused",function(e){return!(e.name in n.dict)}),t.forEach(m,function(e){e.classed("focused",function(e){return e.source.name in n.dict&&e.target.name in n.dict}).classed("unfocused",function(e){return!(e.source.name in n.dict&&e.target.name in n.dict)})})},B=function(){x.classed("focused",!1).classed("unfocused",!1),t.forEach(m,function(e){e.classed("focused",!1).classed("unfocused",!1)}),e.clickedLocation.location&&h.resume()},P=function(n){e.showLicense=!1,e.clickedEntity.entity&&($(e.clickedEntity.entity),e.clickedEntity.entity=null),e.clickedLocation.location!==n?(B(e.clickedLocation.location),_(n)):e.clickedLocation.location===n&&(e.clickedLocation.location=n,_(n)),d3.event&&d3.event.stopPropagation(),e.actions.interacted=!0,e.safeApply()},C=function(n){e.showLicense=!1,c.isDefined(e.clickedLocation)&&(c.isDefined(e.clickedLocation.location)&&(B(e.clickedLocation.entity),e.clickedLocation.location=null),e.clickedEntity.entity===n?(e.clickedEntity.entity=null,w(n)):(e.clickedEntity.entity&&$(e.clickedEntity.entity),e.clickedEntity.entity=n,w(n))),d3.event&&d3.event.stopPropagation(),e.actions.interacted=!0,e.safeApply()},I=function(){c.isDefined(e.clickedLocation)&&(c.isDefined(e.clickedLocation.location)&&($(e.clickedLocation.location),e.clickedLocation.location=null),c.isDefined(e.clickedEntity.entity)&&($(e.clickedEntity.entity),e.clickedEntity.entity=null)),e.safeApply()},S=function(n){n.fixed?$(n):(n.x=l/2,n.y=s/2,n.px=l/2,n.py=s/2,n.fixed=!0,e.clickedEntity.entity=n),e.actions.interacted=!0,e.safeApply()};x.on("mouseover",b),x.on("mouseout",D),x.on("click",C),x.on("dblclick",S),o.on("click",I),x.classed("wellconnected",function(e){return e.hasOwnProperty("wellconnected")}),e.$on("changeSizeBy",function(e,n){o.selectAll("circle").transition().duration(250).attr("r",function(e){return e[n]?g[n](e[n]):u})}),e.$on("toggleLink",function(n,i){e.connectionTypes[i.name]=i.enabled,t.map(e.entityTypes,function(n,t){o.selectAll("."+t+"-link").classed({visible:function(n){return e.connectionTypes[n.type]&&e.entityTypes[n.source.type]&&e.entityTypes[n.target.type]},hidden:function(n){return!e.connectionTypes[n.type]||!e.entityTypes[n.source.type]||!e.entityTypes[n.target.type]}})})}),e.$on("toggleNode",function(n,t){e.entityTypes[t.name]=t.enabled,o.selectAll("."+t.name+"-node").classed({visible:t.enabled,hidden:!t.enabled}),o.selectAll("."+t.name+"-link").classed({visible:function(n){return e.connectionTypes[n.type]&&e.entityTypes[n.source.type]&&e.entityTypes[n.target.type]},hidden:function(n){return!e.connectionTypes[n.type]||!e.entityTypes[n.source.type]||!e.entityTypes[n.target.type]}})}),e.$on("selectItem",function(n,t){console.log("Select Item"),"location"===t.type?P(e.currentLocation):C(e.currentEntity)})}}n.$inject=["$scope","$filter","_","connectionService","cgUtilService"],e.module("civic-graph").controller("networkCtrl",n)}(angular,RTP);
!function(r){"use strict";function t(){return{restrict:"E",templateUrl:"js/network/network.html",controller:"networkCtrl"}}var e=[t];r.module("civic-graph").directive("network",e)}(angular);
!function(e){"use strict";e.module("civic-graph").directive("input",function(){return{restict:"E",require:"?ngModel",link:function(e,r,t,i){"type"in t&&"range"===t.type.toLowerCase()&&i.$parsers.push(parseFloat)}}})}(angular);
!function(e){"use strict";function t(e,t){e.categorizedEntities={},t.forEach(t.keys(e.entityTypes),function(i){e.categorizedEntities[i]=t.filter(e.entities,{type:i})})}e.module("civic-graph").controller("overviewCtrl",["$scope","_",t])}(angular);
!function(r){"use strict";function n(r){return!("undefined"==typeof r||null===r)}function t(r){return n(r)&&!Array.isArray(r)&&"object"==typeof r}function e(r){var t=n(r)?r:{};return function(r,e){var i=n(e)?e:null;return n(t[r])?t[r]:i}}function i(r,n){var e=Array.isArray(r)?r.filter(t).map(n):[];return e.concat([n()])}function u(){return{isDefined:n,isObject:t,getPropertyFromObj:e,loopAndInit:i}}r.module("civic-graph.util").factory("cgUtilService",u)}(angular);
!function(t){"use strict";function e(t){t.defaults.headers.common["X-Requested-With"]="XMLHttpRequest"}e.$inject=["$httpProvider"],t.module("civic-graph.api").config(e)}(angular);
!function(t){"use strict";function r(t,r){function a(t){return console.error("Recieved an error from API with this message: %O",t.data),r.reject(t)}function i(t){return t.data}function c(r,c){return t.get(e+r,{params:c,headers:n}).then(i,a)}function o(r,c){return t.post(e+r,c,{headers:n}).then(i,a)}return{get:c,post:o}}var e="https://api.civicgraph.io/api",n={};r.$inject=["$http","$q"],t.module("civic-graph.api").factory("cgApiCaller",r)}(angular);
!function(e){"use strict";function i(e){function i(i){function t(){var t=e.isDefined(i)?i:{},o=e.isDefined(t.address_line)?t.address_line+" ":"",c=e.isDefined(t.locality)?t.locality+", ":"",n=e.isDefined(t.country_code)?t.country_code+" ":"",r=e.isDefined(t.postal_code)?t.postal_code:"";return(o+c+n+r).trim()}var o=this,c=e.getPropertyFromObj(i);o.id=c("id"),o.address_line=c("address_line"),o.locality=c("locality"),o.district=c("district"),o.postal_code=c("postal_code"),o.country=c("country"),o.country_code=c("country_code"),o.coordinates=c("coordinates"),o.formattedAddress=t()}function t(e){return new i(e)}return{getLocationModel:t}}i.$inject=["cgUtilService"],e.module("civic-graph.api").factory("locationService",i)}(angular);
!function(e){"use strict";function n(){return{Government:!0,"For-Profit":!0,"Non-Profit":!0,Individual:!0}}function o(){return["Local","National","Global"]}function t(e,t,i,p,r,a,c){function l(e){function n(){var e=new l(o);return e.locations.pop(),e.locations.pop(),e.grants_received.pop(),e.grants_received.pop(),e.grants_given.pop(),e.grants_given.pop(),e.investments_received.pop(),e.investments_received.pop(),e.investments_made.pop(),e.investments_made.pop(),e.data_given.pop(),e.data_given.pop(),e.data_received.pop(),e.data_received.pop(),e.collaborations.pop(),e.collaborations.pop(),e.key_people.pop(),e.key_people.pop(),e.employments.pop(),e.employments.pop(),e.revenues.pop(),e.revenues.pop(),e.expenses.pop(),e.expenses.pop(),e.categories.pop(),e.categories.pop(),e.description="",e}var o=this,d=c.isDefined(e)?e:{},s=c.getPropertyFromObj(e);o.id=s("id"),o.name=s("name"),o.influence=s("influence"),o.type=s("type"),o.nickname=s("nickname"),o.url=s("url"),o.twitter_handle=s("twitter_handle"),o.employees=s("employees"),o.locations=c.loopAndInit(d.locations,r.getLocationModel),o.grants_received=c.loopAndInit(d.grants_received,t.getFundingConnectionModel),o.investments_received=c.loopAndInit(d.investments_received,t.getFundingConnectionModel),o.grants_given=c.loopAndInit(d.grants_given,t.getFundingConnectionModel),o.investments_made=c.loopAndInit(d.investments_made,t.getFundingConnectionModel),o.data_given=c.loopAndInit(d.data_given,i.getConnectionModel),o.data_received=c.loopAndInit(d.data_received,i.getConnectionModel),o.collaborations=c.loopAndInit(d.collaborations,i.getConnectionModel),o.key_people=c.loopAndInit(d.key_people,i.getConnectionModel),o.employments=c.loopAndInit(d.employments,i.getConnectionModel),o.revenues=c.loopAndInit(d.revenues,p.getFinanceModel),o.expenses=c.loopAndInit(d.expenses,p.getFinanceModel),o.categories=c.loopAndInit(d.categories,a.getCategoryModel),o.generateDBModel=n}function d(e){return new l(e)}function s(){return e.get("/entities")}function g(n){return e.post("/save",{entity:n})}return{getEntityModel:d,getEntityTypes:n,getInfluenceTypes:o,getAll:s,saveEntity:g}}t.$inject=["cgApiCaller","fundingConnectionService","connectionService","financeService","locationService","categoryService","cgUtilService"],e.module("civic-graph.api").factory("entityService",t)}(angular);
!function(c){"use strict";function n(c){}c.module("civic-graph").controller("analyticsCtrl",["$scope",n])}(angular);
!function(e){"use strict";function o(e,o,n,t,i){function l(){console.log("inside controlCtrl switch view"),c.changeView(c.toggleNetwork?"Network":"Map")}var c=this;c.entityTypes=e.getEntityTypes(),c.connectionTypes=o.getConnectionTypes(),c.sizeByList=[{name:"Employees",value:"employees"},{name:"Twitter Followers",value:"followers"}],c.sizeBy="employees",c.showView={Network:!0,Map:!1},c.switchView=l,c.changeView=function(e){console.log("inside controlCtrl changeview"),t.forEach(t.keys(c.showView),function(o){c.showView[o]=e===o}),n.$broadcast("viewChange",c.showView)},c.showAbout=function(){console.log("Inside the controlCtrl showAbout"),i.open({animation:!1,templateUrl:"control/about.html",controller:"modalCtrl"})},c.toggleNode=function(e){console.log("Inside the controlCtrl toggleNode"),n.$broadcast("toggleNode",{name:e,enabled:c.entityTypes[e]})},c.toggleLink=function(e){console.log("Inside the controlCtrl toggleLink"),n.$broadcast("toggleLink",{name:e,enabled:c.connectionTypes[e]})},c.changeSizeBy=function(){n.$broadcast("changeSizeBy",c.sizeBy)},c.changeSizeBy()}var n=["entityService","connectionService","$rootScope","_","$modal",o];e.module("civic-graph").controller("controlCtrl",n)}(angular);
!function(e){"use strict";function n(e,n){e.itemsShownDefault={key_people:3,grants_given:3,grants_received:3,investments_made:3,investments_received:3,collaborations:3,employments:3,relations:3,data_given:3,data_received:3,revenues:3,expenses:3},e.itemsShown=n.clone(e.itemsShownDefault),e.$on("entityChange",function(){e.itemsShown=n.clone(e.itemsShownDefault)}),e.showMore=function(n){e.itemsShown[n]=e.currentEntity[n].length},e.showLess=function(n){e.itemsShown[n]=e.itemsShownDefault[n]}}e.module("civic-graph").controller("detailsCtrl",["$scope","_",n])}(angular);
!function(t,e,n){"use strict";function i(t,i,o,r,a){t.options={center:{lat:20,lng:-40,zoom:3},defaults:{tileLayer:"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZGF2aWRscm50IiwiYSI6IjA0M2RkNzMzZWJmNzEzNGYzMTdhYTExYzAyZmU4ZTE1In0.TNYlFta2VItrkn4L0Z9BJQ",tileLayerOptions:{detectRetina:!0,reuseTiles:!1},zoomControl:!1,attributionControl:!1}},t.safeApply=function(t){var e=this.$root.$$phase;"$apply"===e||"$digest"===e?t&&"function"==typeof t&&t():this.$apply(t)},i(function(){var i=function(t){var n=t.data,i=e.layout.pie().sort(null).value(function(t){return t.value}),o=e.svg.arc().outerRadius(t.r).innerRadius(t.r-10),r=t.r+t.strokeWidth,a=2*r,c=a,l=document.createElementNS(e.ns.prefix.svg,"svg"),s=e.select(l).data(n).attr("class","piechart").attr("width",a).attr("height",c),p=s.selectAll(".arc").data(i(n)).enter().append("g").attr("class","arc").attr("transform","translate("+r+","+r+")");return p.append("path").attr("d",o).attr("class",function(t){return t.data.type+"-arc"}),p.append("svg:text").text(function(e,n){if(0===n)return t.count}).attr("x",-4*t.count.toString().length).attr("dy",5).attr("class","arcText"),window.XMLSerializer?(new window.XMLSerializer).serializeToString(l):l.xml?l.xml:""};o.getMap().then(function(e){function o(t){var e=t.getAllChildMarkers(),o=e.length,a=r.pluck(e,"options"),c=r.map(r.countBy(a,"type"),function(t,e){return{type:e,value:t}}),l=28,s=1,p=2*(l+s),u=i({data:c,r:l,strokeWidth:s,count:o});return new n.DivIcon({html:u,className:"marker-cluster",iconSize:new n.point(p,p)})}function a(t){function e(e){if(r.every(e.coordinates)){"40.78200"===e.coordinates[0].toFixed(5)&&"-73.83170"===e.coordinates[1].toFixed(5)&&(e.coordinates[0]=40.77065,e.coordinates[1]=-73.97406);var i=n.marker(e.coordinates,{icon:s[t.type],title:t.name,entity_id:t.id,message:t.name,type:t.type});p.addLayer(i)}}r.forEach(t.locations,e)}function c(t){console.error(t.message+"  %O",t)}var l=t.entities;e.invalidateSize(),new n.Control.Zoom({position:"topright"}).addTo(e),n.control.locate({position:"topright",showPopup:!1,icon:"fa fa-location-arrow"}).addTo(e);var s={"Non-Profit":n.icon({iconUrl:"img/marker-nonprof.svg",iconSize:[60,60]}),"For-Profit":n.icon({iconUrl:"img/marker-prof.svg",iconSize:[60,60]}),Individual:n.icon({iconUrl:"img/marker-ind.svg",iconSize:[60,60]}),Government:n.icon({iconUrl:"img/marker-gov.svg",iconSize:[60,60]})},p=n.markerClusterGroup({spiderfyOnMaxZoom:!0,showCoverageOnHover:!1,iconCreateFunction:o,maxClusterRadius:30,spiderfyDistanceMultiplier:1.3});console.log("Original: %O",t.entities),console.log("Filtered: %O",l),r.forEach(l,a),e.addLayer(p),e.on("locationerror",c),p.on("click",function(e){t.setEntityID(e.layer.options.entity_id),t.clickedEntity.entity=t.currentEntity,t.actions.interacted=!0,t.settingsEnabled&&t.mobile&&t.toggleSettings(),t.safeApply()}),e.on("click",function(){t.clickedEntity.entity=null,t.actions.interacted=!0,t.safeApply()}),t.$on("selectItem",function(){var n=t.currentEntity.locations.length>0?r.pluck(t.currentEntity.locations,"coordinates"):null;n.length>0&&e.setView(n[0],11),t.actions.interacted=!0,t.safeApply()})})})}var o=["$scope","$timeout","leafletData","_","$filter",i];t.module("civic-graph").controller("mapCtrl",o)}(angular,d3,L);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
