!function(e){"use strict";var c=["ui.bootstrap","leaflet-directive","ngAnimate","mscg.network.graph","mscg.app.service"],r=["mscg.app.service"],a=[];e.module("mscg.app.service",a),e.module("mscg.network.graph",r),e.module("civic-graph",c)}(angular);
!function(t){"use strict";function a(){return{templateUrl:"/js/analytic/analytics.html",restrict:"E",scope:{},controller:"analyticsCtrl"}}var c=[a];t.module("civic-graph").directive("analytics",c)}(angular);
!function(e){"use strict";function o(e,o,t,n,i){function c(){u.entityTypes=e.getEntityTypes(),u.connectionTypes=o.getConnectionTypes(),u.sizeByList=[{name:"Employees",value:"employees"},{name:"Twitter Followers",value:"followers"}],u.sizeBy="employees",u.showView={Network:!0,Map:!1},u.changeView=a,u.showAbout=l,u.toggleNode=s,u.toggleLink=r,u.changeSizeBy=g,u.switchView=y,g()}function a(e){n.forEach(n.keys(u.showView),function(o){u.showView[o]=e===o}),t.$broadcast("viewChange")}function l(){i.open({animation:!1,templateUrl:"control/about.html",controller:"modalCtrl"})}function s(e){t.$broadcast("toggleNode",{name:e,enabled:u.entityTypes[e]})}function r(e){t.$broadcast("toggleLink",{name:e,enabled:u.connectionTypes[e]})}function y(){a(u.toggleNetwork?"Network":"Map")}function g(){console.debug("Setting the sizeBy value to %O",u.sizeBy),t.$broadcast("changeSizeBy",u.sizeBy)}var u=this;c()}var t=["entityService","connectionService","$rootScope","_","$modal",o];e.module("civic-graph").controller("controlCtrl",t)}(angular);
!function(o){"use strict";function r(){return{templateUrl:"/js/control/controls.html",restrict:"E",scope:{},controller:"controlCtrl",controllerAs:"control",bindToController:{minConnections:"=",toggleNetwork:"="}}}var t=[r];o.module("civic-graph").directive("control",t)}(angular);
!function(e){"use strict";e.module("civic-graph").directive("input",function(){return{restict:"E",require:"?ngModel",link:function(e,r,t,i){"type"in t&&"range"===t.type.toLowerCase()&&i.$parsers.push(parseFloat)}}})}(angular);
!function(t){"use strict";function e(){return{templateUrl:"/js/edit-entity/edit.html",restrict:"E",scope:{entity:"=",entities:"=",isOpen:"="},controller:"editCtrl"}}var i=[e];t.module("civic-graph").directive("editEntity",i)}(angular);
!function(i,t){"use strict";function s(i){function s(){var i=t(this);i.css("height","55vh")}function c(){var i=t(this);window.innerHeight/3>parseInt(i.css("height"))?i.css("height","55vh"):i.css("height","30vh")}var e;i.mobile&&(e=t("#details-panel"),e.css("height","30vh"),e.scrollTop(0),e.scroll(s),e.click(c))}function c(){return{restrict:"A",link:s}}i.module("civic-graph").directive("addMobileEvents",[c])}(angular,$);
!function(o){"use strict";function c(o,c){o.closeWindow=function(){c.close()}}o.module("civic-graph").controller("modalCtrl",["$scope","$modalInstance",c])}(angular);
!function(t){"use strict";t.module("civic-graph").constant("_",window._).constant("config",{apiHost:"https://api.civicgraph.io/"}).config(["$locationProvider","$httpProvider","$compileProvider",function(t,o,i){t.html5Mode(!0),o.defaults.headers.common["X-Requested-With"]="XMLHttpRequest",i.debugInfoEnabled(!0)}]).filter("thousandSuffix",function(){return function(t,o){var i,n=["k","M","G","T","P","E"];return window.isNaN(t)?null:t<1e3?t:(i=Math.floor(Math.log(t)/Math.log(1e3)),(t/Math.pow(1e3,i)).toFixed(o)+n[i-1])}})}(angular);
!function(i){"use strict";function e(i){function e(){const e=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,a=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,o=i.navigator.userAgent||i.navigator.vendor||i.opera;return e.test(o)||a.test(o.substr(0,4))}return{mobileCheck:e}}e.$inject=["$window"],i.module("mscg.app.service").factory("CivicGraphService",e)}(angular);
!function(t){"use strict";function n(t,n,e,i,o){function s(){t.random=(new Date).getTime(),t.entities=[],t.searchItems=null,t.categories=[],t.currentLocation=null,t.clickedLocation={},t.clickedLocation.location=null,t.clickedEntity={},t.clickedEntity.entity=null,t.editing=!1,t.actions={interacted:!1},t.showsearchMB=!1,t.showAnalytics=!1,t.entityTypes=e.getEntityTypes(),t.connectionTypes=i.getConnectionTypes(),t.status={isNetworkShown:!0,license:!0,networkLoading:!0},t.mobile=o.mobileCheck(),t.settingsEnabled=!t.mobile,t.overviewUrl=null,t.sizeBy="employees",L.minConnections=t.minConnections=0,t.toggleAnalytics=w,t.connectionChange=a,t.hydePartials=l,t.showSearch=m,t.toggleSettings=b,t.startEdit=E,t.setEntity=h,t.setEntityID=y,t.setLocation=f,t.selectItem=u,t.setEntities=g,t.stopEdit=p,t.$watch("minConnections",c),t.$on("setCurrentEntity",v),t.$on("setCurrentLocation",C),t.$on("editEntitySuccess",r),setTimeout(d,100)}function c(){t.$broadcast("entitiesLoaded")}function a(){t.minConnections=L.minConnections,t.$broadcast("entitiesLoaded")}function r(n){t.setEntities(n.nodes),t.$broadcast("entitiesLoaded")}function l(n){"search"===n?(t.editing=!1,t.settingsEnabled=!1):"settings"===n?(t.editing=!1,t.showsearchMB=!1):"edit"===n?(t.settingsEnabled=!1,t.showsearchMB=!1):(t.editing=!1,t.settingsEnabled=!1,t.showsearchMB=!1)}function d(){e.getFromAPI().then(function(e){t.entities=e.nodes;var i=n.uniq(n.pluck(n.flatten(n.pluck(t.entities,"locations")),"locality")),o=n.map(i,function(e){var i=n.filter(t.entities,n.flow(n.property("locations"),n.partialRight(n.any,{locality:e})));return{name:e,type:"location",entities:i,dict:n.zipObject(n.pluck(i,"name"),n.pluck(i,"index"))}});t.searchItems=o.concat(t.entities),t.overviewUrl="js/overview/overview.html?i="+t.random,t.$broadcast("entitiesLoaded")})}function u(n){"location"===n.type?t.setLocation(n):t[n%1===0?"setEntityID":"setEntity"](n),t.$broadcast("selectItem",n)}function h(n){t.currentLocation=null,t.currentEntity=n,t.editing&&t.stopEdit(),t.$broadcast("entityChange")}function y(e){t.setEntity(n.find(t.entities,{id:e}))}function g(n){t.entities=n}function f(n){t.currentLocation=n,t.editing&&t.stopEdit(),t.$broadcast("itemChange")}function m(){t.hydePartials("search"),t.showsearchMB=!t.showsearchMB,t.status.license=!1}function E(n){t.currentEntity=n,t.mobile&&t.hydePartials("edit"),t.editing=!0}function p(){t.editing=!1}function w(){t.showAnalytics=!t.showAnalytics}function b(){t.hydePartials("settings"),t.settingsEnabled=!t.settingsEnabled}function v(n,e){t.currentEntity=e.value}function C(n,e){t.currentLocation=e.value}var L=this;s()}n.$inject=["$scope","_","entityService","connectionService","CivicGraphService"],t.module("civic-graph").controller("homeCtrl",n)}(angular);
!function(i){"use strict";var a=[];i.module("civic-graph").directive("map",a)}(angular);
!function(t){"use strict";function r(){return{restrict:"E",templateUrl:"/js/network/network.template.html",controller:"networkCtrl"}}t.module("civic-graph").directive("network",r)}(angular);
!function(t,e){"use strict";function n(t){return void 0!==t&&null!==t}function i(t,i){function c(c,o){function a(t){i.mobileCheck()?s(t):r(t)}function r(i){if(!i)return void console.log("This happened");var o=i.entityArray,a=i.connectionArray;l.selectAll("*").remove();var r=l.node().getBoundingClientRect(),s=r.height,u=r.width,d=6,y=7,f={Individual:{x:1,y:1},"For-Profit":{x:1,y:-1},"Non-Profit":{x:-1,y:1},Government:{x:-1,y:-1}},p=10,h=50,m=e.max(o,function(t){return parseInt(t.employees)}),g=e.max(o,function(t){return parseInt(t.followers)}),k={employees:e.scale.sqrt().domain([10,m]).range([p,h]),followers:e.scale.sqrt().domain([10,g]).range([p,h])},x={},E=e.layout.force().size([u,s]).nodes(o).links(t.flatten(t.values(a))).charge(function(t){return t.employees?-2*k.employees(t.employees):-20}).linkStrength(0).linkDistance(50);t.forEach(a,function(t,e){x[e]=l.selectAll(".link ."+e+"-link").data(t).enter().append("line").attr("class",function(t){return n(t.source)&&n(t.target)?(t.type=e,"link "+e+"-link "+t.source.type+"-link "+t.target.type+"-link"):""})});var v=l.selectAll(".node").data(o).enter().append("g").attr("class",function(t){return"node "+t.type+"-node"}).call(E.drag);v.append("circle").attr("r",function(t){return t.employees?k.employees(t.employees):y}),v.append("text").text(function(t){return t.nickname?t.nickname:t.name}).attr("dx",function(){return-.065*this.getComputedTextLength()/2+"em"}).attr("dy",function(){return.08*this.parentNode.getBBox().height/2+.5+"em"}),E.on("tick",function(e){var n=d*e.alpha;t.forEach(o,function(t){t.x&&f[t.type]&&(t.x+=f[t.type].x*n,t.y+=f[t.type].y*n,t.x=Math.max(h,Math.min(u-h,t.x)),t.y=Math.max(h,Math.min(s-h,t.y)))}),t.forEach(x,function(t){t.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}),v.attr("transform",function(t){return"translate("+t.x+","+t.y+")"})});var L=function(t){requestAnimationFrame(function e(){for(var n=0;n<t;n++)E.tick();E.alpha()>0&&requestAnimationFrame(e)})};c.mobile||L(7),E.start();var w={};t.forEach(x,function(e){t.forEach(e[0],function(t){var e=t.__data__.source,n=t.__data__.target;w[e.index+","+n.index]=!0,w[n.index+","+e.index]=!0})});var M,T=function(t,e){return w[t.index+","+e.index]||t.index===e.index},P=function(e){v.classed("focused",function(t){return T(e,t)}).classed("unfocused",function(t){return!T(e,t)}),t.forEach(x,function(t){t.classed("focused",function(t){return e.index===t.source.index||e.index===t.target.index}).classed("unfocused",function(t){return!(e.index===t.source.index||e.index===t.target.index)})})},b=function(t){c.currentEntity!==t&&c.setEntity(t),c.safeApply(),P(t)},A=function(e){v.classed("focused",!1).classed("unfocused",!1),t.forEach(x,function(t){t.classed("focused",!1).classed("unfocused",!1)}),e.fixed=!1,c.clickedEntity.entity&&E.resume()},B=function(t){c.clickedEntity.entity||c.editing||c.currentLocation||(M=setTimeout(function(){b(t)},500)),c.actions.interacted=!0,c.safeApply()},S=function(t){c.clickedEntity.entity||c.currentLocation||(A(t),clearTimeout(M)),c.actions.interacted=!0,c.safeApply()},$=function(e){c.safeApply(),v.classed("focused",function(t){return t.name in e.dict}).classed("unfocused",function(t){return!(t.name in e.dict)}),t.forEach(x,function(t){t.classed("focused",function(t){return t.source.name in e.dict&&t.target.name in e.dict}).classed("unfocused",function(t){return!(t.source.name in e.dict&&t.target.name in e.dict)})})},F=function(){v.classed("focused",!1).classed("unfocused",!1),t.forEach(x,function(t){t.classed("focused",!1).classed("unfocused",!1)}),c.clickedLocation.location&&E.resume()},C=function(t){c.showLicense=!1,c.clickedEntity.entity&&(A(c.clickedEntity.entity),c.clickedEntity.entity=null),c.clickedLocation.location!==t&&(F(c.clickedLocation.location),c.clickedLocation.location=t,$(t)),e.event&&e.event.stopPropagation(),c.actions.interacted=!0,c.safeApply()},z=function(t){c.showLicense=!1,n(c.clickedLocation)&&(n(c.clickedLocation.location)&&(F(c.clickedLocation.entity),c.clickedLocation.location=null),c.clickedEntity.entity===t?c.clickedEntity.entity=null:(c.clickedEntity.entity&&A(c.clickedEntity.entity),c.clickedEntity.entity=t,b(t))),e.event&&e.event.stopPropagation(),c.actions.interacted=!0,c.safeApply()},I=function(){n(c.clickedLocation)&&(n(c.clickedLocation.location)&&(A(c.clickedLocation.location),c.clickedLocation.location=null),n(c.clickedEntity.entity)&&(A(c.clickedEntity.entity),c.clickedEntity.entity=null)),c.safeApply()},R=function(t){t.fixed?A(t):(t.x=u/2,t.y=s/2,t.px=u/2,t.py=s/2,t.fixed=!0,c.clickedEntity.entity=t),c.actions.interacted=!0,c.safeApply()};v.on("mouseover",B),v.on("mouseout",S),v.on("click",z),v.on("dblclick",R),l.on("click",I),v.classed("wellconnected",function(t){return t.hasOwnProperty("wellconnected")}),c.$on("changeSizeBy",function(t,e){l.selectAll("circle").transition().duration(250).attr("r",function(t){return t[e]?k[e](t[e]):y})}),c.$on("toggleLink",function(e,n){t.map(c.entityTypes,function(t,e){l.selectAll("."+e+"-link").classed({visible:function(t){return!c.connectionTypes[t.type]||c.entityTypes[t.source.type]&&c.entityTypes[t.target.type]},hidden:function(t){return!c.connectionTypes[t.type]||!c.entityTypes[t.source.type]||!c.entityTypes[t.target.type]}})})}),c.$on("toggleNode",function(t,e){l.selectAll("."+e.name+"-node").classed({visible:e.enabled,hidden:!e.enabled}),l.selectAll("."+e.name+"-link").classed({visible:function(t){return c.connectionTypes[t.type]&&c.entityTypes[t.source.type]&&c.entityTypes[t.target.type]},hidden:function(t){return!c.connectionTypes[t.type]||!c.entityTypes[t.source.type]||!c.entityTypes[t.target.type]}})}),c.$on("selectItem",function(t,e){"location"===e.type?C(c.currentLocation):z(c.currentEntity)})}function s(i){function o(){function e(t){var e=f[c.sizeBy](t[c.sizeBy]),n=t.nickname?t.nickname:t.name;h.strokeStyle="#333333",h.font="lighter 11px Segoe UI, HelveticaNeue-Light, sans-serif-light, sans-serif",h.strokeText(n,Math.max(4.5*e,Math.min(u-4.5*e,t.x+d[t.type][0]))-2*n.length,Math.max(4.5*e,Math.min(l-4.5*e,t.y+d[t.type][1]))+10,100)}var i;L++,L>70&&w&&(w=!1,P.stop(),i=new RTP.PinchZoom($("#networkCanvas"),{})),h.clearRect(0,0,u,l),v={},h.strokeStyle="#ccc",t.forEach(c.connections,function(t,e){t.forEach(function(t){var i,o=n(c.connectionTypes[e]),a=n(c.entityTypes[t.target.type]),s=n(c.entityTypes[t.source.type]);o&&a&&s&&(n(c.currentLocation)?t.source.name in c.currentLocation.dict&&t.target.name in c.currentLocation.dict&&(h.beginPath(),i=f[c.sizeBy](t.source[c.sizeBy]),h.moveTo(Math.max(4.5*i,Math.min(u-4.5*i,t.source.x+d[t.source.type][0])),Math.max(4.5*i,Math.min(l-4.5*i,t.source.y+d[t.source.type][1]))),h.lineTo(Math.max(4.5*i,Math.min(u-4.5*i,t.target.x+d[t.target.type][0])),Math.max(4.5*i,Math.min(l-4.5*i,t.target.y+d[t.target.type][1]))),h.strokeStyle=r[e].focused,h.stroke(),h.closePath()):n(c.currentEntity)&&t.source!==c.currentEntity&&t.target!==c.currentEntity||(h.beginPath(),i=f[c.sizeBy](t.source[c.sizeBy]),h.moveTo(Math.max(4.5*i,Math.min(u-4.5*i,t.source.x+d[t.source.type][0])),Math.max(4.5*i,Math.min(l-4.5*i,t.source.y+d[t.source.type][1]))),h.lineTo(Math.max(4.5*i,Math.min(u-4.5*i,t.target.x+d[t.target.type][0])),Math.max(4.5*i,Math.min(l-4.5*i,t.target.y+d[t.target.type][1]))),h.strokeStyle=r[e].focused,h.stroke(),h.closePath(),v[t.source.id]=!0,v[t.target.id]=!0))})});var o=[];T.forEach(function(t){if(c.entityTypes[t.type]){var e;c.currentLocation?t.name in c.currentLocation.dict?(e="focused",h.strokeStyle="white",o.push(t)):(h.strokeStyle="rgba(255, 255, 255, 0.1)",e="unfocused"):!c.currentEntity||v[t.id]||t===c.currentEntity?(e="focused",h.strokeStyle="white",(c.currentEntity||t.wellconnected)&&o.push(t)):(h.strokeStyle="rgba(255, 255, 255, 0.1)",e="unfocused");var n=f[c.sizeBy](t[c.sizeBy]);h.beginPath(),h.fillStyle=r[t.type][e],h.arc(Math.max(4.5*n,Math.min(u-4.5*n,t.x+d[t.type][0])),Math.max(4.5*n,Math.min(l-4.5*n,t.y+d[t.type][1])),4.5*n,0,2*Math.PI),h.fill(),h.lineWidth=1,h.stroke(),h.closePath()}}),o.forEach(e)}var a={nodes:c.entities,links:t.flatten(t.values(c.connections))},r={Government:{focused:"rgba(242, 80, 34, 1)",unfocused:"rgba(242, 80, 34, 0.1)"},"Non-Profit":{focused:"rgba(30, 144, 255, 1)",unfocused:"rgba(30, 144, 255, 0.1)"},"For-Profit":{focused:"rgba(127, 186, 0, 1)",unfocused:"rgba(127, 186, 0, 0.1)"},Individual:{focused:"rgba(255, 175, 44, 1)",unfocused:"rgba(255, 175, 44, 0.1)"},Funding:{focused:"#FF7460",unfocused:"#E3DFE4"},Data:{focused:"#84C2FF",unfocused:"#E3DFE4"},Employment:{focused:"#EE73FF",unfocused:"#E3DFE4"},Collaboration:{focused:"#FFD955",unfocused:"#E3DFE4"}},s=$("#canvas-force"),u=s.width(),l=s.height(),d={Government:[-90,-90-l/7],"Non-Profit":[-90,90-l/7],"For-Profit":[90,-90-l/7],Individual:[90,90-l/7]},y=function(t,e,n,i,c){var o=t-n,a=e-i;return o*o+a*a<=c*c},f={employees:function(t){return t>10?Math.log(t)/3:1.5},followers:function(t){return t>0&&t<=500?1.5:t>500&&t<=5e3?1.8:t>5e3&&t<=1e4?2:t>1e4&&t<=25e3?2.5:t>25e3&&t<=9e5?3:t>9e5?5:1}},p=e.select("div#canvas-force").append("canvas"),h=p.node().getContext("2d"),m=window.devicePixelRatio||1,g=h.webkitBackingStorePixelRatio||h.mozBackingStorePixelRatio||h.msBackingStorePixelRatio||h.oBackingStorePixelRatio||h.backingStorePixelRatio||1,k=m/g;p.attr("width",u*k).attr("height",l*k).attr("id","networkCanvas");var x=document.getElementById("networkCanvas");x.style.width=u+"px",x.style.height=l+"px",h.scale(k,k),c.loading=!1;var E=1;$("#networkCanvas").click(function(t){var e=t.offsetX/E,n=t.offsetY/E;c.showLicense=!1,c.clickedEntity.entity=null;var i=!1;a.nodes.forEach(function(t){var o=f[c.sizeBy](t[c.sizeBy]);y(e,n,t.x+d[t.type][0],t.y+d[t.type][1],4.5*o)&&(c.hydePartials(),c.$emit("setCurrentEntity",{value:t}),i=!0,c.setEntity(t),c.clickedEntity.entity=t,focus(t))}),i||(c.$emit("setCurrentLocation",{value:null}),c.$emit("setCurrentEntity",{value:null})),o(),c.actions.interacted=!0,c.safeApply(),$("#details-panel").scrollTop(0)});var v,L=0,w=!0,M=[],T=[];a.nodes.filter(function(t){return n(i.find(function(e){return e.id===t.id}))}).forEach(function(t){c.currentLocation?t.name in c.currentLocation.dict&&M.push(t):c.currentEntity&&!v[t.id]&&t!==c.currentEntity||(c.currentEntity||t.wellconnected?M.push(t):T.push(t))}),a.nodes.forEach(function(t){n(i[t.type])&&(c.currentLocation?t.name in c.currentLocation.dict&&M.push(t):c.currentEntity&&!v[t.id]&&t!==c.currentEntity||(c.currentEntity||t.wellconnected?M.push(t):T.push(t)))}),T=T.concat(M);var P=e.layout.force().size([u,l]).nodes(a.nodes).links(a.links).on("tick",o).charge(-2).linkStrength(.1).linkDistance(50).start();c.$on("toggleNode",o),c.$on("toggleLink",o),c.$on("changeSizeBy",o),c.$on("selectItem",function(t,e){"location"===e.type?(c.clickedLocation.location=c.currentLocation,c.$emit("setCurrentEntity",{value:null})):(c.clickedEntity.entity=c.currentEntity,c.$emit("setCurrentLocation",{value:null})),c.actions.interacted=!0,c.safeApply(),o()})}var u=o[0],l=e.select(u).append("svg").attr("height","100vh").attr("width","100%");c.$watch("data",a,!0)}return{restrict:"EA",scope:{data:"="},link:c}}i.$inject=["_","CivicGraphService"],t.module("mscg.network.graph").directive("mscgNetworkGraph",i)}(angular,d3);
!function(n,t){"use strict";function e(n){return void 0!==n&&null!==n}function o(n){return e(n)&&"object"==typeof n}function i(n,t,i){function r(){n.isLoading=!0,n.connections={},n.safeApply=u,n.$on("entitiesLoaded",c)}function c(){i.getFromAPI().then(s)}function s(i){function r(n,t){return n[t]=[],n}function c(t){return t.collaborations.length>=n.minConnections}function s(n){function o(n){return{source:t.find(f,{id:n.source}),target:t.find(f,{id:n.target})}}function i(n){return e(n.source)&&e(n.target)}var r=n.connections,c=n.type;r.map(o).filter(i).reduceRight(function(n,t){return n[c].push(t),n},l)}function u(n){return{type:n,connections:i.connections[n]}}if(console.log(i),console.log(n.entities),o(i.connections)&&Array.isArray(n.entities)){var a=Object.keys(i.connections),f=n.entities.filter(c),l=a.reduceRight(r,{}),g=a.map(u);g.forEach(s),t.forEach(t.keys(n.entityTypes),function(e){var o=t.takeRight(t.sortBy(t.filter(n.entities,{type:e}),"collaborations.length"),5);t.forEach(o,function(n){n.wellconnected=!0})}),f=t.sortBy(f,function(n){return n.wellconnected?1:0}),n.entitiesAndConnections={entityArray:f,connectionArray:l},console.log("Should be refreshing directive now"),n.isLoading=!1}}function u(n){var t=this.$root.$$phase;"$apply"===t||"$digest"===t?n&&"function"==typeof n&&n():this.$apply(n)}r()}var r=["$scope","_","connectionService",i];n.module("mscg.network.graph").controller("networkCtrl",r)}(angular,RTP);
!function(n){"use strict";function t(){function n(){}function t(t){return new n(t)}return{getInstance:t}}var r=[t];n.module("mscg.network.graph").factory("MSCGNetworkService",r)}(angular);
!function(e){"use strict";function t(e,t){e.categorizedEntities={},t.forEach(t.keys(e.entityTypes),function(i){e.categorizedEntities[i]=t.filter(e.entities,{type:i})})}e.module("civic-graph").controller("overviewCtrl",["$scope","_",t])}(angular);
!function(c){"use strict";function n(c){}c.module("civic-graph").controller("analyticsCtrl",["$scope",n])}(angular);
!function(e){"use strict";function n(e,n){e.itemsShownDefault={key_people:3,grants_given:3,grants_received:3,investments_made:3,investments_received:3,collaborations:3,employments:3,relations:3,data_given:3,data_received:3,revenues:3,expenses:3},e.itemsShown=n.clone(e.itemsShownDefault),e.$on("entityChange",function(){e.itemsShown=n.clone(e.itemsShownDefault)}),e.showMore=function(n){e.itemsShown[n]=e.currentEntity[n].length},e.showLess=function(n){e.itemsShown[n]=e.itemsShownDefault[n]}}e.module("civic-graph").controller("detailsCtrl",["$scope","_",n])}(angular);
!function(t){"use strict";function e(t){return void 0!==t&&null!==t}function i(i,n,o,s,c,a,r){function d(){var t,e,n,o;for(e in i.categories)if(i.categories.hasOwnProperty(e)){t=i.categories[e];for(n in i.editEntity.categories)i.editEntity.categories.hasOwnProperty(n)&&(o=i.editEntity.categories[n],t.id===o.id&&(t.enabled=o.enabled))}}i.isEditing=!1,i.editEntity=c.getEntityModel(i.entity),i.entityTypes=c.getEntityTypes(),i.influenceTypes=c.getInfluenceTypes();var u;i.categories=[],i.addressSearch=function(t){return n.jsonp("https://dev.virtualearth.net/REST/v1/Locations",{params:{query:t,key:"Ai58581yC-Sr7mcFbYTtUkS3ixE7f6ZuJnbFJCVI4hAtW1XoDEeZyidQz2gLCCyD",jsonp:"JSON_CALLBACK",include:"ciso2"}}).then(function(t){if(e(t.data.resourceSets)&&t.data.resourceSets.length>0)return t.data.resourceSets[0].resources})},i.toggleCategory=function(t){if(0===i.editEntity.categories.length)i.editEntity.categories.push(t);else{var e=!1;for(var n in i.editEntity.categories)if(i.editEntity.categories.hasOwnProperty(n)){var o=i.editEntity.categories[n];if(o.id===t.id){e=!0,o.enabled=t.enabled;break}}e||i.editEntity.categories.push(t)}},i.setLocation=function(t,n){i.addressSearch(t.formattedAddress).then(function(o){var s=o[0],c=s.address,a=s.point;i.addLocation(n),t.address_line=e(c.addressLine)?c.addressLine:"",t.locality=e(c.locality)?c.locality:"",t.district=e(c.adminDistrict)?c.adminDistrict:"",t.country=e(c.countryRegion)?c.countryRegion:null,t.country_code=e(c.countryRegionIso2)?c.countryRegionIso2:"",t.coordinates=e(a.coordinates)?a.coordinates:null,t.postal_code=e(c.postalCode)?c.postalCode:null})},i.addLocation=function(t){t&&i.editEntity.locations.push(a.getLocationModel())},i.addKeyPerson=function(){s.some(i.editEntity.key_people,{name:"",id:null})||i.editEntity.key_people.push({name:"",id:null})},i.setFundingConnection=function(t,e){e.entity_id=t.id},i.addFundingConnection=function(t){s.some(t,{entity:""})||t.push({entity:"",amount:null,year:null,id:null})},i.setConnection=function(t,e){e.entity_id=t.id},i.addConnection=function(t){s.some(t,{entity:"",id:null})||t.push({entity:"",id:null,details:null})},i.addFinance=function(t){s.every(t,function(t){return t.amount>0&&t.year>1750})&&t.push({amount:null,year:null,id:null})},i.save=function(){i.isSaving=!0,console.log(i.editEntity.generateDBModel()),n.post(r.apiHost+"api/save",{entity:i.editEntity.generateDBModel()}).success(function(t){i.isSaving=!1,i.$emit("editEntitySuccess",t),i.cancelEdit()}).error(function(){i.isError=!0,o(function(){i.isError=!1},2e3)})},i.cancelEdit=function(){i.isOpen=!1},i.$watch("entity",function(n,o){t.equals(n,o)||(console.log(i.entity),i.editEntity=c.getEntityModel(n),i.categories=t.copy(u),d(),i.isEditing=e(i.editEntity.id))}),n.get(r.apiHost+"api/categories").success(function(e){u=e.categories,i.categories=t.copy(u)})}var n=["$scope","$http","$timeout","_","entityService","locationService","config",i];t.module("civic-graph").controller("editCtrl",n)}(angular);
!function(n){"use strict";function e(){function n(n){return void 0!==n&&null!==n}function e(e){var i=n(e)?e:{};this.name=n(i.name)?i.name:null,this.enabled=!n(i.enable)||i.enabled,this.id=n(i.id)?i.id:null}this.getCategoryModel=function(n){return new e(n)}}var i=[e];n.module("civic-graph").service("categoryService",i)}(angular);
!function(n){"use strict";function t(n){return void 0!==n&&null!==n}function i(n,i,e){function u(n){var i=t(n);this.entity=i&&t(n.entity)?n.entity:null,this.id=i&&t(n.id)?n.id:null,this.details=i&&t(n.details)?n.details:null,this.name=i&&t(n.name)?n.name:null,this.entity_id=i&&t(n.entity_id)?n.entity_id:null}function l(n){return new u(n)}function r(){return o}function c(){return n.get(e.apiHost+"api/connections").then(function(n){return n.data})}return{getConnectionModel:l,getConnectionTypes:r,getFromAPI:c}}var e=["$http","$q","config",i],o={Funding:!0,Data:!0,Employment:!0,Collaboration:!0};n.module("civic-graph").service("connectionService",e)}(angular);
!function(e){"use strict";function n(n,t,i,o,s,r,p,a){function l(e){return void 0!==e&&null!==e}function c(n,t){if(!l(n)&&!e.isArray(n))return[t()];var i,o,s=[];for(i in n)n.hasOwnProperty(i)&&(o=n[i],e.isObject(o)&&s.push(t(o)));return s.push(t()),s}function d(e){var n=this,p=l(e)?e:{};this.id=l(p.id)?p.id:null,this.name=l(p.name)?p.name:null,this.locations=c(p.locations,s.getLocationModel),this.influence=l(p.influence)?p.influence:null,this.grants_received=c(p.grants_received,t.getFundingConnectionModel),this.investments_received=c(p.investments_received,t.getFundingConnectionModel),this.grants_given=c(p.grants_given,t.getFundingConnectionModel),this.investments_made=c(p.investments_made,t.getFundingConnectionModel),this.data_given=c(p.data_given,i.getConnectionModel),this.data_received=c(p.data_received,i.getConnectionModel),this.collaborations=c(p.collaborations,i.getConnectionModel),this.key_people=c(p.key_people,i.getConnectionModel),this.employments=c(p.employments,i.getConnectionModel),this.revenues=c(p.revenues,o.getFinanceModel),this.expenses=c(p.expenses,o.getFinanceModel),this.categories=c(p.categories,r.getCategoryModel),this.type=l(p.type)?p.type:null,this.nickname=l(p.nickname)?p.nickname:null,this.url=l(p.url)?p.url:null,this.twitter_handle=l(p.twitter_handle)?p.twitter_handle:null,this.employees=l(p.employees)?p.employees:null,this.generateDBModel=function(){var e=new d(n);return e.locations.pop(),e.locations.pop(),e.grants_received.pop(),e.grants_received.pop(),e.grants_given.pop(),e.grants_given.pop(),e.investments_received.pop(),e.investments_received.pop(),e.investments_made.pop(),e.investments_made.pop(),e.data_given.pop(),e.data_given.pop(),e.data_received.pop(),e.data_received.pop(),e.collaborations.pop(),e.collaborations.pop(),e.key_people.pop(),e.key_people.pop(),e.employments.pop(),e.employments.pop(),e.revenues.pop(),e.revenues.pop(),e.expenses.pop(),e.expenses.pop(),e.categories.pop(),e.categories.pop(),e.description="",console.log(e),e}}function u(e){return new d(e)}function g(){return m}function v(){return _}function h(){return n.get(p.apiHost+"api/entities").then(function(e){return e.data})}var m={Government:!0,"For-Profit":!0,"Non-Profit":!0,Individual:!0},_=["Local","National","Global"];return{getEntityModel:u,getEntityTypes:g,getInfluenceTypes:v,getFromAPI:h}}var t=["$http","fundingConnectionService","connectionService","financeService","locationService","categoryService","config","$q",n];e.module("civic-graph").service("entityService",t)}(angular);
!function(n){"use strict";function i(n){return void 0!==n&&null!==n}function t(){function n(n){var t=i(n)?n:{};this.amount=i(t.amount)&&t.amount>=0?t.amount:0,this.year=i(t.year)&&t.year>=1750?t.year:null,this.id=i(t.id)?t.id:null}this.getFinanceModel=function(i){return new n(i)}}var e=[t];n.module("civic-graph").service("financeService",e)}(angular);
!function(n){"use strict";function i(n){return void 0!==n&&null!==n}function t(){function n(n){var t=i(n);this.entity=t&&i(n.entity)?n.entity:"",this.amount=t&&i(n.amount)?n.amount:null,this.year=t&&i(n.year)?n.year:null,this.id=t&&i(n.id)?n.id:null}this.getFundingConnectionModel=function(i){return new n(i)}}var e=[t];n.module("civic-graph").service("fundingConnectionService",e)}(angular);
!function(t){"use strict";function i(){function t(t){return void 0!==t&&null!==t}function i(i){var s=t(i)?i:{};this.address_line=t(s.address_line)?s.address_line:null,this.locality=t(s.locality)?s.locality:null,this.district=t(s.district)?s.district:null,this.postal_code=t(s.postal_code)?s.postal_code:null,this.country=t(s.country)?s.country:null,this.country_code=t(s.country_code)?s.country_code:null,this.coordinates=t(s.coordinates)?s.coordinates:null,this.id=t(s.id)?s.id:null,this.formattedAddress=(t(this.address_line)?this.address_line+" ":"")+(t(this.locality)?this.locality+", ":"")+(t(this.country_code)?this.country_code+" ":"")+(t(this.postal_code)?this.postal_code:""),this.formattedAddress=this.formattedAddress.trim()}this.getLocationModel=function(t){return new i(t)}}var s=[i];t.module("civic-graph").service("locationService",s)}(angular);
!function(t,e,n){"use strict";function i(t,i,o,r,a){t.options={center:{lat:20,lng:-40,zoom:3},defaults:{tileLayer:"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZGF2aWRscm50IiwiYSI6IjA0M2RkNzMzZWJmNzEzNGYzMTdhYTExYzAyZmU4ZTE1In0.TNYlFta2VItrkn4L0Z9BJQ",tileLayerOptions:{detectRetina:!0,reuseTiles:!1},zoomControl:!1,attributionControl:!1}},i(function(){var i=function(t){var n=t.data,i=e.layout.pie().sort(null).value(function(t){return t.value}),o=e.svg.arc().outerRadius(t.r).innerRadius(t.r-10),r=t.r+t.strokeWidth,a=2*r,c=a,l=document.createElementNS(e.ns.prefix.svg,"svg"),s=e.select(l).data(n).attr("class","piechart").attr("width",a).attr("height",c),u=s.selectAll(".arc").data(i(n)).enter().append("g").attr("class","arc").attr("transform","translate("+r+","+r+")");return u.append("path").attr("d",o).attr("class",function(t){return t.data.type+"-arc"}),u.append("svg:text").text(function(e,n){if(0===n)return t.count}).attr("x",-4*t.count.toString().length).attr("dy",5).attr("class","arcText"),window.XMLSerializer?(new window.XMLSerializer).serializeToString(l):l.xml?l.xml:""};o.getMap().then(function(e){function o(t){var e=t.getAllChildMarkers(),o=e.length,a=r.pluck(e,"options"),c=r.map(r.countBy(a,"type"),function(t,e){return{type:e,value:t}}),l=28,s=1,u=2*(l+s),d=i({data:c,r:l,strokeWidth:s,count:o});return new n.DivIcon({html:d,className:"marker-cluster",iconSize:new n.point(u,u)})}function c(t){function e(e){if(r.every(e.coordinates)){"40.78200"===e.coordinates[0].toFixed(5)&&"-73.83170"===e.coordinates[1].toFixed(5)&&(e.coordinates[0]=40.77065,e.coordinates[1]=-73.97406);var i=n.marker(e.coordinates,{icon:u[t.type],title:t.name,entity_id:t.id,message:t.name,type:t.type});d.addLayer(i)}}r.forEach(t.locations,e)}function l(t){console.error(t.message+"  %O",t)}var s=a("filter")(t.entities,function(t){return t.collaborations.length>4});e.invalidateSize(),new n.Control.Zoom({position:"topright"}).addTo(e),n.control.locate({position:"topright",showPopup:!1,icon:"fa fa-location-arrow"}).addTo(e);var u={"Non-Profit":n.icon({iconUrl:"img/marker-nonprof.svg",iconSize:[60,60]}),"For-Profit":n.icon({iconUrl:"img/marker-prof.svg",iconSize:[60,60]}),Individual:n.icon({iconUrl:"img/marker-ind.svg",iconSize:[60,60]}),Government:n.icon({iconUrl:"img/marker-gov.svg",iconSize:[60,60]})},d=n.markerClusterGroup({spiderfyOnMaxZoom:!0,showCoverageOnHover:!1,iconCreateFunction:o,maxClusterRadius:30,spiderfyDistanceMultiplier:1.3});console.log("Original: %O",t.entities),console.log("Filtered: %O",s),r.forEach(s,c),e.addLayer(d),e.on("locationerror",l),d.on("click",function(e){t.setEntityID(e.layer.options.entity_id),t.clickedEntity.entity=t.currentEntity,t.actions.interacted=!0,t.settingsEnabled&&t.mobile&&t.toggleSettings(),t.safeApply()}),e.on("click",function(){t.clickedEntity.entity=null,t.actions.interacted=!0,t.safeApply()}),t.$on("selectItem",function(){var n=t.currentEntity.locations.length>0?r.pluck(t.currentEntity.locations,"coordinates"):null;n.length>0&&e.setView(n[0],11),t.actions.interacted=!0,t.safeApply()})})})}var o=["$scope","$timeout","leafletData","_","$filter",i];t.module("civic-graph").controller("mapCtrl",o)}(angular,d3,L);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
