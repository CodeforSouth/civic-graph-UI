!function(i){"use strict";var a=["ui.bootstrap","leaflet-directive","ngAnimate","templateCache","civic-graph.api","civic-graph.util"],c=["civic-graph.util"];i.module("civic-graph.util",[]),i.module("civic-graph.api",c),i.module("civic-graph",a)}(angular);
!function(t){"use strict";function a(){return{templateUrl:"js/analytic/analytics.html",restrict:"E",scope:{},controller:"analyticsCtrl"}}var c=[a];t.module("civic-graph").directive("analytics",c)}(angular);
!function(e){"use strict";function t(e,t){function i(e){var i=t.getPropertyFromObj(e);this.id=i("id"),this.name=i("name"),this.enabled=i("enable",!0)}function n(e){return new i(e)}function r(){return e.get("/categories")}return{getCategoryModel:n,getAll:r}}t.$inject=["cgApiCaller","cgUtilService"],e.module("civic-graph.api").factory("categoryService",t)}(angular);
!function(t){"use strict";function n(){return{Funding:!0,Data:!0,Employment:!0,Collaboration:!0}}function i(t,i){function o(t){var n=i.getPropertyFromObj(t);this.id=n("id"),this.name=n("name"),this.details=n("details"),this.entity=n("entity"),this.entity_id=n("entity_id")}function c(t){return new o(t)}function r(){return t.get(e)}return{getAll:r,getConnectionTypes:n,getConnectionModel:c}}var e="/connections";i.$inject=["cgApiCaller","cgUtilService"],t.module("civic-graph.api").factory("connectionService",i)}(angular);
!function(i){"use strict";function n(i){function n(n){var t=i.getPropertyFromObj(n);this.id=t("id"),this.year=t("year"),this.amount=t("amount",0)}function t(i){return new n(i)}return{getFinanceModel:t}}n.$inject=["cgUtilService"],i.module("civic-graph.api").factory("financeService",n)}(angular);
!function(n){"use strict";function t(n){function t(t){var i=n.getPropertyFromObj(t);this.id=i("id"),this.year=i("year"),this.amount=i("amount"),this.entity=i("entity","")}function i(n){return new t(n)}return{getFundingConnectionModel:i}}t.$inject=["cgUtilService"],n.module("civic-graph.api").factory("fundingConnectionService",t)}(angular);
!function(o){"use strict";function r(){return{templateUrl:"js/control/controls.html",restrict:"E",scope:{toggleNetwork:"="},controller:"controlCtrl",controllerAs:"control",bindToController:{minConnections:"="}}}var t=[r];o.module("civic-graph").directive("control",t)}(angular);
!function(i,t){"use strict";function s(i){function s(){var i=t(this);i.css("height","55vh")}function c(){var i=t(this);window.innerHeight/3>parseInt(i.css("height"))?i.css("height","55vh"):i.css("height","30vh")}var e;i.mobile&&(e=t("#details-panel"),e.css("height","30vh"),e.scrollTop(0),e.scroll(s),e.click(c))}function c(){return{restrict:"A",link:s}}i.module("civic-graph").directive("addMobileEvents",[c])}(angular,$);
!function(o){"use strict";function c(o,c){o.closeWindow=function(){c.close()}}o.module("civic-graph").controller("modalCtrl",["$scope","$modalInstance",c])}(angular);
!function(o){"use strict";o.module("civic-graph").constant("_",window._).config(["$locationProvider","$compileProvider",function(o,n){o.html5Mode(!0),n.debugInfoEnabled(!0)}]).filter("thousandSuffix",function(){return function(o,n){var t,i=["k","M","G","T","P","E"];return window.isNaN(o)?null:o<1e3?o:(t=Math.floor(Math.log(o)/Math.log(1e3)),(o/Math.pow(1e3,t)).toFixed(n)+i[t-1])}})}(angular);
!function(t){"use strict";function i(t,i,e,n,o){function a(){t.$broadcast("triggerNetworkDraw")}t.entities=[],t.searchItems=null,t.categories=[],t.currentLocation=null,t.clickedLocation={},t.clickedLocation.location=null,t.clickedEntity={},t.clickedEntity.entity=null,t.editing=!1,t.actions={interacted:!1},t.showsearchMB=!1,t.showAnalytics=!1,t.entityTypes=n.getEntityTypes(),t.connectionTypes=o.getConnectionTypes(),t.status={isNetworkShown:!0,license:!0,networkLoading:!0},t.toggleAnalytics=function(){t.showAnalytics=!t.showAnalytics},this.minConnections=t.minConnections=2;var s=this;t.$watch("minConnections",a),t.connectionChange=function(){console.log(s.minConnections),t.minConnections=s.minConnections,t.$broadcast("triggerNetworkDraw")},t.hydePartials=function(i){"search"===i?(t.editing=!1,t.settingsEnabled=!1):"settings"===i?(t.editing=!1,t.showsearchMB=!1):"edit"===i?(t.settingsEnabled=!1,t.showsearchMB=!1):(t.editing=!1,t.settingsEnabled=!1,t.showsearchMB=!1)},t.showSearch=function(){t.hydePartials("search"),t.showsearchMB=!t.showsearchMB,t.status.license=!1},t.toggleSettings=function(){t.hydePartials("settings"),t.settingsEnabled=!t.settingsEnabled},t.startEdit=function(i){t.currentEntity=i,t.mobile&&t.hydePartials("edit"),t.editing=!0},t.switchView=function(){t.status.isNetworkShown=!t.status.isNetworkShown,t.status.isNetworkShown&&t.$broadcast("triggerNetworkDraw")},window.mobilecheck=function(){var t=!1,i=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,e=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i;return function(n){(i.test(n)||e.test(n.substr(0,4)))&&(t=!0)}(navigator.userAgent||navigator.vendor||window.opera),t},t.mobile=window.mobilecheck(),t.settingsEnabled=!t.mobile,i(function(){n.getAll().then(function(i){t.entities=i.nodes;var n=e.uniq(e.pluck(e.flatten(e.pluck(t.entities,"locations")),"locality")),o=e.map(n,function(i){var n=e.filter(t.entities,e.flow(e.property("locations"),e.partialRight(e.any,{locality:i})));return{name:i,type:"location",entities:n,dict:e.zipObject(e.pluck(n,"name"),e.pluck(n,"index"))}});t.searchItems=o.concat(t.entities),t.overviewUrl="js/overview/overview.html",t.$broadcast("triggerNetworkDraw")})},100),t.overviewUrl=null,t.setEntity=function(i){t.currentLocation=null,t.currentEntity=i,t.editing&&t.stopEdit(),t.$broadcast("entityChange")},t.setEntityID=function(i){t.setEntity(e.find(t.entities,{id:i}))},t.setLocation=function(i){t.currentLocation=i,t.editing&&t.stopEdit(),t.$broadcast("itemChange")},t.selectItem=function(i){"location"===i.type?t.setLocation(i):t[i%1===0?"setEntityID":"setEntity"](i),t.$broadcast("selectItem",i)},t.$on("setCurrentEntity",function(i,e){t.currentEntity=e.value}),t.$on("setCurrentLocation",function(i,e){t.currentLocation=e.value}),t.setEntities=function(i){t.entities=i},t.stopEdit=function(){t.editing=!1},t.$on("editEntitySuccess",function(i){t.setEntities(i.nodes),t.$broadcast("triggerNetworkDraw")}),t.animationsEnabled=!0}var e=["$scope","$timeout","_","entityService","connectionService",i];t.module("civic-graph").controller("homeCtrl",e)}(angular);
!function(e){"use strict";function t(t,i,n,o,s,d,c,a){function r(){var e,i,n,o;for(i in t.categories)if(t.categories.hasOwnProperty(i)){e=t.categories[i];for(n in t.editEntity.categories)t.editEntity.categories.hasOwnProperty(n)&&(o=t.editEntity.categories[n],e.id===o.id&&(e.enabled=o.enabled))}}t.isEditing=!1,t.editEntity=s.getEntityModel(t.entity),t.entityTypes=s.getEntityTypes(),t.influenceTypes=s.getInfluenceTypes();var u;t.categories=[],t.addressSearch=function(e){return i.jsonp("https://dev.virtualearth.net/REST/v1/Locations",{params:{query:e,key:"Ai58581yC-Sr7mcFbYTtUkS3ixE7f6ZuJnbFJCVI4hAtW1XoDEeZyidQz2gLCCyD",jsonp:"JSON_CALLBACK",include:"ciso2"}}).then(function(e){if(a.isDefined(e.data.resourceSets)&&e.data.resourceSets.length>0)return e.data.resourceSets[0].resources})},t.toggleCategory=function(e){if(0===t.editEntity.categories.length)t.editEntity.categories.push(e);else{var i=!1;for(var n in t.editEntity.categories)if(t.editEntity.categories.hasOwnProperty(n)){var o=t.editEntity.categories[n];if(o.id===e.id){i=!0,o.enabled=e.enabled;break}}i||t.editEntity.categories.push(e)}},t.setLocation=function(e,i){t.addressSearch(e.formattedAddress).then(function(n){if(a.isDefined(n[0])){var o=n[0],s=o.address,d=o.point;t.addLocation(i),e.address_line=a.isDefined(s.addressLine)?s.addressLine:"",e.locality=a.isDefined(s.locality)?s.locality:"",e.district=a.isDefined(s.adminDistrict)?s.adminDistrict:"",e.country=a.isDefined(s.countryRegion)?s.countryRegion:null,e.country_code=a.isDefined(s.countryRegionIso2)?s.countryRegionIso2:"",e.coordinates=a.isDefined(d.coordinates)?d.coordinates:null,e.postal_code=a.isDefined(s.postalCode)?s.postalCode:null}})},t.addLocation=function(e){e&&t.editEntity.locations.push(c.getLocationModel())},t.addKeyPerson=function(){o.some(t.editEntity.key_people,{name:"",id:null})||t.editEntity.key_people.push({name:"",id:null})},t.setFundingConnection=function(e,t){t.entity_id=e.id},t.addFundingConnection=function(e){o.some(e,{entity:""})||e.push({entity:"",amount:null,year:null,id:null})},t.setConnection=function(e,t){t.entity_id=e.id},t.addConnection=function(e){o.some(e,{entity:"",id:null})||e.push({entity:"",id:null,details:null})},t.addFinance=function(e){o.every(e,function(e){return e.amount>0&&e.year>1750})&&e.push({amount:null,year:null,id:null})},t.save=function(){function e(e){t.isSaving=!1,t.$emit("editEntitySuccess",e),t.cancelEdit()}function i(){t.isError=!0,n(function(){t.isError=!1},2e3)}t.isSaving=!0,s.saveEntity(t.editEntity.generateDBModel()).then(e,i)},t.cancelEdit=function(){t.isOpen=!1},t.$watch("entity",function(i,n){e.equals(i,n)||(t.editEntity=s.getEntityModel(i),t.categories=e.copy(u),r(),t.isEditing=a.isDefined(t.editEntity.id))}),d.getAll().then(function(i){u=i.categories,t.categories=e.copy(u)})}t.$inject=["$scope","$http","$timeout","_","entityService","categoryService","locationService","cgUtilService"],e.module("civic-graph").controller("editCtrl",t)}(angular);
!function(t){"use strict";function e(){return{templateUrl:"js/edit-entity/edit.html",restrict:"E",scope:{entity:"=",entities:"=",isOpen:"="},controller:"editCtrl"}}var i=[e];t.module("civic-graph").directive("editEntity",i)}(angular);
!function(i){"use strict";var a=[];i.module("civic-graph").directive("map",a)}(angular);
!function(n){"use strict";function e(n,e,t,i,c){function o(){function o(i){var o=e("filter")(n.entities,function(e){return e.collaborations.length>=n.minConnections}),a={};t.forEach(t.keys(i.connections),function(n){a[n]=[]}),t.forEach(i.connections,function(n,e){t.forEach(n,function(n){var i=t.find(o,{id:n.source}),r=t.find(o,{id:n.target});c.isDefined(i)&&c.isDefined(r)&&a[e].push({source:i,target:r})})}),t.forEach(t.keys(n.entityTypes),function(e){var i=t.takeRight(t.sortBy(t.filter(n.entities,{type:e}),"collaborations.length"),5);t.forEach(i,function(n){n.wellconnected=!0})}),o=t.sortBy(o,function(n){return n.wellconnected?1:0}),r(o,a)}i.getAll().then(o)}n.isLoading=!0,n.connections={},o(),n.safeApply=function(n){var e=this.$root.$$phase;"$apply"===e||"$digest"===e?n&&"function"==typeof n&&n():this.$apply(n)},n.$on("triggerNetworkDraw",o),n.$on("viewChange",function(n){console.log(n)});var r=function(e,i){n.isLoading=!1;var o=d3.select("#network");o.selectAll("*").remove();var r=o.node().getBoundingClientRect(),a=r.height,s=r.width,l=6,u=7,d={Individual:{x:1,y:1},"For-Profit":{x:1,y:-1},"Non-Profit":{x:-1,y:1},Government:{x:-1,y:-1}},f=10,y=50,p=d3.max(e,function(n){return parseInt(n.employees)}),k=d3.max(e,function(n){return parseInt(n.followers)}),g={employees:d3.scale.sqrt().domain([10,p]).range([f,y]),followers:d3.scale.sqrt().domain([10,k]).range([f,y])},h={},m=d3.layout.force().size([s,a]).nodes(e).links(t.flatten(t.values(i))).charge(function(n){return n.employees?-2*g.employees(n.employees):-20}).linkStrength(0).linkDistance(50);t.forEach(i,function(n,e){h[e]=o.selectAll(".link ."+e+"-link").data(n).enter().append("line").attr("class",function(n){return c.isDefined(n.source)&&c.isDefined(n.target)?(n.type=e,"link "+e+"-link "+n.source.type+"-link "+n.target.type+"-link"):""})});var x=o.selectAll(".node").data(e).enter().append("g").attr("class",function(n){return"node "+n.type+"-node"}).call(m.drag);x.append("circle").attr("r",function(n){return n.employees?g.employees(n.employees):u}),x.append("text").text(function(n){return n.nickname?n.nickname:n.name}).attr("dx",function(){return-.065*this.getComputedTextLength()/2+"em"}).attr("dy",function(){return.08*this.parentNode.getBBox().height/2+.5+"em"}),m.on("tick",function(n){var i=l*n.alpha;t.forEach(e,function(n){n.x&&d[n.type]&&(n.x+=d[n.type].x*i,n.y+=d[n.type].y*i,n.x=Math.max(y,Math.min(s-y,n.x)),n.y=Math.max(y,Math.min(a-y,n.y)))}),t.forEach(h,function(n){n.attr("x1",function(n){return n.source.x}).attr("y1",function(n){return n.source.y}).attr("x2",function(n){return n.target.x}).attr("y2",function(n){return n.target.y})}),x.attr("transform",function(n){return"translate("+n.x+","+n.y+")"})});var E=function(n){requestAnimationFrame(function e(){for(var t=0;t<n;t++)m.tick();m.alpha()>0&&requestAnimationFrame(e)})};E(7),m.start();var v={};t.forEach(h,function(n){t.forEach(n[0],function(n){var e=n.__data__.source,t=n.__data__.target;v[e.index+","+t.index]=!0,v[t.index+","+e.index]=!0})});var L,A=function(n,e){return v[n.index+","+e.index]||n.index===e.index},T=function(n){x.classed("focused",function(e){return A(n,e)}).classed("unfocused",function(e){return!A(n,e)}),t.forEach(h,function(e){e.classed("focused",function(e){return n.index===e.source.index||n.index===e.target.index}).classed("unfocused",function(e){return!(n.index===e.source.index||n.index===e.target.index)})})},w=function(e){n.currentEntity!==e&&n.setEntity(e),n.safeApply(),T(e)},$=function(e){x.classed("focused",!1).classed("unfocused",!1),t.forEach(h,function(n){n.classed("focused",!1).classed("unfocused",!1)}),e.fixed=!1,n.clickedEntity.entity&&m.resume()},D=function(e){n.clickedEntity.entity||n.editing||n.currentLocation||(L=setTimeout(function(){w(e)},500)),n.actions.interacted=!0,n.safeApply()},_=function(e){n.clickedEntity.entity||n.currentLocation||($(e),clearTimeout(L)),n.actions.interacted=!0,n.safeApply()},b=function(e){n.safeApply(),x.classed("focused",function(n){return n.name in e.dict}).classed("unfocused",function(n){return!(n.name in e.dict)}),t.forEach(h,function(n){n.classed("focused",function(n){return n.source.name in e.dict&&n.target.name in e.dict}).classed("unfocused",function(n){return!(n.source.name in e.dict&&n.target.name in e.dict)})})},B=function(){x.classed("focused",!1).classed("unfocused",!1),t.forEach(h,function(n){n.classed("focused",!1).classed("unfocused",!1)}),n.clickedLocation.location&&m.resume()},P=function(e){n.showLicense=!1,n.clickedEntity.entity&&($(n.clickedEntity.entity),n.clickedEntity.entity=null),n.clickedLocation.location!==e?(B(n.clickedLocation.location),b(e)):n.clickedLocation.location===e&&(n.clickedLocation.location=e,b(e)),d3.event&&d3.event.stopPropagation(),n.actions.interacted=!0,n.safeApply()},C=function(e){n.showLicense=!1,c.isDefined(n.clickedLocation)&&(c.isDefined(n.clickedLocation.location)&&(B(n.clickedLocation.entity),n.clickedLocation.location=null),n.clickedEntity.entity===e?(n.clickedEntity.entity=null,w(e)):(n.clickedEntity.entity&&$(n.clickedEntity.entity),n.clickedEntity.entity=e,w(e))),d3.event&&d3.event.stopPropagation(),n.actions.interacted=!0,n.safeApply()},q=function(){c.isDefined(n.clickedLocation)&&(c.isDefined(n.clickedLocation.location)&&($(n.clickedLocation.location),n.clickedLocation.location=null),c.isDefined(n.clickedEntity.entity)&&($(n.clickedEntity.entity),n.clickedEntity.entity=null)),n.safeApply()},I=function(e){e.fixed?$(e):(e.x=s/2,e.y=a/2,e.px=s/2,e.py=a/2,e.fixed=!0,n.clickedEntity.entity=e),n.actions.interacted=!0,n.safeApply()};x.on("mouseover",D),x.on("mouseout",_),x.on("click",C),x.on("dblclick",I),o.on("click",q),x.classed("wellconnected",function(n){return n.hasOwnProperty("wellconnected")}),n.$on("changeSizeBy",function(n,e){o.selectAll("circle").transition().duration(250).attr("r",function(n){return n[e]?g[e](n[e]):u})}),n.$on("toggleLink",function(e,i){t.map(n.entityTypes,function(e,t){o.selectAll("."+t+"-link").classed({visible:function(e){return!n.connectionTypes[e.type]||n.entityTypes[e.source.type]&&n.entityTypes[e.target.type]},hidden:function(e){return!n.connectionTypes[e.type]||!n.entityTypes[e.source.type]||!n.entityTypes[e.target.type]}})})}),n.$on("toggleNode",function(e,t){o.selectAll("."+t.name+"-node").classed({visible:t.enabled,hidden:!t.enabled}),o.selectAll("."+t.name+"-link").classed({visible:function(e){return n.connectionTypes[e.type]&&n.entityTypes[e.source.type]&&n.entityTypes[e.target.type]},hidden:function(e){return!n.connectionTypes[e.type]||!n.entityTypes[e.source.type]||!n.entityTypes[e.target.type]}})}),n.$on("selectItem",function(e,t){"location"===t.type?P(n.currentLocation):C(n.currentEntity)})}}e.$inject=["$scope","$filter","_","connectionService","cgUtilService"],n.module("civic-graph").controller("networkCtrl",e)}(angular,RTP);
!function(r){"use strict";function t(){return{restrict:"E",templateUrl:"js/network/network.html",controller:"networkCtrl"}}var e=[t];r.module("civic-graph").directive("network",e)}(angular);
!function(e){"use strict";e.module("civic-graph").directive("input",function(){return{restict:"E",require:"?ngModel",link:function(e,r,t,i){"type"in t&&"range"===t.type.toLowerCase()&&i.$parsers.push(parseFloat)}}})}(angular);
!function(e){"use strict";function t(e,t){e.categorizedEntities={},t.forEach(t.keys(e.entityTypes),function(i){e.categorizedEntities[i]=t.filter(e.entities,{type:i})})}e.module("civic-graph").controller("overviewCtrl",["$scope","_",t])}(angular);
!function(r){"use strict";function n(r){return!("undefined"==typeof r||null===r)}function t(r){return n(r)&&!Array.isArray(r)&&"object"==typeof r}function e(r){var t=n(r)?r:{};return function(r,e){var i=n(e)?e:null;return n(t[r])?t[r]:i}}function i(r,n){var e=Array.isArray(r)?r.filter(t).map(n):[];return e.concat([n()])}function u(){return{isDefined:n,isObject:t,getPropertyFromObj:e,loopAndInit:i}}r.module("civic-graph.util").factory("cgUtilService",u)}(angular);
!function(c){"use strict";function n(c){}c.module("civic-graph").controller("analyticsCtrl",["$scope",n])}(angular);
!function(t){"use strict";function e(t){t.defaults.headers.common["X-Requested-With"]="XMLHttpRequest"}e.$inject=["$httpProvider"],t.module("civic-graph.api").config(e)}(angular);
!function(t){"use strict";function r(t,r){function a(t){return console.error("Recieved an error from API with this message: %O",t.data),r.reject(t)}function i(t){return t.data}function c(r,c){return t.get(e+r,{params:c,headers:n}).then(i,a)}function o(r,c){return t.post(e+r,c,{headers:n}).then(i,a)}return{get:c,post:o}}var e="https://api.civicgraph.io/api",n={};r.$inject=["$http","$q"],t.module("civic-graph.api").factory("cgApiCaller",r)}(angular);
!function(e){"use strict";function i(e){function i(i){function t(){var t=e.isDefined(i)?i:{},o=e.isDefined(t.address_line)?t.address_line+" ":"",c=e.isDefined(t.locality)?t.locality+", ":"",n=e.isDefined(t.country_code)?t.country_code+" ":"",r=e.isDefined(t.postal_code)?t.postal_code:"";return(o+c+n+r).trim()}var o=this,c=e.getPropertyFromObj(i);o.id=c("id"),o.address_line=c("address_line"),o.locality=c("locality"),o.district=c("district"),o.postal_code=c("postal_code"),o.country=c("country"),o.country_code=c("country_code"),o.coordinates=c("coordinates"),o.formattedAddress=t()}function t(e){return new i(e)}return{getLocationModel:t}}i.$inject=["cgUtilService"],e.module("civic-graph.api").factory("locationService",i)}(angular);
!function(e){"use strict";function n(){return{Government:!0,"For-Profit":!0,"Non-Profit":!0,Individual:!0}}function o(){return["Local","National","Global"]}function t(e,t,i,p,r,a,c){function l(e){function n(){var e=new l(o);return e.locations.pop(),e.locations.pop(),e.grants_received.pop(),e.grants_received.pop(),e.grants_given.pop(),e.grants_given.pop(),e.investments_received.pop(),e.investments_received.pop(),e.investments_made.pop(),e.investments_made.pop(),e.data_given.pop(),e.data_given.pop(),e.data_received.pop(),e.data_received.pop(),e.collaborations.pop(),e.collaborations.pop(),e.key_people.pop(),e.key_people.pop(),e.employments.pop(),e.employments.pop(),e.revenues.pop(),e.revenues.pop(),e.expenses.pop(),e.expenses.pop(),e.categories.pop(),e.categories.pop(),e.description="",e}var o=this,d=c.isDefined(e)?e:{},s=c.getPropertyFromObj(e);o.id=s("id"),o.name=s("name"),o.influence=s("influence"),o.type=s("type"),o.nickname=s("nickname"),o.url=s("url"),o.twitter_handle=s("twitter_handle"),o.employees=s("employees"),o.locations=c.loopAndInit(d.locations,r.getLocationModel),o.grants_received=c.loopAndInit(d.grants_received,t.getFundingConnectionModel),o.investments_received=c.loopAndInit(d.investments_received,t.getFundingConnectionModel),o.grants_given=c.loopAndInit(d.grants_given,t.getFundingConnectionModel),o.investments_made=c.loopAndInit(d.investments_made,t.getFundingConnectionModel),o.data_given=c.loopAndInit(d.data_given,i.getConnectionModel),o.data_received=c.loopAndInit(d.data_received,i.getConnectionModel),o.collaborations=c.loopAndInit(d.collaborations,i.getConnectionModel),o.key_people=c.loopAndInit(d.key_people,i.getConnectionModel),o.employments=c.loopAndInit(d.employments,i.getConnectionModel),o.revenues=c.loopAndInit(d.revenues,p.getFinanceModel),o.expenses=c.loopAndInit(d.expenses,p.getFinanceModel),o.categories=c.loopAndInit(d.categories,a.getCategoryModel),o.generateDBModel=n}function d(e){return new l(e)}function s(){return e.get("/entities")}function g(n){return e.post("/save",{entity:n})}return{getEntityModel:d,getEntityTypes:n,getInfluenceTypes:o,getAll:s,saveEntity:g}}t.$inject=["cgApiCaller","fundingConnectionService","connectionService","financeService","locationService","categoryService","cgUtilService"],e.module("civic-graph.api").factory("entityService",t)}(angular);
!function(e){"use strict";function o(e,o,n,t,i){function c(){a.changeView(a.toggleNetwork?"Network":"Map")}var a=this;a.entityTypes=e.getEntityTypes(),a.connectionTypes=o.getConnectionTypes(),a.sizeByList=[{name:"Employees",value:"employees"},{name:"Twitter Followers",value:"followers"}],a.sizeBy="employees",a.showView={Network:!0,Map:!1},a.switchView=c,a.changeView=function(e){t.forEach(t.keys(a.showView),function(o){a.showView[o]=e===o}),n.$broadcast("viewChange",a.showView)},a.showAbout=function(){i.open({animation:!1,templateUrl:"control/about.html",controller:"modalCtrl"})},a.toggleNode=function(e){n.$broadcast("toggleNode",{name:e,enabled:a.entityTypes[e]})},a.toggleLink=function(e){n.$broadcast("toggleLink",{name:e,enabled:a.connectionTypes[e]})},a.changeSizeBy=function(){n.$broadcast("changeSizeBy",a.sizeBy)},a.changeSizeBy()}var n=["entityService","connectionService","$rootScope","_","$modal",o];e.module("civic-graph").controller("controlCtrl",n)}(angular);
!function(e){"use strict";function n(e,n){e.itemsShownDefault={key_people:3,grants_given:3,grants_received:3,investments_made:3,investments_received:3,collaborations:3,employments:3,relations:3,data_given:3,data_received:3,revenues:3,expenses:3},e.itemsShown=n.clone(e.itemsShownDefault),e.$on("entityChange",function(){e.itemsShown=n.clone(e.itemsShownDefault)}),e.showMore=function(n){e.itemsShown[n]=e.currentEntity[n].length},e.showLess=function(n){e.itemsShown[n]=e.itemsShownDefault[n]}}e.module("civic-graph").controller("detailsCtrl",["$scope","_",n])}(angular);
!function(t,e,n){"use strict";function i(t,i,o,r,a){t.options={center:{lat:20,lng:-40,zoom:3},defaults:{tileLayer:"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZGF2aWRscm50IiwiYSI6IjA0M2RkNzMzZWJmNzEzNGYzMTdhYTExYzAyZmU4ZTE1In0.TNYlFta2VItrkn4L0Z9BJQ",tileLayerOptions:{detectRetina:!0,reuseTiles:!1},zoomControl:!1,attributionControl:!1}},t.safeApply=function(t){var e=this.$root.$$phase;"$apply"===e||"$digest"===e?t&&"function"==typeof t&&t():this.$apply(t)},i(function(){var i=function(t){var n=t.data,i=e.layout.pie().sort(null).value(function(t){return t.value}),o=e.svg.arc().outerRadius(t.r).innerRadius(t.r-10),r=t.r+t.strokeWidth,a=2*r,c=a,l=document.createElementNS(e.ns.prefix.svg,"svg"),s=e.select(l).data(n).attr("class","piechart").attr("width",a).attr("height",c),p=s.selectAll(".arc").data(i(n)).enter().append("g").attr("class","arc").attr("transform","translate("+r+","+r+")");return p.append("path").attr("d",o).attr("class",function(t){return t.data.type+"-arc"}),p.append("svg:text").text(function(e,n){if(0===n)return t.count}).attr("x",-4*t.count.toString().length).attr("dy",5).attr("class","arcText"),window.XMLSerializer?(new window.XMLSerializer).serializeToString(l):l.xml?l.xml:""};o.getMap().then(function(e){function o(t){var e=t.getAllChildMarkers(),o=e.length,a=r.pluck(e,"options"),c=r.map(r.countBy(a,"type"),function(t,e){return{type:e,value:t}}),l=28,s=1,p=2*(l+s),u=i({data:c,r:l,strokeWidth:s,count:o});return new n.DivIcon({html:u,className:"marker-cluster",iconSize:new n.point(p,p)})}function a(t){function e(e){if(r.every(e.coordinates)){"40.78200"===e.coordinates[0].toFixed(5)&&"-73.83170"===e.coordinates[1].toFixed(5)&&(e.coordinates[0]=40.77065,e.coordinates[1]=-73.97406);var i=n.marker(e.coordinates,{icon:s[t.type],title:t.name,entity_id:t.id,message:t.name,type:t.type});p.addLayer(i)}}r.forEach(t.locations,e)}function c(t){console.error(t.message+"  %O",t)}var l=t.entities;e.invalidateSize(),new n.Control.Zoom({position:"topright"}).addTo(e),n.control.locate({position:"topright",showPopup:!1,icon:"fa fa-location-arrow"}).addTo(e);var s={"Non-Profit":n.icon({iconUrl:"img/marker-nonprof.svg",iconSize:[60,60]}),"For-Profit":n.icon({iconUrl:"img/marker-prof.svg",iconSize:[60,60]}),Individual:n.icon({iconUrl:"img/marker-ind.svg",iconSize:[60,60]}),Government:n.icon({iconUrl:"img/marker-gov.svg",iconSize:[60,60]})},p=n.markerClusterGroup({spiderfyOnMaxZoom:!0,showCoverageOnHover:!1,iconCreateFunction:o,maxClusterRadius:30,spiderfyDistanceMultiplier:1.3});console.log("Original: %O",t.entities),console.log("Filtered: %O",l),r.forEach(l,a),e.addLayer(p),e.on("locationerror",c),p.on("click",function(e){t.setEntityID(e.layer.options.entity_id),t.clickedEntity.entity=t.currentEntity,t.actions.interacted=!0,t.settingsEnabled&&t.mobile&&t.toggleSettings(),t.safeApply()}),e.on("click",function(){t.clickedEntity.entity=null,t.actions.interacted=!0,t.safeApply()}),t.$on("selectItem",function(){var n=t.currentEntity.locations.length>0?r.pluck(t.currentEntity.locations,"coordinates"):null;n.length>0&&e.setView(n[0],11),t.actions.interacted=!0,t.safeApply()})})})}var o=["$scope","$timeout","leafletData","_","$filter",i];t.module("civic-graph").controller("mapCtrl",o)}(angular,d3,L);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
