!function(i){"use strict";var c=["ui.bootstrap","leaflet-directive","ngAnimate","templateCache","civic-graph.util","civic-graph.api","civic-graph.network"],a=["civic-graph.util"],r=["civic-graph.util","civic-graph.api"];i.module("civic-graph.util",[]),i.module("civic-graph.api",a),i.module("civic-graph.network",r),i.module("civic-graph",c)}(angular);
!function(t){"use strict";function a(){return{templateUrl:"js/analytic/analytics.html",restrict:"E",scope:{},controller:"analyticsCtrl"}}var c=[a];t.module("civic-graph").directive("analytics",c)}(angular);
!function(e){"use strict";function t(e,t){function i(e){var i=t.getPropertyFromObj(e);this.id=i("id"),this.name=i("name"),this.enabled=i("enable",!0)}function n(e){return new i(e)}function r(){return e.get("/categories")}return{getCategoryModel:n,getAll:r}}t.$inject=["cgApiCaller","cgUtilService"],e.module("civic-graph.api").factory("categoryService",t)}(angular);
!function(t){"use strict";function n(){return o}function i(t,i){function o(t){var n=i.getPropertyFromObj(t);this.id=n("id"),this.name=n("name"),this.details=n("details"),this.entity=n("entity"),this.entity_id=n("entity_id")}function c(t){return new o(t)}function r(){return t.get(e)}return{getAll:r,getConnectionTypes:n,getConnectionModel:c}}var e="/connections",o={Funding:!0,Data:!0,Employment:!0,Collaboration:!0};i.$inject=["cgApiCaller","cgUtilService"],t.module("civic-graph.api").factory("connectionService",i)}(angular);
!function(i){"use strict";function n(i){function n(n){var t=i.getPropertyFromObj(n);this.id=t("id"),this.year=t("year"),this.amount=t("amount",0)}function t(i){return new n(i)}return{getFinanceModel:t}}n.$inject=["cgUtilService"],i.module("civic-graph.api").factory("financeService",n)}(angular);
!function(n){"use strict";function t(n){function t(t){var i=n.getPropertyFromObj(t);this.id=i("id"),this.year=i("year"),this.amount=i("amount"),this.entity=i("entity","")}function i(n){return new t(n)}return{getFundingConnectionModel:i}}t.$inject=["cgUtilService"],n.module("civic-graph.api").factory("fundingConnectionService",t)}(angular);
!function(e){"use strict";function t(e,t){var n=this;n.isLoading=!0,n.getCurrentView=t.getCurrentView,n.isMobile=t.mobileCheck(),e.$on("cg.data-loaded",function(){n.isLoading=!1})}function n(){return{restrict:"E",templateUrl:"js/centralColumn/centralColumn.template.html",controller:t,controllerAs:"central",scope:{}}}t.$inject=["$scope","cgMainService"],e.module("civic-graph").directive("centralColumn",n)}(angular,d3);
!function(e){"use strict";e.module("civic-graph").directive("input",function(){return{restict:"E",require:"?ngModel",link:function(e,r,t,i){"type"in t&&"range"===t.type.toLowerCase()&&i.$parsers.push(parseFloat)}}})}(angular);
!function(e){"use strict";function n(e,n,t,o,i,c,r){var l=this;l.entityTypes=c.getEntityTypes(),l.connectionTypes=r.getConnectionTypes(),l.currentView=o.getCurrentView(),l.sizeBy=i.sizeBy(),l.minConnection=i.minConnection(),l.sizeByList=[{name:"Employees",value:"employees"},{name:"Twitter Followers",value:"followers"}],l.changeMinConnection=function(){i.minConnection(l.minConnection)},l.changeView=function(){o.setCurrentView(l.currentView)},l.showAbout=function(){n.open({animation:!1,templateUrl:"control/about.html",controller:"modalCtrl"})},l.toggleLink=function(n){e.$broadcast("toggleLink",{name:n,enabled:l.connectionTypes[n]})},l.changeSizeBy=function(){i.sizeBy(l.sizeBy)}}function t(){return{templateUrl:"js/control/control.template.html",restrict:"E",scope:{toggleNetwork:"="},controller:n,controllerAs:"control",bindToController:!0}}n.$inject=["$rootScope","$uibModal","_","cgMainService","cgNetworkService","entityService","connectionService"],e.module("civic-graph").directive("control",t)}(angular);
!function(e){"use strict";function t(){return{key_people:3,grants_given:3,grants_received:3,investments_made:3,investments_received:3,collaborations:3,employments:3,relations:3,data_given:3,data_received:3,revenues:3,expenses:3}}function n(e,n){function i(t){e.$emit("cg.start-edit",t)}function o(t){e.itemsShown[t]=n.getCurrentEntity()[t].length}function s(t){e.itemsShown[t]=e.itemsShownDefault[t]}function r(n){e.currentEntity=n,e.itemsShown=t()}e.isMobile=n.mobileCheck(),e.itemsShownDefault=t(),e.itemsShown=t(),e.emitStartEditEvent=i,e.showMore=o,e.showLess=s,e.$on("cg.current-entity.update",function(e,t){r(t)})}n.$inject=["$scope","cgMainService"],e.module("civic-graph").controller("detailsCtrl",n)}(angular);
!function(e){"use strict";function t(t,i,n,o,s,r,c,d,a){function u(e){return i.jsonp("https://dev.virtualearth.net/REST/v1/Locations",{params:{query:e,key:"Ai58581yC-Sr7mcFbYTtUkS3ixE7f6ZuJnbFJCVI4hAtW1XoDEeZyidQz2gLCCyD",jsonp:"JSON_CALLBACK",include:"ciso2"}}).then(function(e){if(a.isDefined(e.data.resourceSets)&&e.data.resourceSets.length>0)return e.data.resourceSets[0].resources})}function l(e){if(0===t.editEntity.categories.length)t.editEntity.categories.push(e);else{var i=!1;for(var n in t.editEntity.categories)if(t.editEntity.categories.hasOwnProperty(n)){var o=t.editEntity.categories[n];if(o.id===e.id){i=!0,o.enabled=e.enabled;break}}i||t.editEntity.categories.push(e)}}function y(e,t){u(e.formattedAddress).then(function(i){if(a.isDefined(i[0])){var n=i[0],o=n.address,s=n.point;f(t),e.address_line=a.isDefined(o.addressLine)?o.addressLine:"",e.locality=a.isDefined(o.locality)?o.locality:"",e.district=a.isDefined(o.adminDistrict)?o.adminDistrict:"",e.country=a.isDefined(o.countryRegion)?o.countryRegion:null,e.country_code=a.isDefined(o.countryRegionIso2)?o.countryRegionIso2:"",e.coordinates=a.isDefined(s.coordinates)?s.coordinates:null,e.postal_code=a.isDefined(o.postalCode)?o.postalCode:null}})}function f(e){e&&t.editEntity.locations.push(d.getLocationModel())}function g(){o.some(t.editEntity.key_people,{name:"",id:null})||t.editEntity.key_people.push({name:"",id:null})}function p(e,t){t.entity_id=e.id}function E(e){o.some(e,{entity:""})||e.push({entity:"",amount:null,year:null,id:null})}function h(e,t){t.entity_id=e.id}function v(e){o.some(e,{entity:"",id:null})||e.push({entity:"",id:null,details:null})}function m(e){o.every(e,function(e){return e.amount>0&&e.year>1750})&&e.push({amount:null,year:null,id:null})}function S(){function e(e){t.isSaving=!1,t.$emit("editEntitySuccess",e),D()}function i(){t.isError=!0,n(function(){t.isError=!1},2e3)}t.isSaving=!0,r.saveEntity(t.editEntity.generateDBModel()).then(e,i)}function D(){t.isOpen=!1}function C(i,n){e.equals(i,n)||(t.editEntity=r.getEntityModel(i),t.categories=e.copy(_),L(),t.isEditing=a.isDefined(t.editEntity.id))}function L(){var e,i,n,o;for(i in t.categories)if(t.categories.hasOwnProperty(i)){e=t.categories[i];for(n in t.editEntity.categories)t.editEntity.categories.hasOwnProperty(n)&&(o=t.editEntity.categories[n],e.id===o.id&&(e.enabled=o.enabled))}}var _;t.isEditing=!1,t.entities=s.getEntityList(),t.editEntity=r.getEntityModel(s.getCurrentEntity()),t.entityTypes=r.getEntityTypes(),t.influenceTypes=r.getInfluenceTypes(),t.categories=[],t.addressSearch=u,t.toggleCategory=l,t.setLocation=y,t.addLocation=f,t.addKeyPerson=g,t.setFundingConnection=p,t.addFundingConnection=E,t.setConnection=h,t.addConnection=v,t.addFinance=m,t.save=S,t.cancelEdit=D,t.$watch("entity",C),c.getAll().then(function(i){_=i.categories,t.categories=e.copy(_)})}function i(){return{restrict:"E",templateUrl:"js/edit-entity/editEntity.template.html",controller:t,scope:{isOpen:"="}}}t.$inject=["$scope","$http","$timeout","_","cgMainService","entityService","categoryService","locationService","cgUtilService"],e.module("civic-graph").directive("editEntity",i)}(angular);
!function(i,t){"use strict";function s(i){function s(){var i=t(this);i.css("height","55vh")}function c(){var i=t(this);window.innerHeight/3>parseInt(i.css("height"))?i.css("height","55vh"):i.css("height","30vh")}var e;i.mobile&&(e=t("#details-panel"),e.css("height","30vh"),e.scrollTop(0),e.scroll(s),e.click(c))}function c(){return{restrict:"A",link:s}}i.module("civic-graph").directive("addMobileEvents",[c])}(angular,$);
!function(o){"use strict";function c(o,c){o.closeWindow=function(){c.close()}}o.module("civic-graph").controller("modalCtrl",["$scope","$modalInstance",c])}(angular);
!function(o){"use strict";o.module("civic-graph").constant("_",window._).config(["$locationProvider","$compileProvider",function(o,n){o.html5Mode(!0),n.debugInfoEnabled(!0)}]).filter("thousandSuffix",function(){return function(o,n){var t,i=["k","M","G","T","P","E"];return window.isNaN(o)?null:o<1e3?o:(t=Math.floor(Math.log(o)/Math.log(1e3)),(o/Math.pow(1e3,t)).toFixed(n)+i[t-1])}})}(angular);
!function(t){"use strict";function e(t,e,n,s,i,c,o){function r(t){return e(function(e){setTimeout(e,t)})}function a(e){switch(e){case"search":i.setIsEdit(!1),t.settingsEnabled=!1;break;case"settings":i.setIsEdit(!1),t.showsearchMB=!1;break;case"edit":t.settingsEnabled=!1,t.showsearchMB=!1;break;default:i.setIsEdit(!1),t.settingsEnabled=!1,t.showsearchMB=!1}}function u(){a("search"),t.showsearchMB=!t.showsearchMB,t.status.license=!1}function d(){a("settings"),t.settingsEnabled=!t.settingsEnabled}function l(t){i.setCurrentEntity(t),S.isMobile&&a("edit"),i.setIsEdit(!0)}function h(){t.status.isNetworkShown=!t.status.isNetworkShown,t.status.isNetworkShown&&t.$broadcast("triggerNetworkDraw")}function g(t){i.setCurrentEntity(t),S.isEdit()&&b()}function E(t){g(n.find(i.getEntityList(),{id:t}))}function w(t){(s.isObject(t)?g:E)(t)}function f(e){t.entities=e}function b(){i.setIsEdit(!1)}function y(e){f(e.nodes),t.$broadcast("triggerNetworkDraw")}function k(t){S.currentEntity=t}var S=this;S.currentEntity=null,S.isMobile=i.mobileCheck(),S.isEdit=i.getIsEdit,t.searchItems=null,t.clickedEntity={entity:null},t.showsearchMB=!1,t.status={isNetworkShown:!0,license:!0,networkLoading:!0},t.settingsEnabled=!S.isMobile,t.showSearch=u,t.toggleSettings=d,t.startEdit=l,t.switchView=h,t.setEntity=g,t.setEntityID=E,t.selectItem=w,t.$on("cg.current-entity.update",function(t,e){k(e)}),t.$on("editEntitySuccess",y),t.$on("cg.start-edit",l),r(1e3).then(function(){return e.all([c.getAll(),o.getAll()])}).then(function(e){i.setEntityList(e[0].nodes),t.searchItems=e[0].nodes,i.setConnectionObj(e[1].connections),t.$broadcast("cg.data-loaded")})}e.$inject=["$scope","$q","_","cgUtilService","cgMainService","entityService","connectionService"],t.module("civic-graph").controller("homeCtrl",e)}(angular);
!function(i){"use strict";function t(i,t,e,n){function o(){return console.log("Current Entity in Service was called"),w}function a(t){e.isEqual(w,t)||(w=t,i.$broadcast("cg.current-entity.update",w))}function r(){var i=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series([46])0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,e=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br([ev])w|bumb|bw-([nu])|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do([cp])o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly([-_])|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-([mpt])|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c([- _agpst])|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac([ -\/])|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja([tv])a|jbro|jemu|jigs|kddi|keji|kgt([ \/])|klon|kpt |kwc-|kyo([ck])|le(no|xi)|lg( g|\/([klu])|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t([- ov])|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30([02])|n50([025])|n7(0([01])|10)|ne(([cm])-|on|tf|wf|wg|wt)|nok([6i])|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan([adt])|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c([-01])|47|mc|nd|ri)|sgh-|shar|sie([-m])|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel([im])|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c([- ])|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i,n=t.navigator.userAgent||t.navigator.vendor||t.opera;return i.test(n)||e.test(n.substr(0,4))}function c(){return f}function s(i){Array.isArray(i)&&(f=i)}function m(){return y}function l(i){n.isObject(i)&&(y=i)}function p(){return h}function u(i){n.isString(i)&&k.includes(i)&&(h=i)}function d(){return v}function g(i){v=!!i}var b=this,w=null,v=!1,k=["network","map"],h="network",f=[],y={};b.getCurrentEntity=o,b.setCurrentEntity=a,b.mobileCheck=r,b.getEntityList=c,b.setEntityList=s,b.getConnectionObj=m,b.setConnectionObj=l,b.getCurrentView=p,b.setCurrentView=u,b.getIsEdit=d,b.setIsEdit=g}t.$inject=["$rootScope","$window","_","cgUtilService"],i.module("civic-graph").service("cgMainService",t)}(angular);
!function(t){"use strict";function e(t,e){return function(n){return n[t]===e}}function n(t,n,i){function r(t){i.setCurrentEntity(t)}function c(){t.categorizedEntities=Object.keys(u).reduce(function(t,n){var r={};return r[n]=i.getEntityList().filter(e("type",n)),Object.assign({},t,r)},{})}var u=n.getEntityTypes();t.categorizedEntities={},t.updateCurrentEntity=r,t.$watch(i.getEntityList,c)}n.$inject=["$scope","entityService","cgMainService"],t.module("civic-graph").controller("overviewCtrl",n)}(angular);
!function(r){"use strict";function n(r){return!("undefined"==typeof r||null===r)}function t(r){return n(r)&&!Array.isArray(r)&&"object"==typeof r}function i(r){return n(r)&&"string"==typeof r}function e(r){var i=t(r)?r:{};return function(r,t){var e=n(t)?t:null;return n(i[r])?i[r]:e}}function u(r,n){var i=Array.isArray(r)?r.filter(t).map(n):[];return i.concat([n()])}function o(){return{isDefined:n,isObject:t,isString:i,getPropertyFromObj:e,loopAndInit:u}}r.module("civic-graph.util").factory("cgUtilService",o)}(angular);
!function(c){"use strict";function n(c){}c.module("civic-graph").controller("analyticsCtrl",["$scope",n])}(angular);
!function(t){"use strict";function e(t){t.defaults.headers.common["X-Requested-With"]="XMLHttpRequest"}e.$inject=["$httpProvider"],t.module("civic-graph.api").config(e)}(angular);
!function(t){"use strict";function r(t,r){function a(t){return console.error("Recieved an error from API with this message: %O",t.data),r.reject(t)}function i(t){return t.data}function c(r,c){return t.get(e+r,{params:c,headers:n}).then(i,a)}function o(r,c){return t.post(e+r,c,{headers:n}).then(i,a)}return{get:c,post:o}}var e="https://api.civicgraph.io/api",n={};r.$inject=["$http","$q"],t.module("civic-graph.api").factory("cgApiCaller",r)}(angular);
!function(e){"use strict";function i(e){function i(i){function t(){var t=e.isDefined(i)?i:{},o=e.isDefined(t.address_line)?t.address_line+" ":"",c=e.isDefined(t.locality)?t.locality+", ":"",n=e.isDefined(t.country_code)?t.country_code+" ":"",r=e.isDefined(t.postal_code)?t.postal_code:"";return(o+c+n+r).trim()}var o=this,c=e.getPropertyFromObj(i);o.id=c("id"),o.address_line=c("address_line"),o.locality=c("locality"),o.district=c("district"),o.postal_code=c("postal_code"),o.country=c("country"),o.country_code=c("country_code"),o.coordinates=c("coordinates"),o.formattedAddress=t()}function t(e){return new i(e)}return{getLocationModel:t}}i.$inject=["cgUtilService"],e.module("civic-graph.api").factory("locationService",i)}(angular);
!function(e){"use strict";function n(){return["Local","National","Global"]}function o(e,o,i,p,r,a,c){function l(e){function n(){var e=new l(t);return e.locations.pop(),e.locations.pop(),e.grants_received.pop(),e.grants_received.pop(),e.grants_given.pop(),e.grants_given.pop(),e.investments_received.pop(),e.investments_received.pop(),e.investments_made.pop(),e.investments_made.pop(),e.data_given.pop(),e.data_given.pop(),e.data_received.pop(),e.data_received.pop(),e.collaborations.pop(),e.collaborations.pop(),e.key_people.pop(),e.key_people.pop(),e.employments.pop(),e.employments.pop(),e.revenues.pop(),e.revenues.pop(),e.expenses.pop(),e.expenses.pop(),e.categories.pop(),e.categories.pop(),e.description="",e}var t=this,d=c.isDefined(e)?e:{},s=c.getPropertyFromObj(e);t.id=s("id"),t.name=s("name"),t.influence=s("influence"),t.type=s("type"),t.nickname=s("nickname"),t.url=s("url"),t.twitter_handle=s("twitter_handle"),t.employees=s("employees"),t.locations=c.loopAndInit(d.locations,r.getLocationModel),t.grants_received=c.loopAndInit(d.grants_received,o.getFundingConnectionModel),t.investments_received=c.loopAndInit(d.investments_received,o.getFundingConnectionModel),t.grants_given=c.loopAndInit(d.grants_given,o.getFundingConnectionModel),t.investments_made=c.loopAndInit(d.investments_made,o.getFundingConnectionModel),t.data_given=c.loopAndInit(d.data_given,i.getConnectionModel),t.data_received=c.loopAndInit(d.data_received,i.getConnectionModel),t.collaborations=c.loopAndInit(d.collaborations,i.getConnectionModel),t.key_people=c.loopAndInit(d.key_people,i.getConnectionModel),t.employments=c.loopAndInit(d.employments,i.getConnectionModel),t.revenues=c.loopAndInit(d.revenues,p.getFinanceModel),t.expenses=c.loopAndInit(d.expenses,p.getFinanceModel),t.categories=c.loopAndInit(d.categories,a.getCategoryModel),t.generateDBModel=n}function d(e){return new l(e)}function s(){return e.get("/entities")}function g(n){return e.post("/save",{entity:n})}return{getEntityModel:d,getInfluenceTypes:n,getAll:s,saveEntity:g,getEntityTypes:function(){return t}}}var t={Government:!0,"For-Profit":!0,"Non-Profit":!0,Individual:!0};o.$inject=["cgApiCaller","fundingConnectionService","connectionService","financeService","locationService","categoryService","cgUtilService"],e.module("civic-graph.api").factory("entityService",o)}(angular);
!function(t,e,o){"use strict";function r(t,r,n,i){function a(){t.options={center:{lat:20,lng:-40,zoom:3},defaults:{tileLayer:"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZGF2aWRscm50IiwiYSI6IjA0M2RkNzMzZWJmNzEzNGYzMTdhYTExYzAyZmU4ZTE1In0.TNYlFta2VItrkn4L0Z9BJQ",tileLayerOptions:{detectRetina:!0,reuseTiles:!1},zoomControl:!1,attributionControl:!1}},n.getMap().then(s)}function c(t){var o=t.data,r=e.layout.pie().sort(null).value(function(t){return t.value}),n=e.svg.arc().outerRadius(t.r).innerRadius(t.r-10),i=t.r+t.strokeWidth,a=2*i,c=a,s=document.createElementNS(e.ns.prefix.svg,"svg"),l=e.select(s).data(o).attr("class","piechart").attr("width",a).attr("height",c),d=l.selectAll(".arc").data(r(o)).enter().append("g").attr("class","arc").attr("transform","translate("+i+","+i+")");return d.append("path").attr("d",n).attr("class",function(t){return t.data.type+"-arc"}),d.append("svg:text").text(function(e,o){if(0===o)return t.count}).attr("x",-4*t.count.toString().length).attr("dy",5).attr("class","arcText"),window.XMLSerializer?(new window.XMLSerializer).serializeToString(s):s.xml?s.xml:""}function s(t){function e(t){var e=t.getAllChildMarkers(),n=e.length,i=r.pluck(e,"options"),a=r.map(r.countBy(i,"type"),function(t,e){return{type:e,value:t}}),s=28,l=1,d=2*(s+l),u=c({data:a,r:s,strokeWidth:l,count:n});return new o.DivIcon({html:u,className:"marker-cluster",iconSize:new o.point(d,d)})}function n(t){function e(e){if(r.every(e.coordinates)){"40.78200"===e.coordinates[0].toFixed(5)&&"-73.83170"===e.coordinates[1].toFixed(5)&&(e.coordinates[0]=40.77065,e.coordinates[1]=-73.97406);var n=o.marker(e.coordinates,{icon:l[t.type],title:t.name,entity_id:t.id,message:t.name,type:t.type});d.addLayer(n)}}r.forEach(t.locations,e)}function a(t){console.error(t.message+"  %O",t)}var s=i.getEntityList();t.invalidateSize(),new o.Control.Zoom({position:"topright"}).addTo(t),new o.Control.Locate({position:"topright",showPopup:!1,icon:"fa fa-location-arrow"}).addTo(t);var l={"Non-Profit":o.icon({iconUrl:"img/marker-nonprof.svg",iconSize:[60,60]}),"For-Profit":o.icon({iconUrl:"img/marker-prof.svg",iconSize:[60,60]}),Individual:o.icon({iconUrl:"img/marker-ind.svg",iconSize:[60,60]}),Government:o.icon({iconUrl:"img/marker-gov.svg",iconSize:[60,60]})},d=o.markerClusterGroup({spiderfyOnMaxZoom:!0,showCoverageOnHover:!1,iconCreateFunction:e,maxClusterRadius:30,spiderfyDistanceMultiplier:1.3});r.forEach(s,n),t.addLayer(d),t.on("locationerror",a)}a(),t.$on("cg.data-loaded",a)}function n(){return{restrict:"E",templateUrl:"js/component/map/map.template.html",controller:r}}r.$inject=["$scope","_","leafletData","cgMainService"],t.module("civic-graph").directive("cgMap",n)}(angular,d3,L);
!function(n,t){"use strict";function e(n){return a(n.select("svg"))&&n.select("svg").remove(),n.append("svg").attr("height","100vh").attr("width","100%")}function r(n){return function(e){function r(t){var e=t.value[n];return isFinite(e)&&a(e)?e:0}var i=10,u=50,c=t.max(e,r);return function(e){return t.scale.sqrt().domain([5,c]).range([i,u])(e.value[n])}}}function i(n){function t(n){return n/3}function e(n){return n-t(n)}return{Individual:{x:t(n.width),y:t(n.height)},"For-Profit":{x:t(n.width),y:e(n.height)},"Non-Profit":{x:e(n.width),y:t(n.height)},Government:{x:e(n.width),y:e(n.height)}}}function u(n){return function(t){var e=r(n)(t);return function(t){return a(t.value[n])?-2*e(t):-20}}}function c(n){return function(){return n()}}function o(o,f,s,d,l){function g(g,h){function v(){function t(){return n.element(o)[0].innerWidth}function e(){return n.element(o)[0].innerHeight}return[e(),t()]}function p(){g.$apply()}function y(n,t){n!==t&&(E&&E(),m(l.getGraphData()))}function x(n){a(n)&&(k=r(n),w=u(n))}function m(n){function r(t){n.nodeList.map(function(n){return n.value}).filter(function(n){return f.isEqual(t,n)}).forEach(o)}function u(n,e){return t.layout.force().size([e.width,e.height]).nodes(n.nodeList).links(n.linkList).linkStrength(0).linkDistance(50).charge(D).start()}function c(n){function e(n){return a(n)?m(n):i}function r(n){function e(){s.isDefined(t.event)&&(t.event.preventDefault(),t.event.stopPropagation()),n.selected=!0,l(n)}g.$apply(e)}var i=10,u=y.selectAll(".node").data(n).enter().append("g").attr("class",function(n){return"node "+n.value.type+"-node"}).on("click",r).call(C.drag);return u.append("circle").attr("r",e),u.append("text").text(function(n){return a(n.value.nickname)?n.value.nickname:n.value.name}).attr("dx",function(){return-.065*this.getComputedTextLength()/2+"em"}).attr("dy",function(){return.08*this.parentNode.getBBox().height/2+.5+"em"}),u}function o(t){function e(n){return function(t){return n.source===t.index||n.target===t.index}}function r(t){return function(r){return t.index===r.index||s.isDefined(n.linkList.find(e(t)))}}G.classed("focused",r(t)).classed("unfocused",f.negate(r(t))),B.classed("focused",e(t)).classed("unfocused",f.negate(e))}function l(n){if(s.isDefined(d.getCurrentEntity())){if(f.isEqual(d.getCurrentEntity(),n.value))return;v(n)}d.setCurrentEntity(n.value),o(n)}function h(){s.isDefined(d.getCurrentEntity())&&(v(),d.setCurrentEntity(null))}function v(t){G.classed("focused",!1).classed("unfocused",!1),B.classed("focused",!1).classed("unfocused",!1),s.isDefined(t)?t.fixed=!1:n.nodeList.forEach(function(n){n.fixed=!1}),s.isDefined(d.getCurrentEntity())&&C.resume()}function p(n){function t(n){function t(n){return e[n.target.id]||e[n.target.id]&&null!==e[n.target.id].find(function(t){return t===n.source.id})}var e=n.map(function(n){return{source:n.source.id,target:n.target.id}}).reduce(function(n,t){return n[t.source]?n[t.source].push(t.target):n[t.source]=[t.target],n},{});return n.filter(t)}var e=t(n);return y.selectAll(".link").data(e).enter().append("line").attr("class",function(n){return"link "+n.type+"-link "})}var y=e(L);if(y.on("click",function(){g.$apply(h)}),0===n.nodeList.length)return void console.debug("Node list is empty, not drawing a graph");var x=y.node().getBoundingClientRect(),m=k(n.nodeList),D=w(n.nodeList),$=i(x),C=u(n,x),B=p(n.linkList),G=c(n.nodeList);C.on("tick",function(t){function e(){var e=.1*t.alpha;B.attr("x1",function(n){return n.source.x}).attr("y1",function(n){return n.source.y}).attr("x2",function(n){return n.target.x}).attr("y2",function(n){return n.target.y}),n.nodeList.forEach(function(n){n.y+=($[n.value.type].y-n.y)*e,n.x+=($[n.value.type].x-n.x)*e}),G.attr("transform",function(n){return"translate("+n.x+","+n.y+")"})}g.$apply(e)}),E=g.$on("cg.current-entity.update",function(n,t){r(t)})}var k,w,E,L=t.select(h[0]);o.onresize=f.debounce(p),g.$watch(c(l.sizeBy),x),g.$watchGroup([c(l.minConnection),c(l.sizeBy)],y),g.$watchCollection(f.debounce(v),y),g.$watch(l.getGraphData,y,!0)}return a=s.isDefined,{restrict:"E",link:g}}var a;o.$inject=["$window","_","cgUtilService","cgMainService","cgNetworkService"],n.module("civic-graph.network").directive("cgNetworkGraph",o)}(angular,d3);
!function(n){"use strict";function t(n){return function(t){return n[t.type]}}function e(n){return function(t){return t.value.collaborations.length>=n}}function r(n){return{id:n.id,value:n}}function i(n){return function(t){return t.id===n}}function c(n,c,u,o){function f(t){return n.isString(t)&&(y=t),y}function a(n){return isFinite(n)&&n>=0&&(d=n),d}function s(n){return Array.isArray(n)?n.filter(t(u.getEntityTypes())).map(r).filter(e(d)):[]}function g(e,r){function c(t){var c=r[t];return c.map(function(n){var r=e.findIndex(i(n.source)),c=e.findIndex(i(n.target));return{source:r,target:c,type:t}}).filter(n.isDefined)}function u(t){function e(e){return n.isDefined(t[e])&&t[e]!==-1}return e("source")&&e("target")}function f(n,t){return n.concat(t)}return Object.keys(r).map(c).reduce(f,[]).filter(u).filter(t(o.getConnectionTypes()))}function l(){var n=c.getConnectionObj(),t=s(c.getEntityList());return{nodeList:t,linkList:g(t,n)}}var v=this,d=5,y="employees";v.getGraphData=l,v.sizeBy=f,v.minConnection=a}c.$inject=["cgUtilService","cgMainService","entityService","connectionService"],n.module("civic-graph.network").service("cgNetworkService",c)}(angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
