!function(e){"use strict";var t=["ui.bootstrap","leaflet-directive","ngAnimate","templateCache"];e.module("civic-graph",t)}(angular);
!function(t){"use strict";function a(){return{templateUrl:"js/analytic/analytics.html",restrict:"E",scope:{},controller:"analyticsCtrl"}}var c=[a];t.module("civic-graph").directive("analytics",c)}(angular);
!function(o){"use strict";function r(){return{templateUrl:"js/control/controls.html",restrict:"E",scope:{toggleNetwork:"="},controller:"controlCtrl",controllerAs:"control",bindToController:{minConnections:"="}}}var t=[r];o.module("civic-graph").directive("control",t)}(angular);
!function(t){"use strict";function e(){return{templateUrl:"js/edit-entity/edit.html",restrict:"E",scope:{entity:"=",entities:"=",isOpen:"="},controller:"editCtrl"}}var i=[e];t.module("civic-graph").directive("editEntity",i)}(angular);
!function(i,t){"use strict";function s(i){function s(){var i=t(this);i.css("height","55vh")}function c(){var i=t(this);window.innerHeight/3>parseInt(i.css("height"))?i.css("height","55vh"):i.css("height","30vh")}var e;i.mobile&&(e=t("#details-panel"),e.css("height","30vh"),e.scrollTop(0),e.scroll(s),e.click(c))}function c(){return{restrict:"A",link:s}}i.module("civic-graph").directive("addMobileEvents",[c])}(angular,$);
!function(o){"use strict";function c(o,c){o.closeWindow=function(){c.close()}}o.module("civic-graph").controller("modalCtrl",["$scope","$modalInstance",c])}(angular);
!function(t){"use strict";t.module("civic-graph").constant("_",window._).constant("config",{apiHost:"https://api.civicgraph.io/"}).config(["$locationProvider","$httpProvider","$compileProvider",function(t,o,i){t.html5Mode(!0),o.defaults.headers.common["X-Requested-With"]="XMLHttpRequest",i.debugInfoEnabled(!0)}]).filter("thousandSuffix",function(){return function(t,o){var i,n=["k","M","G","T","P","E"];return window.isNaN(t)?null:t<1e3?t:(i=Math.floor(Math.log(t)/Math.log(1e3)),(t/Math.pow(1e3,i)).toFixed(o)+n[i-1])}})}(angular);
!function(t){"use strict";function i(t,i,e,n,o,a){t.entities=[],t.searchItems=null,t.categories=[],t.currentLocation=null,t.clickedLocation={},t.clickedLocation.location=null,t.clickedEntity={},t.clickedEntity.entity=null,t.editing=!1,t.actions={interacted:!1},t.showsearchMB=!1,t.showAnalytics=!1,t.entityTypes=n.getEntityTypes(),t.connectionTypes=o.getConnectionTypes(),t.status={isNetworkShown:!0,license:!0,networkLoading:!0},t.toggleAnalytics=function(){t.showAnalytics=!t.showAnalytics},this.minConnections=t.minConnections=2;var s=this;t.$watch("minConnections",function(){t.$broadcast("triggerNetworkDraw")}),t.connectionChange=function(){console.log(s.minConnections),t.minConnections=s.minConnections,t.$broadcast("triggerNetworkDraw")},t.hydePartials=function(i){"search"===i?(t.editing=!1,t.settingsEnabled=!1):"settings"===i?(t.editing=!1,t.showsearchMB=!1):"edit"===i?(t.settingsEnabled=!1,t.showsearchMB=!1):(t.editing=!1,t.settingsEnabled=!1,t.showsearchMB=!1)},t.showSearch=function(){t.hydePartials("search"),t.showsearchMB=!t.showsearchMB,t.status.license=!1},t.toggleSettings=function(){t.hydePartials("settings"),t.settingsEnabled=!t.settingsEnabled},t.startEdit=function(i){t.currentEntity=i,t.mobile&&t.hydePartials("edit"),t.editing=!0},t.switchView=function(){t.status.isNetworkShown=!t.status.isNetworkShown,t.status.isNetworkShown&&t.$broadcast("triggerNetworkDraw")},window.mobilecheck=function(){var t=!1,i=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,e=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i;return function(n){(i.test(n)||e.test(n.substr(0,4)))&&(t=!0)}(navigator.userAgent||navigator.vendor||window.opera),t},t.mobile=window.mobilecheck(),t.settingsEnabled=!t.mobile,setTimeout(function(){i.get(a.apiHost+"api/entities").success(function(i){t.entities=i.nodes;var n=e.uniq(e.pluck(e.flatten(e.pluck(t.entities,"locations")),"locality")),o=e.map(n,function(i){var n=e.filter(t.entities,e.flow(e.property("locations"),e.partialRight(e.any,{locality:i})));return{name:i,type:"location",entities:n,dict:e.zipObject(e.pluck(n,"name"),e.pluck(n,"index"))}});t.searchItems=o.concat(t.entities),t.overviewUrl="js/overview/overview.html",t.$broadcast("triggerNetworkDraw")})},100),t.overviewUrl=null,t.setEntity=function(i){t.currentLocation=null,t.currentEntity=i,t.editing&&t.stopEdit(),t.$broadcast("entityChange")},t.setEntityID=function(i){t.setEntity(e.find(t.entities,{id:i}))},t.setLocation=function(i){t.currentLocation=i,t.editing&&t.stopEdit(),t.$broadcast("itemChange")},t.selectItem=function(i){"location"===i.type?t.setLocation(i):t[i%1===0?"setEntityID":"setEntity"](i),t.$broadcast("selectItem",i)},t.$on("setCurrentEntity",function(i,e){t.currentEntity=e.value}),t.$on("setCurrentLocation",function(i,e){t.currentLocation=e.value}),t.setEntities=function(i){t.entities=i},t.stopEdit=function(){t.editing=!1},t.$on("editEntitySuccess",function(i){t.setEntities(i.nodes),t.$broadcast("triggerNetworkDraw")}),t.animationsEnabled=!0}var e=["$scope","$http","_","entityService","connectionService","config",i];t.module("civic-graph").controller("homeCtrl",e)}(angular);
!function(i){"use strict";var a=[];i.module("civic-graph").directive("map",a)}(angular);
!function(r){"use strict";function t(){return{restrict:"E",templateUrl:"js/network/network.html",controller:"networkCtrl"}}var e=[t];r.module("civic-graph").directive("network",e)}(angular);
!function(e){"use strict";e.module("civic-graph").directive("input",function(){return{restict:"E",require:"?ngModel",link:function(e,r,t,i){"type"in t&&"range"===t.type.toLowerCase()&&i.$parsers.push(parseFloat)}}})}(angular);
!function(e){"use strict";function t(e,t){e.categorizedEntities={},t.forEach(t.keys(e.entityTypes),function(i){e.categorizedEntities[i]=t.filter(e.entities,{type:i})})}e.module("civic-graph").controller("overviewCtrl",["$scope","_",t])}(angular);
!function(c){"use strict";function n(c){}c.module("civic-graph").controller("analyticsCtrl",["$scope",n])}(angular);
!function(e){"use strict";function o(e,o,n,t,i){function c(){a.changeView(a.toggleNetwork?"Network":"Map")}var a=this;a.entityTypes=e.getEntityTypes(),a.connectionTypes=o.getConnectionTypes(),a.sizeByList=[{name:"Employees",value:"employees"},{name:"Twitter Followers",value:"followers"}],a.sizeBy="employees",a.showView={Network:!0,Map:!1},a.switchView=c,a.changeView=function(e){t.forEach(t.keys(a.showView),function(o){a.showView[o]=e===o}),n.$broadcast("viewChange",a.showView)},a.showAbout=function(){i.open({animation:!1,templateUrl:"control/about.html",controller:"modalCtrl"})},a.toggleNode=function(e){n.$broadcast("toggleNode",{name:e,enabled:a.entityTypes[e]})},a.toggleLink=function(e){n.$broadcast("toggleLink",{name:e,enabled:a.connectionTypes[e]})},a.changeSizeBy=function(){n.$broadcast("changeSizeBy",a.sizeBy)},a.changeSizeBy()}var n=["entityService","connectionService","$rootScope","_","$modal",o];e.module("civic-graph").controller("controlCtrl",n)}(angular);
!function(t){"use strict";function e(t){return void 0!==t&&null!==t}function i(i,n,o,s,c,a,r){function d(){var t,e,n,o;for(e in i.categories)if(i.categories.hasOwnProperty(e)){t=i.categories[e];for(n in i.editEntity.categories)i.editEntity.categories.hasOwnProperty(n)&&(o=i.editEntity.categories[n],t.id===o.id&&(t.enabled=o.enabled))}}i.isEditing=!1,i.editEntity=c.getEntityModel(i.entity),i.entityTypes=c.getEntityTypes(),i.influenceTypes=c.getInfluenceTypes();var u;i.categories=[],i.addressSearch=function(t){return n.jsonp("https://dev.virtualearth.net/REST/v1/Locations",{params:{query:t,key:"Ai58581yC-Sr7mcFbYTtUkS3ixE7f6ZuJnbFJCVI4hAtW1XoDEeZyidQz2gLCCyD",jsonp:"JSON_CALLBACK",include:"ciso2"}}).then(function(t){if(e(t.data.resourceSets)&&t.data.resourceSets.length>0)return t.data.resourceSets[0].resources})},i.toggleCategory=function(t){if(0===i.editEntity.categories.length)i.editEntity.categories.push(t);else{var e=!1;for(var n in i.editEntity.categories)if(i.editEntity.categories.hasOwnProperty(n)){var o=i.editEntity.categories[n];if(o.id===t.id){e=!0,o.enabled=t.enabled;break}}e||i.editEntity.categories.push(t)}},i.setLocation=function(t,n){i.addressSearch(t.formattedAddress).then(function(o){var s=o[0],c=s.address,a=s.point;i.addLocation(n),t.address_line=e(c.addressLine)?c.addressLine:"",t.locality=e(c.locality)?c.locality:"",t.district=e(c.adminDistrict)?c.adminDistrict:"",t.country=e(c.countryRegion)?c.countryRegion:null,t.country_code=e(c.countryRegionIso2)?c.countryRegionIso2:"",t.coordinates=e(a.coordinates)?a.coordinates:null,t.postal_code=e(c.postalCode)?c.postalCode:null})},i.addLocation=function(t){t&&i.editEntity.locations.push(a.getLocationModel())},i.addKeyPerson=function(){s.some(i.editEntity.key_people,{name:"",id:null})||i.editEntity.key_people.push({name:"",id:null})},i.setFundingConnection=function(t,e){e.entity_id=t.id},i.addFundingConnection=function(t){s.some(t,{entity:""})||t.push({entity:"",amount:null,year:null,id:null})},i.setConnection=function(t,e){e.entity_id=t.id},i.addConnection=function(t){s.some(t,{entity:"",id:null})||t.push({entity:"",id:null,details:null})},i.addFinance=function(t){s.every(t,function(t){return t.amount>0&&t.year>1750})&&t.push({amount:null,year:null,id:null})},i.save=function(){i.isSaving=!0,console.log(i.editEntity.generateDBModel()),n.post(r.apiHost+"api/save",{entity:i.editEntity.generateDBModel()}).success(function(t){i.isSaving=!1,i.$emit("editEntitySuccess",t),i.cancelEdit()}).error(function(){i.isError=!0,o(function(){i.isError=!1},2e3)})},i.cancelEdit=function(){i.isOpen=!1},i.$watch("entity",function(n,o){t.equals(n,o)||(console.log(i.entity),i.editEntity=c.getEntityModel(n),i.categories=t.copy(u),d(),i.isEditing=e(i.editEntity.id))}),n.get(r.apiHost+"api/categories").success(function(e){u=e.categories,i.categories=t.copy(u)})}var n=["$scope","$http","$timeout","_","entityService","locationService","config",i];t.module("civic-graph").controller("editCtrl",n)}(angular);
!function(n){"use strict";function e(){function n(n){return void 0!==n&&null!==n}function e(e){var i=n(e)?e:{};this.name=n(i.name)?i.name:null,this.enabled=!n(i.enable)||i.enabled,this.id=n(i.id)?i.id:null}this.getCategoryModel=function(n){return new e(n)}}var i=[e];n.module("civic-graph").service("categoryService",i)}(angular);
!function(n){"use strict";function t(n){return void 0!==n&&null!==n}function i(){function n(n){var i=t(n);this.entity=i&&t(n.entity)?n.entity:null,this.id=i&&t(n.id)?n.id:null,this.details=i&&t(n.details)?n.details:null,this.name=i&&t(n.name)?n.name:null,this.entity_id=i&&t(n.entity_id)?n.entity_id:null}this.getConnectionModel=function(t){return new n(t)},this.getConnectionTypes=function(){return l}}var e=[i],l={Funding:!0,Data:!0,Employment:!0,Collaboration:!0};n.module("civic-graph").service("connectionService",e)}(angular);
!function(e){"use strict";function n(n,t,i,o,s){function p(e){return void 0!==e&&null!==e}function r(n,t){if(!p(n)&&!e.isArray(n))return[t()];var i,o,s=[];for(i in n)n.hasOwnProperty(i)&&(o=n[i],e.isObject(o)&&s.push(t(o)));return s.push(t()),s}function a(e){var l=this,c=p(e)?e:{};this.id=p(c.id)?c.id:null,this.name=p(c.name)?c.name:null,this.locations=r(c.locations,o.getLocationModel),this.influence=p(c.influence)?c.influence:null,this.grants_received=r(c.grants_received,n.getFundingConnectionModel),this.investments_received=r(c.investments_received,n.getFundingConnectionModel),this.grants_given=r(c.grants_given,n.getFundingConnectionModel),this.investments_made=r(c.investments_made,n.getFundingConnectionModel),this.data_given=r(c.data_given,t.getConnectionModel),this.data_received=r(c.data_received,t.getConnectionModel),this.collaborations=r(c.collaborations,t.getConnectionModel),this.key_people=r(c.key_people,t.getConnectionModel),this.employments=r(c.employments,t.getConnectionModel),this.revenues=r(c.revenues,i.getFinanceModel),this.expenses=r(c.expenses,i.getFinanceModel),this.categories=r(c.categories,s.getCategoryModel),this.type=p(c.type)?c.type:null,this.nickname=p(c.nickname)?c.nickname:null,this.url=p(c.url)?c.url:null,this.twitter_handle=p(c.twitter_handle)?c.twitter_handle:null,this.employees=p(c.employees)?c.employees:null,this.generateDBModel=function(){var e=new a(l);return e.locations.pop(),e.locations.pop(),e.grants_received.pop(),e.grants_received.pop(),e.grants_given.pop(),e.grants_given.pop(),e.investments_received.pop(),e.investments_received.pop(),e.investments_made.pop(),e.investments_made.pop(),e.data_given.pop(),e.data_given.pop(),e.data_received.pop(),e.data_received.pop(),e.collaborations.pop(),e.collaborations.pop(),e.key_people.pop(),e.key_people.pop(),e.employments.pop(),e.employments.pop(),e.revenues.pop(),e.revenues.pop(),e.expenses.pop(),e.expenses.pop(),e.categories.pop(),e.categories.pop(),e.description="",console.log(e),e}}var l={Government:!0,"For-Profit":!0,"Non-Profit":!0,Individual:!0},c=["Local","National","Global"];this.getEntityModel=function(e){return new a(e)},this.getEntityTypes=function(){return l},this.getInfluenceTypes=function(){return c}}var t=["fundingConnectionService","connectionService","financeService","locationService","categoryService",n];e.module("civic-graph").service("entityService",t)}(angular);
!function(n){"use strict";function i(n){return void 0!==n&&null!==n}function t(){function n(n){var t=i(n)?n:{};this.amount=i(t.amount)&&t.amount>=0?t.amount:0,this.year=i(t.year)&&t.year>=1750?t.year:null,this.id=i(t.id)?t.id:null}this.getFinanceModel=function(i){return new n(i)}}var e=[t];n.module("civic-graph").service("financeService",e)}(angular);
!function(n){"use strict";function i(n){return void 0!==n&&null!==n}function t(){function n(n){var t=i(n);this.entity=t&&i(n.entity)?n.entity:"",this.amount=t&&i(n.amount)?n.amount:null,this.year=t&&i(n.year)?n.year:null,this.id=t&&i(n.id)?n.id:null}this.getFundingConnectionModel=function(i){return new n(i)}}var e=[t];n.module("civic-graph").service("fundingConnectionService",e)}(angular);
!function(t){"use strict";function i(){function t(t){return void 0!==t&&null!==t}function i(i){var s=t(i)?i:{};this.address_line=t(s.address_line)?s.address_line:null,this.locality=t(s.locality)?s.locality:null,this.district=t(s.district)?s.district:null,this.postal_code=t(s.postal_code)?s.postal_code:null,this.country=t(s.country)?s.country:null,this.country_code=t(s.country_code)?s.country_code:null,this.coordinates=t(s.coordinates)?s.coordinates:null,this.id=t(s.id)?s.id:null,this.formattedAddress=(t(this.address_line)?this.address_line+" ":"")+(t(this.locality)?this.locality+", ":"")+(t(this.country_code)?this.country_code+" ":"")+(t(this.postal_code)?this.postal_code:""),this.formattedAddress=this.formattedAddress.trim()}this.getLocationModel=function(t){return new i(t)}}var s=[i];t.module("civic-graph").service("locationService",s)}(angular);
!function(e){"use strict";function n(e,n){e.itemsShownDefault={key_people:3,grants_given:3,grants_received:3,investments_made:3,investments_received:3,collaborations:3,employments:3,relations:3,data_given:3,data_received:3,revenues:3,expenses:3},e.itemsShown=n.clone(e.itemsShownDefault),e.$on("entityChange",function(){e.itemsShown=n.clone(e.itemsShownDefault)}),e.showMore=function(n){e.itemsShown[n]=e.currentEntity[n].length},e.showLess=function(n){e.itemsShown[n]=e.itemsShownDefault[n]}}e.module("civic-graph").controller("detailsCtrl",["$scope","_",n])}(angular);
!function(t,e,n){"use strict";function i(t,i,o,r,a){t.options={center:{lat:20,lng:-40,zoom:3},defaults:{tileLayer:"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZGF2aWRscm50IiwiYSI6IjA0M2RkNzMzZWJmNzEzNGYzMTdhYTExYzAyZmU4ZTE1In0.TNYlFta2VItrkn4L0Z9BJQ",tileLayerOptions:{detectRetina:!0,reuseTiles:!1},zoomControl:!1,attributionControl:!1}},i(function(){var i=function(t){var n=t.data,i=e.layout.pie().sort(null).value(function(t){return t.value}),o=e.svg.arc().outerRadius(t.r).innerRadius(t.r-10),r=t.r+t.strokeWidth,a=2*r,c=a,l=document.createElementNS(e.ns.prefix.svg,"svg"),s=e.select(l).data(n).attr("class","piechart").attr("width",a).attr("height",c),u=s.selectAll(".arc").data(i(n)).enter().append("g").attr("class","arc").attr("transform","translate("+r+","+r+")");return u.append("path").attr("d",o).attr("class",function(t){return t.data.type+"-arc"}),u.append("svg:text").text(function(e,n){if(0===n)return t.count}).attr("x",-4*t.count.toString().length).attr("dy",5).attr("class","arcText"),window.XMLSerializer?(new window.XMLSerializer).serializeToString(l):l.xml?l.xml:""};o.getMap().then(function(e){function o(t){var e=t.getAllChildMarkers(),o=e.length,a=r.pluck(e,"options"),c=r.map(r.countBy(a,"type"),function(t,e){return{type:e,value:t}}),l=28,s=1,u=2*(l+s),d=i({data:c,r:l,strokeWidth:s,count:o});return new n.DivIcon({html:d,className:"marker-cluster",iconSize:new n.point(u,u)})}function c(t){function e(e){if(r.every(e.coordinates)){"40.78200"===e.coordinates[0].toFixed(5)&&"-73.83170"===e.coordinates[1].toFixed(5)&&(e.coordinates[0]=40.77065,e.coordinates[1]=-73.97406);var i=n.marker(e.coordinates,{icon:u[t.type],title:t.name,entity_id:t.id,message:t.name,type:t.type});d.addLayer(i)}}r.forEach(t.locations,e)}function l(t){console.error(t.message+"  %O",t)}var s=a("filter")(t.entities,function(t){return t.collaborations.length>0});e.invalidateSize(),new n.Control.Zoom({position:"topright"}).addTo(e),n.control.locate({position:"topright",showPopup:!1,icon:"fa fa-location-arrow"}).addTo(e);var u={"Non-Profit":n.icon({iconUrl:"img/marker-nonprof.svg",iconSize:[60,60]}),"For-Profit":n.icon({iconUrl:"img/marker-prof.svg",iconSize:[60,60]}),Individual:n.icon({iconUrl:"img/marker-ind.svg",iconSize:[60,60]}),Government:n.icon({iconUrl:"img/marker-gov.svg",iconSize:[60,60]})},d=n.markerClusterGroup({spiderfyOnMaxZoom:!0,showCoverageOnHover:!1,iconCreateFunction:o,maxClusterRadius:30,spiderfyDistanceMultiplier:1.3});console.log("Original: %O",t.entities),console.log("Filtered: %O",s),r.forEach(s,c),e.addLayer(d),e.on("locationerror",l),d.on("click",function(e){t.setEntityID(e.layer.options.entity_id),t.clickedEntity.entity=t.currentEntity,t.actions.interacted=!0,t.settingsEnabled&&t.mobile&&t.toggleSettings(),t.safeApply()}),e.on("click",function(){t.clickedEntity.entity=null,t.actions.interacted=!0,t.safeApply()}),t.$on("selectItem",function(){var n=t.currentEntity.locations.length>0?r.pluck(t.currentEntity.locations,"coordinates"):null;n.length>0&&e.setView(n[0],11),t.actions.interacted=!0,t.safeApply()})})})}var o=["$scope","$timeout","leafletData","_","$filter",i];t.module("civic-graph").controller("mapCtrl",o)}(angular,d3,L);
!function(n,t){"use strict";function e(n){return void 0!==n&&null!==n}function i(n,t,i,c,o){function r(r){t.get(o.apiHost+"api/connections").success(function(t){var o=c("filter")(n.entities,function(t){return t.collaborations.length>=n.minConnections}),r={};i.forEach(i.keys(t.connections),function(n){r[n]=[]}),i.forEach(t.connections,function(n,t){i.forEach(n,function(n){var c=i.find(o,{id:n.source}),a=i.find(o,{id:n.target});e(c)&&e(a)&&r[t].push({source:c,target:a})})}),i.forEach(i.keys(n.entityTypes),function(t){var e=i.takeRight(i.sortBy(i.filter(n.entities,{type:t}),"collaborations.length"),5);i.forEach(e,function(n){n.wellconnected=!0})}),o=i.sortBy(o,function(n){return n.wellconnected?1:0}),a(o,r)})}n.isLoading=!0,n.connections={},r(),n.safeApply=function(n){var t=this.$root.$$phase;"$apply"===t||"$digest"===t?n&&"function"==typeof n&&n():this.$apply(n)},n.$on("triggerNetworkDraw",r),n.$on("viewChange",function(n){console.log(n)});var a=function(t,c){n.isLoading=!1;var o=d3.select("#network");o.selectAll("*").remove();var r=o.node().getBoundingClientRect(),a=r.height,s=r.width,l=6,u=7,d={Individual:{x:1,y:1},"For-Profit":{x:1,y:-1},"Non-Profit":{x:-1,y:1},Government:{x:-1,y:-1}},f=10,y=50,p=d3.max(t,function(n){return parseInt(n.employees)}),k=d3.max(t,function(n){return parseInt(n.followers)}),g={employees:d3.scale.sqrt().domain([10,p]).range([f,y]),followers:d3.scale.sqrt().domain([10,k]).range([f,y])},m={},h=d3.layout.force().size([s,a]).nodes(t).links(i.flatten(i.values(c))).charge(function(n){return n.employees?-2*g.employees(n.employees):-20}).linkStrength(0).linkDistance(50);i.forEach(c,function(n,t){m[t]=o.selectAll(".link ."+t+"-link").data(n).enter().append("line").attr("class",function(n){return e(n.source)&&e(n.target)?(n.type=t,"link "+t+"-link "+n.source.type+"-link "+n.target.type+"-link"):""})});var x=o.selectAll(".node").data(t).enter().append("g").attr("class",function(n){return"node "+n.type+"-node"}).call(h.drag);x.append("circle").attr("r",function(n){return n.employees?g.employees(n.employees):u}),x.append("text").text(function(n){return n.nickname?n.nickname:n.name}).attr("dx",function(){return-.065*this.getComputedTextLength()/2+"em"}).attr("dy",function(){return.08*this.parentNode.getBBox().height/2+.5+"em"}),h.on("tick",function(n){var e=l*n.alpha;i.forEach(t,function(n){n.x&&d[n.type]&&(n.x+=d[n.type].x*e,n.y+=d[n.type].y*e,n.x=Math.max(y,Math.min(s-y,n.x)),n.y=Math.max(y,Math.min(a-y,n.y)))}),i.forEach(m,function(n){n.attr("x1",function(n){return n.source.x}).attr("y1",function(n){return n.source.y}).attr("x2",function(n){return n.target.x}).attr("y2",function(n){return n.target.y})}),x.attr("transform",function(n){return"translate("+n.x+","+n.y+")"})});var E=function(n){requestAnimationFrame(function t(){for(var e=0;e<n;e++)h.tick();h.alpha()>0&&requestAnimationFrame(t)})};n.mobile||E(7),h.start();var v={};i.forEach(m,function(n){i.forEach(n[0],function(n){var t=n.__data__.source,e=n.__data__.target;v[t.index+","+e.index]=!0,v[e.index+","+t.index]=!0})});var L,A=function(n,t){return v[n.index+","+t.index]||n.index===t.index},T=function(n){x.classed("focused",function(t){return A(n,t)}).classed("unfocused",function(t){return!A(n,t)}),i.forEach(m,function(t){t.classed("focused",function(t){return n.index===t.source.index||n.index===t.target.index}).classed("unfocused",function(t){return!(n.index===t.source.index||n.index===t.target.index)})})},w=function(t){n.currentEntity!==t&&n.setEntity(t),n.safeApply(),T(t)},$=function(t){x.classed("focused",!1).classed("unfocused",!1),i.forEach(m,function(n){n.classed("focused",!1).classed("unfocused",!1)}),t.fixed=!1,n.clickedEntity.entity&&h.resume()},b=function(t){n.clickedEntity.entity||n.editing||n.currentLocation||(L=setTimeout(function(){w(t)},500)),n.actions.interacted=!0,n.safeApply()},_=function(t){n.clickedEntity.entity||n.currentLocation||($(t),clearTimeout(L)),n.actions.interacted=!0,n.safeApply()},B=function(t){n.safeApply(),x.classed("focused",function(n){return n.name in t.dict}).classed("unfocused",function(n){return!(n.name in t.dict)}),i.forEach(m,function(n){n.classed("focused",function(n){return n.source.name in t.dict&&n.target.name in t.dict}).classed("unfocused",function(n){return!(n.source.name in t.dict&&n.target.name in t.dict)})})},P=function(){x.classed("focused",!1).classed("unfocused",!1),i.forEach(m,function(n){n.classed("focused",!1).classed("unfocused",!1)}),n.clickedLocation.location&&h.resume()},C=function(t){n.showLicense=!1,n.clickedEntity.entity&&($(n.clickedEntity.entity),n.clickedEntity.entity=null),n.clickedLocation.location!==t&&(P(n.clickedLocation.location),n.clickedLocation.location=t,B(t)),d3.event&&d3.event.stopPropagation(),n.actions.interacted=!0,n.safeApply()},q=function(t){n.showLicense=!1,e(n.clickedLocation)&&(e(n.clickedLocation.location)&&(P(n.clickedLocation.entity),n.clickedLocation.location=null),n.clickedEntity.entity===t?n.clickedEntity.entity=null:(n.clickedEntity.entity&&$(n.clickedEntity.entity),n.clickedEntity.entity=t,w(t))),d3.event&&d3.event.stopPropagation(),n.actions.interacted=!0,n.safeApply()},I=function(){e(n.clickedLocation)&&(e(n.clickedLocation.location)&&($(n.clickedLocation.location),n.clickedLocation.location=null),e(n.clickedEntity.entity)&&($(n.clickedEntity.entity),n.clickedEntity.entity=null)),n.safeApply()},M=function(t){t.fixed?$(t):(t.x=s/2,t.y=a/2,t.px=s/2,t.py=a/2,t.fixed=!0,n.clickedEntity.entity=t),n.actions.interacted=!0,n.safeApply()};x.on("mouseover",b),x.on("mouseout",_),x.on("click",q),x.on("dblclick",M),o.on("click",I),x.classed("wellconnected",function(n){return n.hasOwnProperty("wellconnected")}),n.$on("changeSizeBy",function(n,t){o.selectAll("circle").transition().duration(250).attr("r",function(n){return n[t]?g[t](n[t]):u})}),n.$on("toggleLink",function(t,e){i.map(n.entityTypes,function(t,e){o.selectAll("."+e+"-link").classed({visible:function(t){return!n.connectionTypes[t.type]||n.entityTypes[t.source.type]&&n.entityTypes[t.target.type]},hidden:function(t){return!n.connectionTypes[t.type]||!n.entityTypes[t.source.type]||!n.entityTypes[t.target.type]}})})}),n.$on("toggleNode",function(t,e){o.selectAll("."+e.name+"-node").classed({visible:e.enabled,hidden:!e.enabled}),o.selectAll("."+e.name+"-link").classed({visible:function(t){return n.connectionTypes[t.type]&&n.entityTypes[t.source.type]&&n.entityTypes[t.target.type]},hidden:function(t){return!n.connectionTypes[t.type]||!n.entityTypes[t.source.type]||!n.entityTypes[t.target.type]}})}),n.$on("selectItem",function(t,e){"location"===e.type?C(n.currentLocation):q(n.currentEntity)})}}var c=["$scope","$http","_","$filter","config",i];n.module("civic-graph").controller("networkCtrl",c)}(angular,RTP);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
